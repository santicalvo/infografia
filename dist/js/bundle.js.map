{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/scss/main.scss?a42f","webpack:///./node_modules/style-loader/lib/addStyles.js","webpack:///./node_modules/style-loader/lib/urls.js","webpack:///./node_modules/d3/dist/package.js","webpack:///./node_modules/d3-array/src/ascending.js","webpack:///./node_modules/d3-array/src/bisector.js","webpack:///./node_modules/d3-array/src/bisect.js","webpack:///./node_modules/d3-array/src/pairs.js","webpack:///./node_modules/d3-array/src/cross.js","webpack:///./node_modules/d3-array/src/descending.js","webpack:///./node_modules/d3-array/src/number.js","webpack:///./node_modules/d3-array/src/variance.js","webpack:///./node_modules/d3-array/src/deviation.js","webpack:///./node_modules/d3-array/src/extent.js","webpack:///./node_modules/d3-array/src/array.js","webpack:///./node_modules/d3-array/src/constant.js","webpack:///./node_modules/d3-array/src/identity.js","webpack:///./node_modules/d3-array/src/range.js","webpack:///./node_modules/d3-array/src/ticks.js","webpack:///./node_modules/d3-array/src/threshold/sturges.js","webpack:///./node_modules/d3-array/src/histogram.js","webpack:///./node_modules/d3-array/src/quantile.js","webpack:///./node_modules/d3-array/src/threshold/freedmanDiaconis.js","webpack:///./node_modules/d3-array/src/threshold/scott.js","webpack:///./node_modules/d3-array/src/max.js","webpack:///./node_modules/d3-array/src/mean.js","webpack:///./node_modules/d3-array/src/median.js","webpack:///./node_modules/d3-array/src/merge.js","webpack:///./node_modules/d3-array/src/min.js","webpack:///./node_modules/d3-array/src/permute.js","webpack:///./node_modules/d3-array/src/scan.js","webpack:///./node_modules/d3-array/src/shuffle.js","webpack:///./node_modules/d3-array/src/sum.js","webpack:///./node_modules/d3-array/src/transpose.js","webpack:///./node_modules/d3-array/src/zip.js","webpack:///./node_modules/d3-axis/src/array.js","webpack:///./node_modules/d3-axis/src/identity.js","webpack:///./node_modules/d3-axis/src/axis.js","webpack:///./node_modules/d3-dispatch/src/dispatch.js","webpack:///./node_modules/d3-selection/src/namespaces.js","webpack:///./node_modules/d3-selection/src/namespace.js","webpack:///./node_modules/d3-selection/src/creator.js","webpack:///./node_modules/d3-selection/src/selector.js","webpack:///./node_modules/d3-selection/src/selectorAll.js","webpack:///./node_modules/d3-selection/src/matcher.js","webpack:///./node_modules/d3-selection/src/selection/sparse.js","webpack:///./node_modules/d3-selection/src/selection/enter.js","webpack:///./node_modules/d3-selection/src/constant.js","webpack:///./node_modules/d3-selection/src/selection/data.js","webpack:///./node_modules/d3-selection/src/selection/sort.js","webpack:///./node_modules/d3-selection/src/selection/attr.js","webpack:///./node_modules/d3-selection/src/window.js","webpack:///./node_modules/d3-selection/src/selection/style.js","webpack:///./node_modules/d3-selection/src/selection/classed.js","webpack:///./node_modules/d3-selection/src/selection/text.js","webpack:///./node_modules/d3-selection/src/selection/html.js","webpack:///./node_modules/d3-selection/src/selection/raise.js","webpack:///./node_modules/d3-selection/src/selection/lower.js","webpack:///./node_modules/d3-selection/src/selection/insert.js","webpack:///./node_modules/d3-selection/src/selection/remove.js","webpack:///./node_modules/d3-selection/src/selection/clone.js","webpack:///./node_modules/d3-selection/src/selection/on.js","webpack:///./node_modules/d3-selection/src/selection/dispatch.js","webpack:///./node_modules/d3-selection/src/selection/index.js","webpack:///./node_modules/d3-selection/src/selection/select.js","webpack:///./node_modules/d3-selection/src/selection/selectAll.js","webpack:///./node_modules/d3-selection/src/selection/filter.js","webpack:///./node_modules/d3-selection/src/selection/exit.js","webpack:///./node_modules/d3-selection/src/selection/merge.js","webpack:///./node_modules/d3-selection/src/selection/order.js","webpack:///./node_modules/d3-selection/src/selection/call.js","webpack:///./node_modules/d3-selection/src/selection/nodes.js","webpack:///./node_modules/d3-selection/src/selection/node.js","webpack:///./node_modules/d3-selection/src/selection/size.js","webpack:///./node_modules/d3-selection/src/selection/empty.js","webpack:///./node_modules/d3-selection/src/selection/each.js","webpack:///./node_modules/d3-selection/src/selection/property.js","webpack:///./node_modules/d3-selection/src/selection/append.js","webpack:///./node_modules/d3-selection/src/selection/datum.js","webpack:///./node_modules/d3-selection/src/select.js","webpack:///./node_modules/d3-selection/src/create.js","webpack:///./node_modules/d3-selection/src/local.js","webpack:///./node_modules/d3-selection/src/sourceEvent.js","webpack:///./node_modules/d3-selection/src/point.js","webpack:///./node_modules/d3-selection/src/mouse.js","webpack:///./node_modules/d3-selection/src/selectAll.js","webpack:///./node_modules/d3-selection/src/touch.js","webpack:///./node_modules/d3-selection/src/touches.js","webpack:///./node_modules/d3-drag/src/noevent.js","webpack:///./node_modules/d3-drag/src/nodrag.js","webpack:///./node_modules/d3-drag/src/constant.js","webpack:///./node_modules/d3-drag/src/event.js","webpack:///./node_modules/d3-drag/src/drag.js","webpack:///./node_modules/d3-color/src/define.js","webpack:///./node_modules/d3-color/src/color.js","webpack:///./node_modules/d3-color/src/math.js","webpack:///./node_modules/d3-color/src/lab.js","webpack:///./node_modules/d3-color/src/cubehelix.js","webpack:///./node_modules/d3-interpolate/src/basis.js","webpack:///./node_modules/d3-interpolate/src/basisClosed.js","webpack:///./node_modules/d3-interpolate/src/constant.js","webpack:///./node_modules/d3-interpolate/src/color.js","webpack:///./node_modules/d3-interpolate/src/rgb.js","webpack:///./node_modules/d3-interpolate/src/array.js","webpack:///./node_modules/d3-interpolate/src/date.js","webpack:///./node_modules/d3-interpolate/src/number.js","webpack:///./node_modules/d3-interpolate/src/object.js","webpack:///./node_modules/d3-interpolate/src/string.js","webpack:///./node_modules/d3-interpolate/src/transform/parse.js","webpack:///./node_modules/d3-interpolate/src/value.js","webpack:///./node_modules/d3-interpolate/src/discrete.js","webpack:///./node_modules/d3-interpolate/src/hue.js","webpack:///./node_modules/d3-interpolate/src/round.js","webpack:///./node_modules/d3-interpolate/src/transform/decompose.js","webpack:///./node_modules/d3-interpolate/src/transform/index.js","webpack:///./node_modules/d3-interpolate/src/zoom.js","webpack:///./node_modules/d3-interpolate/src/hsl.js","webpack:///./node_modules/d3-interpolate/src/lab.js","webpack:///./node_modules/d3-interpolate/src/hcl.js","webpack:///./node_modules/d3-interpolate/src/cubehelix.js","webpack:///./node_modules/d3-interpolate/src/piecewise.js","webpack:///./node_modules/d3-interpolate/src/quantize.js","webpack:///./node_modules/d3-timer/src/timer.js","webpack:///./node_modules/d3-timer/src/timeout.js","webpack:///./node_modules/d3-timer/src/interval.js","webpack:///./node_modules/d3-transition/src/transition/schedule.js","webpack:///./node_modules/d3-transition/src/interrupt.js","webpack:///./node_modules/d3-transition/src/transition/tween.js","webpack:///./node_modules/d3-transition/src/transition/interpolate.js","webpack:///./node_modules/d3-transition/src/transition/remove.js","webpack:///./node_modules/d3-transition/src/transition/selection.js","webpack:///./node_modules/d3-transition/src/transition/text.js","webpack:///./node_modules/d3-transition/src/transition/index.js","webpack:///./node_modules/d3-ease/src/linear.js","webpack:///./node_modules/d3-ease/src/quad.js","webpack:///./node_modules/d3-ease/src/cubic.js","webpack:///./node_modules/d3-transition/src/transition/select.js","webpack:///./node_modules/d3-transition/src/transition/selectAll.js","webpack:///./node_modules/d3-transition/src/transition/filter.js","webpack:///./node_modules/d3-transition/src/transition/merge.js","webpack:///./node_modules/d3-transition/src/transition/transition.js","webpack:///./node_modules/d3-transition/src/transition/on.js","webpack:///./node_modules/d3-transition/src/transition/attr.js","webpack:///./node_modules/d3-transition/src/transition/attrTween.js","webpack:///./node_modules/d3-transition/src/transition/style.js","webpack:///./node_modules/d3-transition/src/transition/styleTween.js","webpack:///./node_modules/d3-transition/src/transition/delay.js","webpack:///./node_modules/d3-transition/src/transition/duration.js","webpack:///./node_modules/d3-transition/src/transition/ease.js","webpack:///./node_modules/d3-ease/src/poly.js","webpack:///./node_modules/d3-ease/src/sin.js","webpack:///./node_modules/d3-ease/src/exp.js","webpack:///./node_modules/d3-ease/src/circle.js","webpack:///./node_modules/d3-ease/src/bounce.js","webpack:///./node_modules/d3-ease/src/back.js","webpack:///./node_modules/d3-ease/src/elastic.js","webpack:///./node_modules/d3-transition/src/selection/transition.js","webpack:///./node_modules/d3-transition/src/selection/index.js","webpack:///./node_modules/d3-transition/src/selection/interrupt.js","webpack:///./node_modules/d3-transition/src/active.js","webpack:///./node_modules/d3-brush/src/constant.js","webpack:///./node_modules/d3-brush/src/event.js","webpack:///./node_modules/d3-brush/src/noevent.js","webpack:///./node_modules/d3-brush/src/brush.js","webpack:///./node_modules/d3-chord/src/math.js","webpack:///./node_modules/d3-chord/src/chord.js","webpack:///./node_modules/d3-chord/src/array.js","webpack:///./node_modules/d3-chord/src/constant.js","webpack:///./node_modules/d3-path/src/path.js","webpack:///./node_modules/d3-chord/src/ribbon.js","webpack:///./node_modules/d3-collection/src/map.js","webpack:///./node_modules/d3-collection/src/nest.js","webpack:///./node_modules/d3-collection/src/set.js","webpack:///./node_modules/d3-collection/src/keys.js","webpack:///./node_modules/d3-collection/src/values.js","webpack:///./node_modules/d3-collection/src/entries.js","webpack:///./node_modules/d3-contour/src/array.js","webpack:///./node_modules/d3-contour/src/ascending.js","webpack:///./node_modules/d3-contour/src/area.js","webpack:///./node_modules/d3-contour/src/constant.js","webpack:///./node_modules/d3-contour/src/contains.js","webpack:///./node_modules/d3-contour/src/noop.js","webpack:///./node_modules/d3-contour/src/contours.js","webpack:///./node_modules/d3-contour/src/blur.js","webpack:///./node_modules/d3-contour/src/density.js","webpack:///./node_modules/d3-dsv/src/dsv.js","webpack:///./node_modules/d3-dsv/src/csv.js","webpack:///./node_modules/d3-dsv/src/tsv.js","webpack:///./node_modules/d3-fetch/src/blob.js","webpack:///./node_modules/d3-fetch/src/buffer.js","webpack:///./node_modules/d3-fetch/src/text.js","webpack:///./node_modules/d3-fetch/src/dsv.js","webpack:///./node_modules/d3-fetch/src/image.js","webpack:///./node_modules/d3-fetch/src/json.js","webpack:///./node_modules/d3-fetch/src/xml.js","webpack:///./node_modules/d3-force/src/center.js","webpack:///./node_modules/d3-force/src/constant.js","webpack:///./node_modules/d3-force/src/jiggle.js","webpack:///./node_modules/d3-quadtree/src/add.js","webpack:///./node_modules/d3-quadtree/src/cover.js","webpack:///./node_modules/d3-quadtree/src/quad.js","webpack:///./node_modules/d3-quadtree/src/x.js","webpack:///./node_modules/d3-quadtree/src/y.js","webpack:///./node_modules/d3-quadtree/src/quadtree.js","webpack:///./node_modules/d3-force/src/collide.js","webpack:///./node_modules/d3-quadtree/src/data.js","webpack:///./node_modules/d3-quadtree/src/extent.js","webpack:///./node_modules/d3-quadtree/src/find.js","webpack:///./node_modules/d3-quadtree/src/remove.js","webpack:///./node_modules/d3-quadtree/src/root.js","webpack:///./node_modules/d3-quadtree/src/size.js","webpack:///./node_modules/d3-quadtree/src/visit.js","webpack:///./node_modules/d3-quadtree/src/visitAfter.js","webpack:///./node_modules/d3-force/src/link.js","webpack:///./node_modules/d3-force/src/simulation.js","webpack:///./node_modules/d3-force/src/manyBody.js","webpack:///./node_modules/d3-force/src/radial.js","webpack:///./node_modules/d3-force/src/x.js","webpack:///./node_modules/d3-force/src/y.js","webpack:///./node_modules/d3-format/src/formatDecimal.js","webpack:///./node_modules/d3-format/src/exponent.js","webpack:///./node_modules/d3-format/src/formatSpecifier.js","webpack:///./node_modules/d3-format/src/formatTrim.js","webpack:///./node_modules/d3-format/src/formatPrefixAuto.js","webpack:///./node_modules/d3-format/src/defaultLocale.js","webpack:///./node_modules/d3-format/src/formatRounded.js","webpack:///./node_modules/d3-format/src/formatTypes.js","webpack:///./node_modules/d3-format/src/identity.js","webpack:///./node_modules/d3-format/src/locale.js","webpack:///./node_modules/d3-format/src/formatGroup.js","webpack:///./node_modules/d3-format/src/formatNumerals.js","webpack:///./node_modules/d3-format/src/precisionFixed.js","webpack:///./node_modules/d3-format/src/precisionPrefix.js","webpack:///./node_modules/d3-format/src/precisionRound.js","webpack:///./node_modules/d3-geo/src/adder.js","webpack:///./node_modules/d3-geo/src/math.js","webpack:///./node_modules/d3-geo/src/noop.js","webpack:///./node_modules/d3-geo/src/stream.js","webpack:///./node_modules/d3-geo/src/area.js","webpack:///./node_modules/d3-geo/src/cartesian.js","webpack:///./node_modules/d3-geo/src/bounds.js","webpack:///./node_modules/d3-geo/src/centroid.js","webpack:///./node_modules/d3-geo/src/constant.js","webpack:///./node_modules/d3-geo/src/compose.js","webpack:///./node_modules/d3-geo/src/rotation.js","webpack:///./node_modules/d3-geo/src/circle.js","webpack:///./node_modules/d3-geo/src/clip/buffer.js","webpack:///./node_modules/d3-geo/src/pointEqual.js","webpack:///./node_modules/d3-geo/src/clip/rejoin.js","webpack:///./node_modules/d3-geo/src/polygonContains.js","webpack:///./node_modules/d3-geo/src/clip/index.js","webpack:///./node_modules/d3-geo/src/clip/antimeridian.js","webpack:///./node_modules/d3-geo/src/clip/circle.js","webpack:///./node_modules/d3-geo/src/clip/line.js","webpack:///./node_modules/d3-geo/src/clip/rectangle.js","webpack:///./node_modules/d3-geo/src/clip/extent.js","webpack:///./node_modules/d3-geo/src/length.js","webpack:///./node_modules/d3-geo/src/distance.js","webpack:///./node_modules/d3-geo/src/contains.js","webpack:///./node_modules/d3-geo/src/graticule.js","webpack:///./node_modules/d3-geo/src/interpolate.js","webpack:///./node_modules/d3-geo/src/path/area.js","webpack:///./node_modules/d3-geo/src/identity.js","webpack:///./node_modules/d3-geo/src/path/bounds.js","webpack:///./node_modules/d3-geo/src/path/centroid.js","webpack:///./node_modules/d3-geo/src/path/context.js","webpack:///./node_modules/d3-geo/src/path/measure.js","webpack:///./node_modules/d3-geo/src/path/string.js","webpack:///./node_modules/d3-geo/src/path/index.js","webpack:///./node_modules/d3-geo/src/transform.js","webpack:///./node_modules/d3-geo/src/projection/fit.js","webpack:///./node_modules/d3-geo/src/projection/resample.js","webpack:///./node_modules/d3-geo/src/projection/index.js","webpack:///./node_modules/d3-geo/src/projection/conic.js","webpack:///./node_modules/d3-geo/src/projection/conicEqualArea.js","webpack:///./node_modules/d3-geo/src/projection/cylindricalEqualArea.js","webpack:///./node_modules/d3-geo/src/projection/albers.js","webpack:///./node_modules/d3-geo/src/projection/albersUsa.js","webpack:///./node_modules/d3-geo/src/projection/azimuthal.js","webpack:///./node_modules/d3-geo/src/projection/azimuthalEqualArea.js","webpack:///./node_modules/d3-geo/src/projection/azimuthalEquidistant.js","webpack:///./node_modules/d3-geo/src/projection/mercator.js","webpack:///./node_modules/d3-geo/src/projection/conicConformal.js","webpack:///./node_modules/d3-geo/src/projection/equirectangular.js","webpack:///./node_modules/d3-geo/src/projection/conicEquidistant.js","webpack:///./node_modules/d3-geo/src/projection/equalEarth.js","webpack:///./node_modules/d3-geo/src/projection/gnomonic.js","webpack:///./node_modules/d3-geo/src/projection/identity.js","webpack:///./node_modules/d3-geo/src/projection/naturalEarth1.js","webpack:///./node_modules/d3-geo/src/projection/orthographic.js","webpack:///./node_modules/d3-geo/src/projection/stereographic.js","webpack:///./node_modules/d3-geo/src/projection/transverseMercator.js","webpack:///./node_modules/d3-hierarchy/src/cluster.js","webpack:///./node_modules/d3-hierarchy/src/hierarchy/count.js","webpack:///./node_modules/d3-hierarchy/src/hierarchy/index.js","webpack:///./node_modules/d3-hierarchy/src/hierarchy/each.js","webpack:///./node_modules/d3-hierarchy/src/hierarchy/eachAfter.js","webpack:///./node_modules/d3-hierarchy/src/hierarchy/eachBefore.js","webpack:///./node_modules/d3-hierarchy/src/hierarchy/sum.js","webpack:///./node_modules/d3-hierarchy/src/hierarchy/sort.js","webpack:///./node_modules/d3-hierarchy/src/hierarchy/path.js","webpack:///./node_modules/d3-hierarchy/src/hierarchy/ancestors.js","webpack:///./node_modules/d3-hierarchy/src/hierarchy/descendants.js","webpack:///./node_modules/d3-hierarchy/src/hierarchy/leaves.js","webpack:///./node_modules/d3-hierarchy/src/hierarchy/links.js","webpack:///./node_modules/d3-hierarchy/src/array.js","webpack:///./node_modules/d3-hierarchy/src/pack/enclose.js","webpack:///./node_modules/d3-hierarchy/src/pack/siblings.js","webpack:///./node_modules/d3-hierarchy/src/accessors.js","webpack:///./node_modules/d3-hierarchy/src/constant.js","webpack:///./node_modules/d3-hierarchy/src/pack/index.js","webpack:///./node_modules/d3-hierarchy/src/treemap/round.js","webpack:///./node_modules/d3-hierarchy/src/treemap/dice.js","webpack:///./node_modules/d3-hierarchy/src/partition.js","webpack:///./node_modules/d3-hierarchy/src/stratify.js","webpack:///./node_modules/d3-hierarchy/src/tree.js","webpack:///./node_modules/d3-hierarchy/src/treemap/slice.js","webpack:///./node_modules/d3-hierarchy/src/treemap/squarify.js","webpack:///./node_modules/d3-hierarchy/src/treemap/index.js","webpack:///./node_modules/d3-hierarchy/src/treemap/binary.js","webpack:///./node_modules/d3-hierarchy/src/treemap/sliceDice.js","webpack:///./node_modules/d3-hierarchy/src/treemap/resquarify.js","webpack:///./node_modules/d3-polygon/src/area.js","webpack:///./node_modules/d3-polygon/src/centroid.js","webpack:///./node_modules/d3-polygon/src/cross.js","webpack:///./node_modules/d3-polygon/src/hull.js","webpack:///./node_modules/d3-polygon/src/contains.js","webpack:///./node_modules/d3-polygon/src/length.js","webpack:///./node_modules/d3-random/src/defaultSource.js","webpack:///./node_modules/d3-random/src/uniform.js","webpack:///./node_modules/d3-random/src/normal.js","webpack:///./node_modules/d3-random/src/logNormal.js","webpack:///./node_modules/d3-random/src/irwinHall.js","webpack:///./node_modules/d3-random/src/bates.js","webpack:///./node_modules/d3-random/src/exponential.js","webpack:///./node_modules/d3-scale/src/array.js","webpack:///./node_modules/d3-scale/src/ordinal.js","webpack:///./node_modules/d3-scale/src/band.js","webpack:///./node_modules/d3-scale/src/constant.js","webpack:///./node_modules/d3-scale/src/number.js","webpack:///./node_modules/d3-scale/src/continuous.js","webpack:///./node_modules/d3-scale/src/tickFormat.js","webpack:///./node_modules/d3-scale/src/linear.js","webpack:///./node_modules/d3-scale/src/identity.js","webpack:///./node_modules/d3-scale/src/nice.js","webpack:///./node_modules/d3-scale/src/log.js","webpack:///./node_modules/d3-scale/src/pow.js","webpack:///./node_modules/d3-scale/src/quantile.js","webpack:///./node_modules/d3-scale/src/quantize.js","webpack:///./node_modules/d3-scale/src/threshold.js","webpack:///./node_modules/d3-time/src/interval.js","webpack:///./node_modules/d3-time/src/millisecond.js","webpack:///./node_modules/d3-time/src/duration.js","webpack:///./node_modules/d3-time/src/second.js","webpack:///./node_modules/d3-time/src/minute.js","webpack:///./node_modules/d3-time/src/hour.js","webpack:///./node_modules/d3-time/src/day.js","webpack:///./node_modules/d3-time/src/week.js","webpack:///./node_modules/d3-time/src/month.js","webpack:///./node_modules/d3-time/src/year.js","webpack:///./node_modules/d3-time/src/utcMinute.js","webpack:///./node_modules/d3-time/src/utcHour.js","webpack:///./node_modules/d3-time/src/utcDay.js","webpack:///./node_modules/d3-time/src/utcWeek.js","webpack:///./node_modules/d3-time/src/utcMonth.js","webpack:///./node_modules/d3-time/src/utcYear.js","webpack:///./node_modules/d3-time-format/src/locale.js","webpack:///./node_modules/d3-time-format/src/defaultLocale.js","webpack:///./node_modules/d3-time-format/src/isoFormat.js","webpack:///./node_modules/d3-time-format/src/isoParse.js","webpack:///./node_modules/d3-scale/src/time.js","webpack:///./node_modules/d3-scale/src/utcTime.js","webpack:///./node_modules/d3-scale/src/sequential.js","webpack:///./node_modules/d3-scale/src/diverging.js","webpack:///./node_modules/d3-scale-chromatic/src/colors.js","webpack:///./node_modules/d3-scale-chromatic/src/categorical/category10.js","webpack:///./node_modules/d3-scale-chromatic/src/categorical/Accent.js","webpack:///./node_modules/d3-scale-chromatic/src/categorical/Dark2.js","webpack:///./node_modules/d3-scale-chromatic/src/categorical/Paired.js","webpack:///./node_modules/d3-scale-chromatic/src/categorical/Pastel1.js","webpack:///./node_modules/d3-scale-chromatic/src/categorical/Pastel2.js","webpack:///./node_modules/d3-scale-chromatic/src/categorical/Set1.js","webpack:///./node_modules/d3-scale-chromatic/src/categorical/Set2.js","webpack:///./node_modules/d3-scale-chromatic/src/categorical/Set3.js","webpack:///./node_modules/d3-scale-chromatic/src/ramp.js","webpack:///./node_modules/d3-scale-chromatic/src/diverging/BrBG.js","webpack:///./node_modules/d3-scale-chromatic/src/diverging/PRGn.js","webpack:///./node_modules/d3-scale-chromatic/src/diverging/PiYG.js","webpack:///./node_modules/d3-scale-chromatic/src/diverging/PuOr.js","webpack:///./node_modules/d3-scale-chromatic/src/diverging/RdBu.js","webpack:///./node_modules/d3-scale-chromatic/src/diverging/RdGy.js","webpack:///./node_modules/d3-scale-chromatic/src/diverging/RdYlBu.js","webpack:///./node_modules/d3-scale-chromatic/src/diverging/RdYlGn.js","webpack:///./node_modules/d3-scale-chromatic/src/diverging/Spectral.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-multi/BuGn.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-multi/BuPu.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-multi/GnBu.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-multi/OrRd.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-multi/PuBuGn.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-multi/PuBu.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-multi/PuRd.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-multi/RdPu.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-multi/YlGnBu.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-multi/YlGn.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-multi/YlOrBr.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-multi/YlOrRd.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-single/Blues.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-single/Greens.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-single/Greys.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-single/Purples.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-single/Reds.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-single/Oranges.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-multi/cubehelix.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-multi/rainbow.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-multi/sinebow.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-multi/viridis.js","webpack:///./node_modules/d3-shape/src/constant.js","webpack:///./node_modules/d3-shape/src/math.js","webpack:///./node_modules/d3-shape/src/arc.js","webpack:///./node_modules/d3-shape/src/curve/linear.js","webpack:///./node_modules/d3-shape/src/point.js","webpack:///./node_modules/d3-shape/src/line.js","webpack:///./node_modules/d3-shape/src/area.js","webpack:///./node_modules/d3-shape/src/descending.js","webpack:///./node_modules/d3-shape/src/identity.js","webpack:///./node_modules/d3-shape/src/pie.js","webpack:///./node_modules/d3-shape/src/curve/radial.js","webpack:///./node_modules/d3-shape/src/lineRadial.js","webpack:///./node_modules/d3-shape/src/areaRadial.js","webpack:///./node_modules/d3-shape/src/pointRadial.js","webpack:///./node_modules/d3-shape/src/array.js","webpack:///./node_modules/d3-shape/src/link/index.js","webpack:///./node_modules/d3-shape/src/symbol/circle.js","webpack:///./node_modules/d3-shape/src/symbol/cross.js","webpack:///./node_modules/d3-shape/src/symbol/diamond.js","webpack:///./node_modules/d3-shape/src/symbol/star.js","webpack:///./node_modules/d3-shape/src/symbol/square.js","webpack:///./node_modules/d3-shape/src/symbol/triangle.js","webpack:///./node_modules/d3-shape/src/symbol/wye.js","webpack:///./node_modules/d3-shape/src/symbol.js","webpack:///./node_modules/d3-shape/src/noop.js","webpack:///./node_modules/d3-shape/src/curve/basis.js","webpack:///./node_modules/d3-shape/src/curve/basisClosed.js","webpack:///./node_modules/d3-shape/src/curve/basisOpen.js","webpack:///./node_modules/d3-shape/src/curve/bundle.js","webpack:///./node_modules/d3-shape/src/curve/cardinal.js","webpack:///./node_modules/d3-shape/src/curve/cardinalClosed.js","webpack:///./node_modules/d3-shape/src/curve/cardinalOpen.js","webpack:///./node_modules/d3-shape/src/curve/catmullRom.js","webpack:///./node_modules/d3-shape/src/curve/catmullRomClosed.js","webpack:///./node_modules/d3-shape/src/curve/catmullRomOpen.js","webpack:///./node_modules/d3-shape/src/curve/linearClosed.js","webpack:///./node_modules/d3-shape/src/curve/monotone.js","webpack:///./node_modules/d3-shape/src/curve/natural.js","webpack:///./node_modules/d3-shape/src/curve/step.js","webpack:///./node_modules/d3-shape/src/offset/none.js","webpack:///./node_modules/d3-shape/src/order/none.js","webpack:///./node_modules/d3-shape/src/stack.js","webpack:///./node_modules/d3-shape/src/offset/expand.js","webpack:///./node_modules/d3-shape/src/offset/diverging.js","webpack:///./node_modules/d3-shape/src/offset/silhouette.js","webpack:///./node_modules/d3-shape/src/offset/wiggle.js","webpack:///./node_modules/d3-shape/src/order/ascending.js","webpack:///./node_modules/d3-shape/src/order/descending.js","webpack:///./node_modules/d3-shape/src/order/insideOut.js","webpack:///./node_modules/d3-shape/src/order/reverse.js","webpack:///./node_modules/d3-voronoi/src/constant.js","webpack:///./node_modules/d3-voronoi/src/point.js","webpack:///./node_modules/d3-voronoi/src/RedBlackTree.js","webpack:///./node_modules/d3-voronoi/src/Edge.js","webpack:///./node_modules/d3-voronoi/src/Cell.js","webpack:///./node_modules/d3-voronoi/src/Circle.js","webpack:///./node_modules/d3-voronoi/src/Beach.js","webpack:///./node_modules/d3-voronoi/src/Diagram.js","webpack:///./node_modules/d3-voronoi/src/voronoi.js","webpack:///./node_modules/d3-zoom/src/constant.js","webpack:///./node_modules/d3-zoom/src/event.js","webpack:///./node_modules/d3-zoom/src/transform.js","webpack:///./node_modules/d3-zoom/src/noevent.js","webpack:///./node_modules/d3-zoom/src/zoom.js","webpack:///./src/js/util/kochsnowflake.js","webpack:///./node_modules/topojson/node_modules/topojson-client/src/identity.js","webpack:///./node_modules/topojson/node_modules/topojson-client/src/transform.js","webpack:///./node_modules/topojson/node_modules/topojson-client/src/reverse.js","webpack:///./node_modules/topojson/node_modules/topojson-client/src/feature.js","webpack:///./node_modules/topojson/node_modules/topojson-client/src/bisect.js","webpack:///./node_modules/topojson/node_modules/topojson-server/src/hash/point-hash.js","webpack:///./node_modules/topojson/node_modules/topojson-simplify/src/spherical.js","webpack:///./src/js/util/colors.js","webpack:///./src/js/util/spain.js","webpack:///./src/js/util/glacier_drawing.js","webpack:///./src/js/util/arrow.js","webpack:///./src/js/util/voronoi_tile.js","webpack:///./src/js/util/mesh.js","webpack:///./src/js/util/snow_flakes.js","webpack:///./src/js/util/glacier_history.js","webpack:///./src/js/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","content","options","hmr","transform","insertInto","undefined","locals","fn","memo","stylesInDom","isOldIE","window","document","all","atob","apply","this","arguments","getElement","target","parent","styleTarget","querySelector","HTMLIFrameElement","contentDocument","head","e","singleton","singletonCounter","stylesInsertedAtTop","fixUrls","addStylesToDom","styles","length","item","domStyle","id","refs","j","parts","push","addStyle","listToStyles","list","newStyles","base","part","css","media","sourceMap","insertStyleElement","style","Error","lastStyleElementInsertedAtTop","insertAt","nextSibling","insertBefore","appendChild","firstChild","before","removeStyleElement","parentNode","removeChild","idx","indexOf","splice","createStyleElement","createElement","attrs","type","nonce","nc","getNonce","addAttrs","el","keys","forEach","setAttribute","obj","update","remove","result","default","styleIndex","applyToSingletonTag","URL","createObjectURL","revokeObjectURL","Blob","btoa","link","rel","createLinkElement","autoFixUrls","convertToAbsoluteUrls","unescape","encodeURIComponent","JSON","stringify","blob","oldSrc","href","styleSheet","cssText","createTextNode","newObj","DEBUG","newList","mayRemove","textStore","replaceText","index","replacement","filter","Boolean","join","cssNode","childNodes","location","baseUrl","protocol","host","currentDir","pathname","replace","fullMatch","origUrl","newUrl","unquotedOrigUrl","trim","$1","test","version","ascending","a","b","NaN","bisector","compare","f","x","left","lo","hi","mid","right","ascendingBisect","bisectRight","bisectLeft","bisect","pairs","array","pair","Array","cross","values0","values1","reduce","i0","i1","value0","n0","n1","values","descending","number","variance","valueof","delta","mean","sum","isNaN","deviation","v","Math","sqrt","src_extent","min","max","array_array","slice","array_map","map","constant","identity","src_range","start","stop","step","ceil","range","e10","e5","e2","ticks","count","reverse","tickIncrement","isFinite","floor","power","log","LN10","error","pow","tickStep","step0","abs","step1","sturges","LN2","src_histogram","domain","threshold","histogram","data","xz","x0","x1","tz","isArray","shift","pop","bin","bins","_","thresholds","quantile","freedmanDiaconis","sort","scott","src_max","src_mean","median","numbers","src_merge","arrays","merged","src_min","permute","indexes","permutes","scan","xi","xj","shuffle","random","src_sum","src_transpose","matrix","transpose_length","transpose","row","zip","array_slice","src_identity","axis_top","axis_right","axis_bottom","axis_left","epsilon","translateX","translateY","y","entering","__axis","axis_axis","orient","scale","tickArguments","tickValues","tickFormat","tickSizeInner","tickSizeOuter","tickPadding","k","axis","context","format","spacing","range0","range1","position","bandwidth","offset","round","copy","selection","path","selectAll","tick","order","tickExit","exit","tickEnter","enter","append","attr","line","select","text","merge","insert","transition","getAttribute","each","tickSize","axisTop","axisRight","axisBottom","axisLeft","noop","dispatch","Dispatch","set","callback","concat","constructor","on","typename","types","T","split","that","args","src_dispatch","xhtml","namespaces","svg","xlink","xml","xmlns","namespace","prefix","space","local","creator","fullname","ownerDocument","createElementNS","uri","namespaceURI","documentElement","none","src_selector","selector","selectorAll_empty","selectorAll","querySelectorAll","matcher","matches","matcher_element","vendorMatches","webkitMatchesSelector","msMatchesSelector","mozMatchesSelector","oMatchesSelector","src_matcher","sparse","EnterNode","datum","_next","_parent","__data__","child","next","keyPrefix","bindIndex","group","node","groupLength","dataLength","bindKey","keyValue","nodeByKeyValue","keyValues","sort_ascending","src_window","defaultView","styleValue","getPropertyValue","getComputedStyle","classArray","string","classList","ClassList","_node","_names","classedAdd","names","add","classedRemove","contains","textRemove","textContent","htmlRemove","innerHTML","raise","lower","previousSibling","constantNull","selection_cloneShallow","cloneNode","selection_cloneDeep","filterEvents","on_event","mouseenter","mouseleave","filterContextListener","listener","contextListener","event","related","relatedTarget","compareDocumentPosition","event1","event0","onRemove","__on","removeEventListener","capture","onAdd","wrap","addEventListener","customEvent","sourceEvent","dispatchEvent","params","CustomEvent","createEvent","initEvent","bubbles","cancelable","detail","selection_root","Selection","groups","parents","_groups","_parents","selection_selection","subgroups","subnode","subgroup","match","size","enterGroup","updateGroup","previous","_enter","_exit","groups0","groups1","m0","m1","merges","group0","group1","compareNode","sortgroups","sortgroup","nodes","empty","getAttributeNS","removeAttributeNS","removeAttribute","setAttributeNS","priority","removeProperty","setProperty","classed","html","clone","deep","typenames","on_parseTypenames","src_selection","src_select","src_create","nextId","Local","toString","source","current","src_point","ownerSVGElement","createSVGPoint","point","clientX","clientY","matrixTransform","getScreenCTM","inverse","rect","getBoundingClientRect","clientLeft","top","clientTop","mouse","changedTouches","src_selectAll","src_touch","touches","identifier","touch","src_touches","points","nopropagation","stopImmediatePropagation","noevent","preventDefault","nodrag","view","root","__noselect","MozUserSelect","yesdrag","noclick","setTimeout","d3_drag_src_constant","DragEvent","subject","active","dx","dy","defaultFilter","button","defaultContainer","defaultSubject","defaultTouchable","src_drag","mousedownx","mousedowny","mousemoving","touchending","container","touchable","gestures","listeners","clickDistance2","drag","mousedowned","touchstarted","touchmoved","touchended","gesture","beforestart","mousemoved","mouseupped","clearTimeout","sublisteners","p0","clickDistance","define","factory","extend","definition","Color","reI","reN","reP","reHex3","reHex6","reRgbInteger","RegExp","reRgbPercent","reRgbaInteger","reRgbaPercent","reHslPercent","reHslaPercent","named","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","color_color","toLowerCase","exec","Rgb","parseInt","rgbn","rgba","hsla","g","rgbConvert","rgb","opacity","color_rgb","hex","h","Hsl","hsl","hslConvert","hsl2rgb","m2","displayable","brighter","darker","deg2rad","PI","rad2deg","Xn","Yn","Zn","lab_t0","lab_t1","lab_t2","t3","labConvert","Lab","Hcl","cos","sin","z","rgb2lrgb","xyz2lab","lab","lab2xyz","lrgb2rgb","hclConvert","atan2","lch","hcl","C","cubehelix_D","cubehelix_E","ED","EB","BC_DA","cubehelix_cubehelix","Cubehelix","bl","cubehelixConvert","basis","t1","v0","v1","v2","v3","t2","cosh","sinh","src_basis","basisClosed","d3_interpolate_src_constant","linear","color_hue","gamma","nogamma","exponential","src_rgb","rgbGamma","color","end","rgbSpline","spline","colors","rgbBasis","rgbBasisClosed","src_array","nb","na","src_value","src_date","Date","setTime","src_number","src_object","reA","reB","cssRoot","cssView","svgNode","src_string","am","bm","bs","bi","lastIndex","q","one","string_zero","valueOf","discrete","src_hue","src_round","degrees","decompose_identity","rotate","skewX","scaleX","scaleY","decompose","atan","interpolateTransform","parse","pxComma","pxParen","degParen","xa","ya","xb","yb","translate","interpolateTransformCss","interpolateTransformSvg","baseVal","consolidate","rho","SQRT2","zoom_cosh","exp","src_zoom","p1","S","ux0","uy0","w0","ux1","uy1","w1","d2","d1","b0","b1","r0","r1","coshr0","u","zoom_sinh","duration","hsl_hsl","hue","src_hsl","hslLong","lab_lab","hcl_hcl","src_hcl","hclLong","src_cubehelix_cubehelix","cubehelixGamma","cubehelix","src_cubehelix","cubehelixLong","piecewise_piecewise","interpolate","I","taskHead","taskTail","quantize","interpolator","samples","timer_frame","timeout","timer_interval","pokeDelay","clockLast","clockNow","clockSkew","clock","performance","now","setFrame","requestAnimationFrame","clearNow","Timer","_call","_time","timer","delay","time","restart","timerFlush","wake","t0","Infinity","sleep","nap","poke","clearInterval","setInterval","TypeError","src_timeout","elapsed","src_interval","total","emptyOn","emptyTween","CREATED","SCHEDULED","STARTING","STARTED","RUNNING","ENDING","ENDED","transition_schedule","timing","schedules","__transition","self","tween","state","ease","schedule_create","schedule_init","schedule","schedule_get","schedule_set","interrupt","tweenValue","_id","transition_interpolate","selection_Selection","transition_id","Transition","_name","src_transition_transition","newId","selection_prototype","linear_linear","quadIn","quadOut","quadInOut","cubicIn","cubicOut","cubicInOut","children","inherit","id0","id1","on0","on1","sit","every","on_start","onFunction","attrTween","value00","value10","interpolate0","value1","_value","styleTween","style_styleRemove","styleRemoveEnd","style_styleFunction","style_styleConstant","text_textFunction","text_textConstant","tween0","tween1","easeConstant","polyIn","custom","exponent","polyOut","polyInOut","pi","halfPi","sinIn","sinOut","sinInOut","expIn","expOut","expInOut","circleIn","circleOut","circleInOut","bounce_b1","b2","b3","b4","b5","b6","b7","b8","b9","bounce_b0","bounceIn","bounceOut","bounceInOut","backIn","overshoot","backOut","backInOut","tau","elasticIn","asin","amplitude","period","elasticOut","elasticInOut","defaultTiming","transition_inherit","active_root","src_active","d3_brush_src_constant","src_event","noevent_nopropagation","src_noevent","MODE_DRAG","MODE_SPACE","MODE_HANDLE","MODE_CENTER","brush_X","handles","brush_type","input","output","xy","brush_Y","XY","cursors","overlay","w","nw","ne","se","sw","flipX","flipY","signsX","signsY","brush_defaultFilter","defaultExtent","width","height","brush_local","__brush","brush_empty","extent","brushSelection","dim","brushX","brush_brush","brushY","src_brush","brush","handleSize","initialize","handle","redraw","started","emitter","Emitter","e0","e1","s0","s1","moving","lockX","lockY","metaKey","altKey","signX","signY","W","N","E","shifting","shiftKey","point0","emit","moved","ended","keyCode","move","point1","selection0","selection1","starting","math_pi","math_halfPi","math_tau","math_max","src_chord","padAngle","sortGroups","sortSubgroups","sortChords","chord","groupSums","groupIndex","subgroupIndex","chords","di","dj","a0","a1","subindex","startAngle","endAngle","src_array_slice","d3_chord_src_constant","path_pi","path_tau","tauEpsilon","Path","_x0","_y0","_x1","_y1","path_path","moveTo","closePath","lineTo","quadraticCurveTo","y1","bezierCurveTo","x2","y2","arcTo","y0","x21","y21","x01","y01","l01_2","x20","y20","l21_2","l20_2","l21","l01","acos","t01","t21","arc","ccw","cw","da","src_path","defaultSource","defaultTarget","defaultRadius","radius","defaultStartAngle","defaultEndAngle","src_ribbon","ribbon","buffer","argv","sr","sa0","sa1","sx0","sy0","tr","ta0","ta1","Map","map_map","has","clear","entries","src_map","src_nest","sortValues","rollup","nest","sortKeys","depth","createResult","setResult","valuesByKey","createObject","setObject","createMap","setMap","sortKey","Set","proto","set_set","src_set","src_keys","src_values","src_entries","d3_contour_src_array_slice","src_ascending","src_area","ring","area","d3_contour_src_constant","hole","ringContains","yi","pj","yj","segmentContains","collinear","src_noop","cases","src_contours","smooth","smoothLinear","contours","contour","polygons","holes","fragmentByStart","fragmentByEnd","stitch","startIndex","endIndex","unshift","isorings","polygon","coordinates","xt","yt","_0","_1","blurX","blurY","defaultX","defaultY","defaultWeight","src_density","weight","density","Float32Array","wi","geometry","transformPolygon","transformRing","transformPoint","resize","cellSize","EOL","EOF","QUOTE","NEWLINE","RETURN","objectConverter","columns","Function","dsv","delimiter","reFormat","DELIMITER","charCodeAt","parseRows","rows","eof","eol","token","formatRow","formatValue","convert","customConverter","columnSet","column","inferColumns","formatRows","csv","csvParse","csvParseRows","csvFormat","csvFormatRows","tsv","tsvParse","tsvParseRows","tsvFormat","tsvFormatRows","responseBlob","response","ok","status","statusText","init","fetch","then","responseArrayBuffer","arrayBuffer","src_buffer","responseText","src_text","dsvParse","dsv_dsv","dsv_csv","dsv_tsv","src_image","Promise","resolve","reject","image","Image","onerror","onload","src","responseJson","json","parser","DOMParser","parseFromString","xml_html","xml_svg","src_center","force","sx","sy","d3_force_src_constant","jiggle","add_add","tree","xm","ym","xp","yp","bottom","_root","leaf","_x","_y","src_quad","x_defaultX","y_defaultY","quadtree","Quadtree","addAll","leaf_copy","treeProto","collide_x","vx","collide_y","vy","cover","yz","visit","find","x3","y3","quads","retainer","removeAll","visitAfter","collide","radii","strength","iterations","ri","ri2","prepare","quad","rj","link_index","link_find","nodeById","nodeId","src_link","links","strengths","distances","bias","distance","alpha","initializeStrength","initializeDistance","simulation_x","simulation_y","initialRadius","initialAngle","src_simulation","simulation","alphaMin","alphaDecay","alphaTarget","velocityDecay","forces","stepper","fx","fy","initializeNodes","angle","initializeForce","closest","manyBody","distanceMin2","distanceMax2","theta2","accumulate","distanceMin","distanceMax","theta","radial","radiuses","d3_force_src_x","d3_force_src_y","formatDecimal","toExponential","coefficient","src_exponent","re","formatSpecifier","specifier","FormatSpecifier","fill","align","sign","symbol","zero","comma","precision","prefixExponent","defaultLocale_locale","defaultLocale_format","defaultLocale_formatPrefix","formatTrim","out","formatRounded","formatTypes","%","toFixed","toPrecision","X","toUpperCase","d3_format_src_identity","prefixes","src_locale","locale","grouping","thousands","substring","currency","decimal","numerals","formatNumerals","percent","newFormat","suffix","formatType","maybeSuffix","valuePrefix","valueSuffix","valueNegative","padding","formatPrefix","defaultLocale","precisionFixed","precisionPrefix","precisionRound","adder","Adder","reset","adder_add","temp","bv","av","math_epsilon","src_math_pi","src_math_halfPi","quarterPi","src_math_tau","math_degrees","radians","math_cos","math_sin","math_sign","haversin","noop_noop","streamGeometry","stream","streamGeometryType","streamObjectType","Feature","FeatureCollection","features","Sphere","sphere","Point","MultiPoint","LineString","streamLine","MultiLineString","Polygon","streamPolygon","MultiPolygon","GeometryCollection","geometries","closed","coordinate","lineStart","lineEnd","polygonStart","polygonEnd","area_lambda00","phi00","area_lambda0","area_cosPhi0","area_sinPhi0","src_stream","areaRingSum","areaSum","areaStream","areaRingStart","areaRingEnd","areaRing","areaPointFirst","areaPoint","lambda","phi","dLambda","sdLambda","adLambda","cosPhi","sinPhi","d3_geo_src_area","cartesian_spherical","cartesian","cartesian_cartesian","spherical","cartesianDot","cartesianCross","cartesianAddInPlace","cartesianScale","vector","cartesianNormalizeInPlace","bounds_lambda0","bounds_phi0","bounds_lambda1","bounds_phi1","bounds_lambda2","bounds_lambda00","bounds_phi00","bounds_p0","ranges","bounds_range","deltaSum","boundsStream","boundsPoint","boundsLineStart","boundsLineEnd","boundsRingPoint","boundsRingStart","boundsRingEnd","bounds_linePoint","normal","inflection","phii","lambdai","antimeridian","bounds_angle","lambda0","lambda1","rangeCompare","rangeContains","W0","W1","centroid_X0","centroid_Y0","Z0","centroid_X1","centroid_Y1","Z1","X2","Y2","Z2","centroid_lambda00","centroid_phi00","centroid_x0","centroid_y0","z0","bounds","feature","deltaMax","centroidStream","centroidPoint","centroidLineStart","centroidLineEnd","centroidRingStart","centroidRingEnd","centroidPointCartesian","centroidLinePointFirst","centroidLinePoint","centroidRingPointFirst","centroidRingPoint","cx","cy","cz","src_centroid","d3_geo_src_constant","compose","invert","rotationIdentity","rotateRadians","deltaLambda","deltaPhi","deltaGamma","rotationLambda","rotationPhiGamma","forwardRotationLambda","rotation","cosDeltaPhi","sinDeltaPhi","cosDeltaGamma","sinDeltaGamma","src_rotation","forward","circleStream","direction","cosRadius","sinRadius","circleRadius","src_circle","center","circle","clip_buffer","lines","rejoin","pointEqual","Intersection","other","entry","segments","compareIntersection","startInside","clip","segment","rejoin_link","isSubject","polygonContains_sum","polygonContains","winding","phi0","sinPhi0","cosPhi0","sinPhi1","cosPhi1","phi1","absDelta","intersection","phiArc","src_clip","pointVisible","clipLine","sink","ringBuffer","ringSink","polygonStarted","pointRing","ringStart","ringEnd","clip_compareIntersection","pointLine","clean","ringSegments","validSegment","clip_antimeridian","sign0","sign1","sinLambda0Lambda1","clipAntimeridianIntersect","from","to","clip_circle","cr","smallRadius","notHemisphere","visible","intersect","two","n2","n2n2","n1n2","determinant","c1","c2","n1xn2","A","uu","polar","q1","code","c0","v00","point2","clip_line","ax","ay","clipMax","clipMin","clipRectangle","corner","comparePoint","ca","cb","x__","y__","v__","x_","y_","v_","first","activeStream","bufferStream","clipStream","linePoint","polygonInside","cleanInside","length_lambda0","length_sinPhi0","length_cosPhi0","clip_extent","cache","cacheStream","lengthSum","lengthStream","lengthPointFirst","lengthLineEnd","lengthPoint","cosDelta","src_length","distance_coordinates","distance_object","src_distance","containsObjectType","containsGeometry","containsGeometryType","containsPoint","containsLine","containsPolygon","ab","ringRadians","pointRadians","src_contains","graticuleX","graticuleY","graticule_graticule","X1","X0","Y1","Y0","Y","DX","DY","graticule","outline","extentMajor","extentMinor","stepMajor","stepMinor","graticule10","area_x00","area_y00","area_x0","area_y0","src_interpolate","cy0","cy1","sy1","kx0","ky0","kx1","ky1","B","d3_geo_src_identity","area_areaSum","area_areaRingSum","area_areaStream","area_areaRingStart","area_areaRingEnd","area_areaPointFirst","area_areaPoint","path_area","bounds_x0","bounds_y0","bounds_x1","bounds_y1","centroid_x00","centroid_y00","path_centroid_x0","path_centroid_y0","path_bounds","path_centroid_X0","path_centroid_Y0","centroid_Z0","path_centroid_X1","path_centroid_Y1","centroid_Z1","centroid_X2","centroid_Y2","centroid_Z2","centroid_centroidStream","centroid_centroidPoint","centroid_centroidLineStart","centroid_centroidLineEnd","centroid_centroidRingStart","centroid_centroidRingEnd","centroid","centroidPointFirstLine","centroidPointLine","centroidPointFirstRing","centroidPointRing","path_centroid","PathContext","_context","_radius","pointRadius","_line","_point","lengthRing","measure_x00","measure_y00","measure_x0","measure_y0","measure_lengthSum","measure_lengthStream","measure_lengthPointFirst","measure_lengthPoint","measure","PathString","_string","string_circle","_circle","d3_geo_src_path","projection","projectionStream","contextStream","src_transform","methods","transformer","TransformStream","fit","fitBounds","clipExtent","fitExtent","fitSize","fitWidth","fitHeight","maxDepth","cosMinDistance","resample","project","delta2","resampleLineTo","phi2","lambda2","dx2","dy2","dz","lambda00","x00","y00","a00","b00","c00","resampleStream","ringPoint","resample_resample","resampleNone","transformRadians","scaleTranslateRotate","cosAlpha","sinAlpha","ai","ci","fi","projection_projection","projectionMutator","projectAt","projectResample","projectTransform","projectRotateTransform","preclip","postclip","recenter","transformRotate","clipAngle","conicProjection","parallels","conicEqualAreaRaw","cylindricalEqualAreaRaw","r0y","conicEqualArea","albers","projection_albersUsa","lower48Point","alaskaPoint","hawaiiPoint","lower48","alaska","hawaii","pointStream","albersUsa","streams","azimuthalRaw","azimuthalInvert","sc","cc","azimuthalEqualAreaRaw","cxcy","azimuthalEqualArea","azimuthalEquidistantRaw","azimuthalEquidistant","mercatorRaw","mercator","mercatorProjection","reclip","tany","conicConformalRaw","conicConformal","equirectangularRaw","equirectangular","conicEquidistantRaw","gy","nx","conicEquidistant","A1","A2","A3","A4","M","equalEarthRaw","l2","l6","equalEarth","gnomonicRaw","gnomonic","identity_scaleTranslate","kx","ky","tx","ty","projection_identity","reflectX","reflectY","naturalEarth1Raw","phi4","naturalEarth1","orthographicRaw","orthographic","stereographicRaw","stereographic","transverseMercatorRaw","transverseMercator","defaultSeparation","meanXReduce","maxYReduce","cluster","separation","nodeSize","previousNode","eachAfter","meanX","maxY","leafLeft","leafRight","count_count","hierarchy","childs","Node","valued","defaultChildren","eachBefore","computeHeight","copyData","ancestor","aNodes","ancestors","bNodes","leastCommonAncestor","descendants","leaves","d3_hierarchy_src_array_slice","enclose","circles","array_shuffle","enclosesWeak","encloseBasis","extendBasis","enclosesWeakAll","enclosesNot","encloseBasis2","encloseBasis3","dr","r2","r21","r3","a2","a3","c3","d3","place","intersects","score","siblings_Node","packEnclose","aa","sj","sk","pack","siblings","required","constantZero","d3_hierarchy_src_constant","pack_defaultRadius","src_pack","radiusLeaf","packChildren","translateChild","treemap_round","dice","src_partition","partition","positionNode","stratify_keyPrefix","preroot","ambiguous","defaultId","defaultParentId","parentId","src_stratify","stratify","nodeKey","nodeByKey","tree_defaultSeparation","nextLeft","nextRight","moveSubtree","wm","wp","change","nextAncestor","vim","TreeNode","src_tree","treeRoot","firstWalk","secondWalk","sizeNode","executeShifts","midpoint","vip","vop","vom","sip","sop","sim","som","apportion","treemap_slice","squarify_phi","squarifyRatio","ratio","nodeValue","sumValue","minValue","maxValue","newRatio","minRatio","beta","squarify","src_treemap","tile","paddingStack","paddingInner","paddingTop","paddingRight","paddingBottom","paddingLeft","treemap","paddingOuter","binary","sums","valueOffset","valueTarget","valueLeft","valueRight","xk","yk","sliceDice","treemap_resquarify","resquarify","_squarify","d3_polygon_src_area","d3_polygon_src_centroid","src_cross","lexicographicOrder","computeUpperHullIndexes","hull","sortedPoints","flippedPoints","upperIndexes","lowerIndexes","skipLeft","skipRight","d3_polygon_src_contains","inside","d3_polygon_src_length","perimeter","src_defaultSource","uniform","sourceRandomUniform","randomUniform","src_normal","sourceRandomNormal","randomNormal","mu","sigma","logNormal","sourceRandomLogNormal","randomLogNormal","irwinHall","sourceRandomIrwinHall","randomIrwinHall","bates","sourceRandomBates","randomBates","src_exponential","sourceRandomExponential","randomExponential","d3_scale_src_array_array","src_array_map","d3_scale_src_array_slice","implicit","ordinal","unknown","band","ordinalRange","rescale","rangeRound","band_point","pointish","d3_scale_src_constant","d3_scale_src_number","unit","deinterpolateLinear","bimap","deinterpolate","reinterpolate","d0","polymap","clamp","continuous","piecewise","deinterpolateClamp","reinterpolateClamp","src_tickFormat","linearish","nice","src_linear_linear","identity_identity","interval","log_deinterpolate","log_reinterpolate","pow10","powp","logp","log10","log2","reflect","log_log","logs","pows","pow_raise","pow_pow","pow_sqrt","quantile_quantile","invertExtent","quantiles","quantize_quantize","threshold_threshold","interval_t0","interval_t1","newInterval","floori","offseti","field","date","millisecond_millisecond","src_millisecond","milliseconds","durationMinute","durationWeek","second_second","getUTCSeconds","src_second","seconds","minute_minute","getMinutes","src_minute","minutes","hour_hour","getTimezoneOffset","getHours","src_hour","hours","day_day","setHours","setDate","getDate","src_day","days","weekday","getDay","sunday","monday","tuesday","wednesday","thursday","friday","saturday","sundays","mondays","tuesdays","wednesdays","thursdays","fridays","saturdays","month_month","setMonth","getMonth","getFullYear","src_month","months","year_year","setFullYear","src_year","years","utcMinute","setUTCSeconds","getUTCMinutes","src_utcMinute","utcMinutes","utcHour","setUTCMinutes","getUTCHours","src_utcHour","utcHours","utcDay","setUTCHours","setUTCDate","getUTCDate","src_utcDay","utcDays","utcWeekday","getUTCDay","utcSunday","utcMonday","utcTuesday","utcWednesday","utcThursday","utcFriday","utcSaturday","utcSundays","utcMondays","utcTuesdays","utcWednesdays","utcThursdays","utcFridays","utcSaturdays","utcMonth","setUTCMonth","getUTCMonth","getUTCFullYear","src_utcMonth","utcMonths","utcYear","setUTCFullYear","src_utcYear","utcYears","localDate","H","L","utcDate","UTC","newYear","formatLocale","locale_dateTime","dateTime","locale_date","locale_time","locale_periods","periods","locale_weekdays","locale_shortWeekdays","shortDays","locale_months","locale_shortMonths","shortMonths","periodRe","formatRe","periodLookup","formatLookup","weekdayRe","weekdayLookup","shortWeekdayRe","shortWeekdayLookup","monthRe","monthLookup","shortMonthRe","shortMonthLookup","formats","formatDayOfMonth","formatMicroseconds","formatHour24","formatHour12","formatDayOfYear","formatMilliseconds","formatMonthNumber","formatMinutes","Q","formatUnixTimestamp","formatUnixTimestampSeconds","formatSeconds","formatWeekdayNumberMonday","U","formatWeekNumberSunday","V","formatWeekNumberISO","formatWeekdayNumberSunday","formatWeekNumberMonday","locale_formatYear","formatFullYear","Z","formatZone","formatLiteralPercent","utcFormats","formatUTCDayOfMonth","formatUTCMicroseconds","formatUTCHour24","formatUTCHour12","formatUTCDayOfYear","formatUTCMilliseconds","formatUTCMonthNumber","formatUTCMinutes","formatUTCSeconds","formatUTCWeekdayNumberMonday","formatUTCWeekNumberSunday","formatUTCWeekNumberISO","formatUTCWeekdayNumberSunday","formatUTCWeekNumberMonday","formatUTCYear","formatUTCFullYear","formatUTCZone","parses","parseSpecifier","parseDayOfMonth","parseMicroseconds","parseHour24","parseDayOfYear","parseMilliseconds","parseMonthNumber","parseMinutes","parseUnixTimestamp","parseUnixTimestampSeconds","parseSeconds","parseWeekdayNumberMonday","parseWeekNumberSunday","parseWeekNumberISO","parseWeekdayNumberSunday","parseWeekNumberMonday","parseYear","parseFullYear","parseZone","parseLiteralPercent","pad","pads","charAt","newParse","newDate","week","day","utcFormat","utcParse","src_defaultLocale_locale","timeFormat","timeParse","-","0","numberRe","percentRe","requoteRe","requote","getMilliseconds","getSeconds","getUTCMilliseconds","dow","defaultLocale_defaultLocale","isoFormat","toISOString","isoParse","time_durationSecond","time_durationMinute","time_durationHour","time_durationDay","time_durationWeek","durationMonth","durationYear","time_date","time_number","calendar","year","month","hour","minute","second","millisecond","formatMillisecond","formatSecond","formatMinute","formatHour","formatDay","formatWeek","formatMonth","formatYear","tickIntervals","tickInterval","src_time","utcTime","sequential","k10","diverging","k21","src_colors","category10","Accent","Dark2","Paired","Pastel1","Pastel2","Set1","Set2","Set3","ramp","scheme","BrBG_scheme","BrBG","PRGn_scheme","PRGn","PiYG_scheme","PiYG","PuOr_scheme","PuOr","RdBu_scheme","RdBu","RdGy_scheme","RdGy","RdYlBu_scheme","RdYlBu","RdYlGn_scheme","RdYlGn","Spectral_scheme","Spectral","BuGn_scheme","BuGn","BuPu_scheme","BuPu","GnBu_scheme","GnBu","OrRd_scheme","OrRd","PuBuGn_scheme","PuBuGn","PuBu_scheme","PuBu","PuRd_scheme","PuRd","RdPu_scheme","RdPu","YlGnBu_scheme","YlGnBu","YlGn_scheme","YlGn","YlOrBr_scheme","YlOrBr","YlOrRd_scheme","YlOrRd","Blues_scheme","Blues","Greens_scheme","Greens","Greys_scheme","Greys","Purples_scheme","Purples","Reds_scheme","Reds","Oranges_scheme","Oranges","sequential_multi_cubehelix","warm","cool","rainbow_c","rainbow","ts","sinebow_c","pi_1_3","pi_2_3","sinebow","viridis_ramp","viridis","magma","inferno","plasma","d3_shape_src_constant","math_abs","math_atan2","src_math_cos","src_math_max","math_min","src_math_sin","math_sqrt","src_math_epsilon","d3_shape_src_math_pi","d3_shape_src_math_halfPi","d3_shape_src_math_tau","math_asin","arcInnerRadius","innerRadius","arcOuterRadius","outerRadius","arcStartAngle","arcEndAngle","arcPadAngle","cornerTangents","rc","ox","oy","x11","y11","x10","y10","D","cx0","cx1","dx0","dy0","dx1","dy1","src_arc","cornerRadius","padRadius","a01","a11","a10","da0","da1","ap","rp","rc0","rc1","oc","x32","y32","arc_intersect","bx","by","kc","lc","Linear","areaStart","areaEnd","curve_linear","point_x","point_y","src_line","defined","curve","defined0","d3_shape_src_area","x0z","y0z","arealine","lineX0","lineY0","lineY1","lineX1","src_descending","d3_shape_src_identity","src_pie","pie","arcs","pa","curveRadialLinear","curveRadial","Radial","_curve","lineRadial","src_lineRadial","areaRadial","lineStartAngle","lineEndAngle","lineInnerRadius","lineOuterRadius","pointRadial","d3_shape_src_array_slice","linkSource","linkTarget","link_link","curveHorizontal","curveVertical","link_curveRadial","p2","p3","linkHorizontal","linkVertical","linkRadial","symbol_circle","draw","symbol_cross","tan30","tan30_2","diamond","kr","star_kx","star_ky","star","square","sqrt3","triangle","wye_s","wye_k","wye_a","wye","symbols","src_symbol","d3_shape_src_noop","basis_point","Basis","curve_basis","BasisClosed","_x2","_x3","_x4","_y2","_y3","_y4","curve_basisClosed","BasisOpen","basisOpen","Bundle","_basis","_beta","curve_bundle","bundle","cardinal_point","_k","Cardinal","tension","cardinal","CardinalClosed","_x5","_y5","cardinalClosed","CardinalOpen","cardinalOpen","catmullRom_point","_l01_a","_l01_2a","_l12_a","_l12_2a","_l23_a","_l23_2a","CatmullRom","_alpha","x23","y23","curve_catmullRom","catmullRom","CatmullRomClosed","catmullRomClosed","CatmullRomOpen","catmullRomOpen","LinearClosed","linearClosed","monotone_sign","slope3","h0","h1","slope2","monotone_point","MonotoneX","MonotoneY","ReflectContext","monotoneX","monotoneY","Natural","controlPoints","_t0","px","py","natural","Step","_t","curve_step","stepBefore","stepAfter","offset_none","series","order_none","stackValue","src_stack","stack","oz","kz","sz","sij","ki","si","expand","offset_diverging","yn","silhouette","wiggle","s2","sij0","s3","order_ascending","ascending_sum","order_descending","insideOut","tops","bottoms","order_reverse","d3_voronoi_src_constant","src_point_x","src_point_y","RedBlackTree","RedBlackNode","R","P","RedBlackRotateLeft","RedBlackRotateRight","RedBlackFirst","after","grandpa","uncle","sibling","src_RedBlackTree","createEdge","edge","Diagram_edges","setEdgeEnd","cells","halfedges","createBorderEdge","vertex","clipEdge","connectEdge","fm","fb","lx","ly","rx","ry","cellHalfedgeAngle","cell","site","va","vb","cellHalfedgeStart","cellHalfedgeEnd","firstCircle","circlePool","Circle","attachCircle","lArc","rArc","lSite","cSite","rSite","Diagram_epsilon2","ha","hc","Diagram_circles","detachCircle","beachPool","Beach","createBeach","beach","detachBeach","beaches","removeBeach","disappearing","Diagram_epsilon","iArc","nArcs","addBeach","dxl","dxr","directrix","leftBreakPoint","rightBreakPoint","createCell","newArc","hb","rfocx","rfocy","pby2","lfocx","lfocy","plby2","hl","aby2","lexicographic","Diagram","sites","sortCellHalfedges","clipEdges","iCell","iHalfedge","nHalfedges","startX","startY","endX","endY","nCells","dc","v01","v11","v10","clipCells","edges","triangles","_found","src_voronoi","voronoi","d3_zoom_src_constant","ZoomEvent","Transform","applyX","applyY","invertX","invertY","rescaleX","rescaleY","transform_identity","transform_transform","__zoom","src_noevent_nopropagation","d3_zoom_src_noevent","zoom_defaultFilter","zoom_defaultExtent","SVGElement","clientWidth","clientHeight","defaultTransform","defaultWheelDelta","deltaY","deltaMode","zoom_defaultTouchable","defaultConstrain","translateExtent","recordArray","d3_zoom_src_zoom","touchstarting","constrain","wheelDelta","scaleExtent","touchDelay","wheelDelay","zoom","wheeled","dblclicked","Gesture","wheel","k1","touch0","touch1","l0","l1","dp","dl","collection","scaleBy","scaleTo","translateBy","translateTo","display","arraySegment","iteration","newArraySegment","newPoint1","newPoint2","newPoint3","createKochFlake","dimensions","containerGroup","times","iterateKochFlake","topojson_client_src_identity","topojson_client_src_transform","src_reverse","src_feature","topology","feature_feature","bbox","properties","feature_object","point_hash_buffer","ArrayBuffer","Float64Array","Uint32Array","blueGradient","getRandomInt","generateAllColors","colorRange","colorScale","generateSpain","maladetaPosition","topoData","topojson","objects","ESP_adm2","NAME_2","someColors","colorGlaciar","paintGlacierInMap","maladetaMap","glaciarDrawing","glaciar","getGlacierDrawing","spainWithArrow","arrow","arrowColor","arrowData","getArrow","maladeta","maladetaRect","arrowRect","console","warn","positionArrowInMaladeta","generateVoronoiGraph","polygonSize","sample","sampler","radius2","SQRT1_2","gridWidth","gridHeight","grid","queue","queueSize","sampleSize","far","j0","j1","poissonDiscSampler","backgroundTile","allPaths","sortByV","nodeA","nodeB","ra","rb","generateVoronoiTileBackground","color1","color2","strokeColor","d3Node","paintNodes","printNode","addNodesListeners","snowFlakes","mountainColor","glacier","duplicateMountain","frontMountain","backMountain","d3Parent","paintSnowFlake","tileColor1","tileColor2","blockBackGround","mapBackGround","defaultStrokeWidth","defaultCorners","defaultOpacity","textColor","margin","maladateSizeEvolution","mountainYears","flakeYears","hectares","fontFamily","maxSizeLast20years","_toConsumableArray","scales","val","clearSvg","getElementsByTagName","isD3object","d3ob","rndId","substr","d3Rect","element","computeTranslate","props","wait","computeScale","roundedSquareCanvas","corners","stroke","strokeWidth","squareGroup","renderTitle","referent","elementRect","refRect","marginDoble","titleProps","strokeFill","fontSize","textContainer","renderMap","mapGroup","rectInMap","xMap","yMap","scrollY","positionMaladetaMap","mapOb","mapWithArrow","mapRect","rectangle","scaleProps","positionMap","x_y_ini","x_y_end","arrow_path","original_path","splited","position1","position2","getElementById","catch","er","paintSnowFlakes","availableHeight","leftLegendRect","blockHeight","flakeSize","flakesContainer","sq","newFlake","flakeSquareProps","flakeSquare","getNode","flake","transformFlakeGroup","transformScaleFlake","snowFlake","txtRect","fixedY","bgRect","snowLeft","snowFlakeOutter","snowFlakeRect","newTransform","renderGlaciers","svgRect","glaciersHistoryGroup","maxSize","twoMountains","sizeScales","glaciers","historyGroup","mountainsGroup","glacierEl","elem","scaleFactor","getBBox","erect","erect1","widthOffset","tx1","ty1","tx2","ty2","scaleIce","paintGlaciers","yearSizeAr","tmg","tmgr","sqrRect","athird","mountainsY","xMountains","glacierTexts","rightLegendRect","textNodes","boxes","maxWidth","box","rectWidth","centerX","renderLegends","lastY","squareLeftProps","leftLegendGroup","leftSquarePosition","squareRightProps","assign","rightLegendGroup","rightSquarePosition","leftText","interlineado","loss","legendGroup","firstSentence","createLegendText","renderLeftText","rightText","renderRightText","leftTextBox","rightTextBox","fSize","legends","bottomLegends","title","renderTile","bottomGroup","open","renderBottomLegends","topRect","bottomRect","topY","bottomY","availableGroup","renderAvailableSpace","availableContainer","flakesSquareGroup","snowFlakesGroup","txt","main"],"mappings":"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A,2BACA,iCACA,uCACA,6CACA,mDACA,yDACA,+DACA,sEACAtI,IAAMouE,IAESqB,GAAAX,GAAKU,ICZTE,GAAM,IAAAvxE,MAAA,GAAAmK,OACjB,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,yDACA,+DACA,sEACAtI,IAAMouE,IAESuB,GAAAb,GAAKY,ICZTE,GAAM,IAAAzxE,MAAA,GAAAmK,OACjB,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,yDACA,+DACA,sEACAtI,IAAMouE,IAESyB,GAAAf,GAAKc,ICZTE,GAAM,IAAA3xE,MAAA,GAAAmK,OACjB,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,yDACA,+DACA,sEACAtI,IAAMouE,IAES2B,GAAAjB,GAAKgB,ICZTE,GAAM,IAAA7xE,MAAA,GAAAmK,OACjB,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,yDACA,+DACA,sEACAtI,IAAMouE,IAES6B,GAAAnB,GAAKkB,ICZTE,GAAM,IAAA/xE,MAAA,GAAAmK,OACjB,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAtI,IAAMouE,IAES+B,GAAArB,GAAKoB,ICVTE,GAAM,IAAAjyE,MAAA,GAAAmK,OACjB,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAtI,IAAMouE,IAESiC,GAAAvB,GAAKsB,ICVTE,GAAM,IAAAnyE,MAAA,GAAAmK,OACjB,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAtI,IAAMouE,IAESmC,GAAAzB,GAAKwB,ICVTE,GAAM,IAAAryE,MAAA,GAAAmK,OACjB,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAtI,IAAMouE,IAESqC,GAAA3B,GAAK0B,ICVTE,GAAM,IAAAvyE,MAAA,GAAAmK,OACjB,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAtI,IAAMouE,IAESuC,GAAA7B,GAAK4B,ICVTE,GAAM,IAAAzyE,MAAA,GAAAmK,OACjB,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAtI,IAAMouE,IAESyC,GAAA/B,GAAK8B,ICVTE,GAAM,IAAA3yE,MAAA,GAAAmK,OACjB,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAtI,IAAMouE,IAES2C,GAAAjC,GAAKgC,ICVTE,GAAM,IAAA7yE,MAAA,GAAAmK,OACjB,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAtI,IAAMouE,IAES6C,GAAAnC,GAAKkC,ICVTE,GAAM,IAAA/yE,MAAA,GAAAmK,OACjB,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAtI,IAAMouE,IAES+C,GAAArC,GAAKoC,ICVTE,GAAM,IAAAjzE,MAAA,GAAAmK,OACjB,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAtI,IAAMouE,IAESiD,GAAAvC,GAAKsC,ICVTE,GAAM,IAAAnzE,MAAA,GAAAmK,OACjB,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAtI,IAAMouE,IAESmD,GAAAzC,GAAKwC,ICVTE,GAAM,IAAArzE,MAAA,GAAAmK,OACjB,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAtI,IAAMouE,IAESqD,GAAA3C,GAAK0C,ICVTE,GAAM,IAAAvzE,MAAA,GAAAmK,OACjB,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAtI,IAAMouE,IAESuD,GAAA7C,GAAK4C,ICVTE,GAAM,IAAAzzE,MAAA,GAAAmK,OACjB,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAtI,IAAMouE,IAESyD,GAAA/C,GAAK8C,ICVTE,GAAM,IAAA3zE,MAAA,GAAAmK,OACjB,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAtI,IAAMouE,IAES2D,GAAAjD,GAAKgD,ICVTE,GAAM,IAAA7zE,MAAA,GAAAmK,OACjB,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAtI,IAAMouE,IAES6D,GAAAnD,GAAKkD,ICVTE,GAAM,IAAA/zE,MAAA,GAAAmK,OACjB,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DAC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","file":"js/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","\nvar content = require(\"!!../../node_modules/mini-css-extract-plugin/dist/loader.js!../../node_modules/css-loader/dist/cjs.js!../../node_modules/sass-loader/lib/loader.js!./main.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../node_modules/mini-css-extract-plugin/dist/loader.js!../../node_modules/css-loader/dist/cjs.js!../../node_modules/sass-loader/lib/loader.js!./main.scss\", function() {\n\t\tvar newContent = require(\"!!../../node_modules/mini-css-extract-plugin/dist/loader.js!../../node_modules/css-loader/dist/cjs.js!../../node_modules/sass-loader/lib/loader.js!./main.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\nvar stylesInDom = {};\n\nvar\tmemoize = function (fn) {\n\tvar memo;\n\n\treturn function () {\n\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\n\t\treturn memo;\n\t};\n};\n\nvar isOldIE = memoize(function () {\n\t// Test for IE <= 9 as proposed by Browserhacks\n\t// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n\t// Tests for existence of standard globals is to allow style-loader\n\t// to operate correctly into non-standard environments\n\t// @see https://github.com/webpack-contrib/style-loader/issues/177\n\treturn window && document && document.all && !window.atob;\n});\n\nvar getTarget = function (target, parent) {\n  if (parent){\n    return parent.querySelector(target);\n  }\n  return document.querySelector(target);\n};\n\nvar getElement = (function (fn) {\n\tvar memo = {};\n\n\treturn function(target, parent) {\n                // If passing function in options, then use it for resolve \"head\" element.\n                // Useful for Shadow Root style i.e\n                // {\n                //   insertInto: function () { return document.querySelector(\"#foo\").shadowRoot }\n                // }\n                if (typeof target === 'function') {\n                        return target();\n                }\n                if (typeof memo[target] === \"undefined\") {\n\t\t\tvar styleTarget = getTarget.call(this, target, parent);\n\t\t\t// Special case to return head of iframe instead of iframe itself\n\t\t\tif (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n\t\t\t\ttry {\n\t\t\t\t\t// This will throw an exception if access to iframe is blocked\n\t\t\t\t\t// due to cross-origin restrictions\n\t\t\t\t\tstyleTarget = styleTarget.contentDocument.head;\n\t\t\t\t} catch(e) {\n\t\t\t\t\tstyleTarget = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmemo[target] = styleTarget;\n\t\t}\n\t\treturn memo[target]\n\t};\n})();\n\nvar singleton = null;\nvar\tsingletonCounter = 0;\nvar\tstylesInsertedAtTop = [];\n\nvar\tfixUrls = require(\"./urls\");\n\nmodule.exports = function(list, options) {\n\tif (typeof DEBUG !== \"undefined\" && DEBUG) {\n\t\tif (typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\n\t}\n\n\toptions = options || {};\n\n\toptions.attrs = typeof options.attrs === \"object\" ? options.attrs : {};\n\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n\t// tags it will allow on a page\n\tif (!options.singleton && typeof options.singleton !== \"boolean\") options.singleton = isOldIE();\n\n\t// By default, add <style> tags to the <head> element\n        if (!options.insertInto) options.insertInto = \"head\";\n\n\t// By default, add <style> tags to the bottom of the target\n\tif (!options.insertAt) options.insertAt = \"bottom\";\n\n\tvar styles = listToStyles(list, options);\n\n\taddStylesToDom(styles, options);\n\n\treturn function update (newList) {\n\t\tvar mayRemove = [];\n\n\t\tfor (var i = 0; i < styles.length; i++) {\n\t\t\tvar item = styles[i];\n\t\t\tvar domStyle = stylesInDom[item.id];\n\n\t\t\tdomStyle.refs--;\n\t\t\tmayRemove.push(domStyle);\n\t\t}\n\n\t\tif(newList) {\n\t\t\tvar newStyles = listToStyles(newList, options);\n\t\t\taddStylesToDom(newStyles, options);\n\t\t}\n\n\t\tfor (var i = 0; i < mayRemove.length; i++) {\n\t\t\tvar domStyle = mayRemove[i];\n\n\t\t\tif(domStyle.refs === 0) {\n\t\t\t\tfor (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();\n\n\t\t\t\tdelete stylesInDom[domStyle.id];\n\t\t\t}\n\t\t}\n\t};\n};\n\nfunction addStylesToDom (styles, options) {\n\tfor (var i = 0; i < styles.length; i++) {\n\t\tvar item = styles[i];\n\t\tvar domStyle = stylesInDom[item.id];\n\n\t\tif(domStyle) {\n\t\t\tdomStyle.refs++;\n\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\n\t\t\t}\n\n\t\t\tfor(; j < item.parts.length; j++) {\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\t\t} else {\n\t\t\tvar parts = [];\n\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\n\t\t}\n\t}\n}\n\nfunction listToStyles (list, options) {\n\tvar styles = [];\n\tvar newStyles = {};\n\n\tfor (var i = 0; i < list.length; i++) {\n\t\tvar item = list[i];\n\t\tvar id = options.base ? item[0] + options.base : item[0];\n\t\tvar css = item[1];\n\t\tvar media = item[2];\n\t\tvar sourceMap = item[3];\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\n\n\t\tif(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});\n\t\telse newStyles[id].parts.push(part);\n\t}\n\n\treturn styles;\n}\n\nfunction insertStyleElement (options, style) {\n\tvar target = getElement(options.insertInto)\n\n\tif (!target) {\n\t\tthrow new Error(\"Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.\");\n\t}\n\n\tvar lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];\n\n\tif (options.insertAt === \"top\") {\n\t\tif (!lastStyleElementInsertedAtTop) {\n\t\t\ttarget.insertBefore(style, target.firstChild);\n\t\t} else if (lastStyleElementInsertedAtTop.nextSibling) {\n\t\t\ttarget.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);\n\t\t} else {\n\t\t\ttarget.appendChild(style);\n\t\t}\n\t\tstylesInsertedAtTop.push(style);\n\t} else if (options.insertAt === \"bottom\") {\n\t\ttarget.appendChild(style);\n\t} else if (typeof options.insertAt === \"object\" && options.insertAt.before) {\n\t\tvar nextSibling = getElement(options.insertAt.before, target);\n\t\ttarget.insertBefore(style, nextSibling);\n\t} else {\n\t\tthrow new Error(\"[Style Loader]\\n\\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\\n Must be 'top', 'bottom', or Object.\\n (https://github.com/webpack-contrib/style-loader#insertat)\\n\");\n\t}\n}\n\nfunction removeStyleElement (style) {\n\tif (style.parentNode === null) return false;\n\tstyle.parentNode.removeChild(style);\n\n\tvar idx = stylesInsertedAtTop.indexOf(style);\n\tif(idx >= 0) {\n\t\tstylesInsertedAtTop.splice(idx, 1);\n\t}\n}\n\nfunction createStyleElement (options) {\n\tvar style = document.createElement(\"style\");\n\n\tif(options.attrs.type === undefined) {\n\t\toptions.attrs.type = \"text/css\";\n\t}\n\n\tif(options.attrs.nonce === undefined) {\n\t\tvar nonce = getNonce();\n\t\tif (nonce) {\n\t\t\toptions.attrs.nonce = nonce;\n\t\t}\n\t}\n\n\taddAttrs(style, options.attrs);\n\tinsertStyleElement(options, style);\n\n\treturn style;\n}\n\nfunction createLinkElement (options) {\n\tvar link = document.createElement(\"link\");\n\n\tif(options.attrs.type === undefined) {\n\t\toptions.attrs.type = \"text/css\";\n\t}\n\toptions.attrs.rel = \"stylesheet\";\n\n\taddAttrs(link, options.attrs);\n\tinsertStyleElement(options, link);\n\n\treturn link;\n}\n\nfunction addAttrs (el, attrs) {\n\tObject.keys(attrs).forEach(function (key) {\n\t\tel.setAttribute(key, attrs[key]);\n\t});\n}\n\nfunction getNonce() {\n\tif (typeof __webpack_nonce__ === 'undefined') {\n\t\treturn null;\n\t}\n\n\treturn __webpack_nonce__;\n}\n\nfunction addStyle (obj, options) {\n\tvar style, update, remove, result;\n\n\t// If a transform function was defined, run it on the css\n\tif (options.transform && obj.css) {\n\t    result = typeof options.transform === 'function'\n\t\t ? options.transform(obj.css) \n\t\t : options.transform.default(obj.css);\n\n\t    if (result) {\n\t    \t// If transform returns a value, use that instead of the original css.\n\t    \t// This allows running runtime transformations on the css.\n\t    \tobj.css = result;\n\t    } else {\n\t    \t// If the transform function returns a falsy value, don't add this css.\n\t    \t// This allows conditional loading of css\n\t    \treturn function() {\n\t    \t\t// noop\n\t    \t};\n\t    }\n\t}\n\n\tif (options.singleton) {\n\t\tvar styleIndex = singletonCounter++;\n\n\t\tstyle = singleton || (singleton = createStyleElement(options));\n\n\t\tupdate = applyToSingletonTag.bind(null, style, styleIndex, false);\n\t\tremove = applyToSingletonTag.bind(null, style, styleIndex, true);\n\n\t} else if (\n\t\tobj.sourceMap &&\n\t\ttypeof URL === \"function\" &&\n\t\ttypeof URL.createObjectURL === \"function\" &&\n\t\ttypeof URL.revokeObjectURL === \"function\" &&\n\t\ttypeof Blob === \"function\" &&\n\t\ttypeof btoa === \"function\"\n\t) {\n\t\tstyle = createLinkElement(options);\n\t\tupdate = updateLink.bind(null, style, options);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\n\t\t\tif(style.href) URL.revokeObjectURL(style.href);\n\t\t};\n\t} else {\n\t\tstyle = createStyleElement(options);\n\t\tupdate = applyToTag.bind(null, style);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\t\t};\n\t}\n\n\tupdate(obj);\n\n\treturn function updateStyle (newObj) {\n\t\tif (newObj) {\n\t\t\tif (\n\t\t\t\tnewObj.css === obj.css &&\n\t\t\t\tnewObj.media === obj.media &&\n\t\t\t\tnewObj.sourceMap === obj.sourceMap\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tupdate(obj = newObj);\n\t\t} else {\n\t\t\tremove();\n\t\t}\n\t};\n}\n\nvar replaceText = (function () {\n\tvar textStore = [];\n\n\treturn function (index, replacement) {\n\t\ttextStore[index] = replacement;\n\n\t\treturn textStore.filter(Boolean).join('\\n');\n\t};\n})();\n\nfunction applyToSingletonTag (style, index, remove, obj) {\n\tvar css = remove ? \"\" : obj.css;\n\n\tif (style.styleSheet) {\n\t\tstyle.styleSheet.cssText = replaceText(index, css);\n\t} else {\n\t\tvar cssNode = document.createTextNode(css);\n\t\tvar childNodes = style.childNodes;\n\n\t\tif (childNodes[index]) style.removeChild(childNodes[index]);\n\n\t\tif (childNodes.length) {\n\t\t\tstyle.insertBefore(cssNode, childNodes[index]);\n\t\t} else {\n\t\t\tstyle.appendChild(cssNode);\n\t\t}\n\t}\n}\n\nfunction applyToTag (style, obj) {\n\tvar css = obj.css;\n\tvar media = obj.media;\n\n\tif(media) {\n\t\tstyle.setAttribute(\"media\", media)\n\t}\n\n\tif(style.styleSheet) {\n\t\tstyle.styleSheet.cssText = css;\n\t} else {\n\t\twhile(style.firstChild) {\n\t\t\tstyle.removeChild(style.firstChild);\n\t\t}\n\n\t\tstyle.appendChild(document.createTextNode(css));\n\t}\n}\n\nfunction updateLink (link, options, obj) {\n\tvar css = obj.css;\n\tvar sourceMap = obj.sourceMap;\n\n\t/*\n\t\tIf convertToAbsoluteUrls isn't defined, but sourcemaps are enabled\n\t\tand there is no publicPath defined then lets turn convertToAbsoluteUrls\n\t\ton by default.  Otherwise default to the convertToAbsoluteUrls option\n\t\tdirectly\n\t*/\n\tvar autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;\n\n\tif (options.convertToAbsoluteUrls || autoFixUrls) {\n\t\tcss = fixUrls(css);\n\t}\n\n\tif (sourceMap) {\n\t\t// http://stackoverflow.com/a/26603875\n\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\n\t}\n\n\tvar blob = new Blob([css], { type: \"text/css\" });\n\n\tvar oldSrc = link.href;\n\n\tlink.href = URL.createObjectURL(blob);\n\n\tif(oldSrc) URL.revokeObjectURL(oldSrc);\n}\n","\n/**\n * When source maps are enabled, `style-loader` uses a link element with a data-uri to\n * embed the css on the page. This breaks all relative urls because now they are relative to a\n * bundle instead of the current page.\n *\n * One solution is to only use full urls, but that may be impossible.\n *\n * Instead, this function \"fixes\" the relative urls to be absolute according to the current page location.\n *\n * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.\n *\n */\n\nmodule.exports = function (css) {\n  // get current location\n  var location = typeof window !== \"undefined\" && window.location;\n\n  if (!location) {\n    throw new Error(\"fixUrls requires window.location\");\n  }\n\n\t// blank or null?\n\tif (!css || typeof css !== \"string\") {\n\t  return css;\n  }\n\n  var baseUrl = location.protocol + \"//\" + location.host;\n  var currentDir = baseUrl + location.pathname.replace(/\\/[^\\/]*$/, \"/\");\n\n\t// convert each url(...)\n\t/*\n\tThis regular expression is just a way to recursively match brackets within\n\ta string.\n\n\t /url\\s*\\(  = Match on the word \"url\" with any whitespace after it and then a parens\n\t   (  = Start a capturing group\n\t     (?:  = Start a non-capturing group\n\t         [^)(]  = Match anything that isn't a parentheses\n\t         |  = OR\n\t         \\(  = Match a start parentheses\n\t             (?:  = Start another non-capturing groups\n\t                 [^)(]+  = Match anything that isn't a parentheses\n\t                 |  = OR\n\t                 \\(  = Match a start parentheses\n\t                     [^)(]*  = Match anything that isn't a parentheses\n\t                 \\)  = Match a end parentheses\n\t             )  = End Group\n              *\\) = Match anything and then a close parens\n          )  = Close non-capturing group\n          *  = Match anything\n       )  = Close capturing group\n\t \\)  = Match a close parens\n\n\t /gi  = Get all matches, not the first.  Be case insensitive.\n\t */\n\tvar fixedCss = css.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi, function(fullMatch, origUrl) {\n\t\t// strip quotes (if they exist)\n\t\tvar unquotedOrigUrl = origUrl\n\t\t\t.trim()\n\t\t\t.replace(/^\"(.*)\"$/, function(o, $1){ return $1; })\n\t\t\t.replace(/^'(.*)'$/, function(o, $1){ return $1; });\n\n\t\t// already a full url? no change\n\t\tif (/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/|\\s*$)/i.test(unquotedOrigUrl)) {\n\t\t  return fullMatch;\n\t\t}\n\n\t\t// convert the url to a full url\n\t\tvar newUrl;\n\n\t\tif (unquotedOrigUrl.indexOf(\"//\") === 0) {\n\t\t  \t//TODO: should we add protocol?\n\t\t\tnewUrl = unquotedOrigUrl;\n\t\t} else if (unquotedOrigUrl.indexOf(\"/\") === 0) {\n\t\t\t// path should be relative to the base url\n\t\t\tnewUrl = baseUrl + unquotedOrigUrl; // already starts with '/'\n\t\t} else {\n\t\t\t// path should be relative to current directory\n\t\t\tnewUrl = currentDir + unquotedOrigUrl.replace(/^\\.\\//, \"\"); // Strip leading './'\n\t\t}\n\n\t\t// send back the fixed url(...)\n\t\treturn \"url(\" + JSON.stringify(newUrl) + \")\";\n\t});\n\n\t// send back the fixed css\n\treturn fixedCss;\n};\n","export var name = \"d3\";\nexport var version = \"5.7.0\";\nexport var description = \"Data-Driven Documents\";\nexport var keywords = [\"dom\",\"visualization\",\"svg\",\"animation\",\"canvas\"];\nexport var homepage = \"https://d3js.org\";\nexport var license = \"BSD-3-Clause\";\nexport var author = {\"name\":\"Mike Bostock\",\"url\":\"https://bost.ocks.org/mike\"};\nexport var main = \"dist/d3.node.js\";\nexport var unpkg = \"dist/d3.min.js\";\nexport var jsdelivr = \"dist/d3.min.js\";\nexport var module = \"index.js\";\nexport var repository = {\"type\":\"git\",\"url\":\"https://github.com/d3/d3.git\"};\nexport var scripts = {\"pretest\":\"rimraf dist && mkdir dist && json2module package.json > dist/package.js && node rollup.node\",\"test\":\"tape 'test/**/*-test.js'\",\"prepublishOnly\":\"yarn test && rollup -c\",\"postpublish\":\"git push && git push --tags && cd ../d3.github.com && git pull && cp ../d3/dist/d3.js d3.v5.js && cp ../d3/dist/d3.min.js d3.v5.min.js && git add d3.v5.js d3.v5.min.js && git commit -m \\\"d3 ${npm_package_version}\\\" && git push && cd - && cd ../d3-bower && git pull && cp ../d3/LICENSE ../d3/README.md ../d3/dist/d3.js ../d3/dist/d3.min.js . && git add -- LICENSE README.md d3.js d3.min.js && git commit -m \\\"${npm_package_version}\\\" && git tag -am \\\"${npm_package_version}\\\" v${npm_package_version} && git push && git push --tags && cd - && zip -j dist/d3.zip -- LICENSE README.md API.md CHANGES.md dist/d3.js dist/d3.min.js\"};\nexport var devDependencies = {\"json2module\":\"0.0\",\"rimraf\":\"2\",\"rollup\":\"0.64\",\"rollup-plugin-ascii\":\"0.0\",\"rollup-plugin-node-resolve\":\"3\",\"rollup-plugin-terser\":\"1\",\"tape\":\"4\"};\nexport var dependencies = {\"d3-array\":\"1\",\"d3-axis\":\"1\",\"d3-brush\":\"1\",\"d3-chord\":\"1\",\"d3-collection\":\"1\",\"d3-color\":\"1\",\"d3-contour\":\"1\",\"d3-dispatch\":\"1\",\"d3-drag\":\"1\",\"d3-dsv\":\"1\",\"d3-ease\":\"1\",\"d3-fetch\":\"1\",\"d3-force\":\"1\",\"d3-format\":\"1\",\"d3-geo\":\"1\",\"d3-hierarchy\":\"1\",\"d3-interpolate\":\"1\",\"d3-path\":\"1\",\"d3-polygon\":\"1\",\"d3-quadtree\":\"1\",\"d3-random\":\"1\",\"d3-scale\":\"2\",\"d3-scale-chromatic\":\"1\",\"d3-selection\":\"1\",\"d3-shape\":\"1\",\"d3-time\":\"1\",\"d3-time-format\":\"2\",\"d3-timer\":\"1\",\"d3-transition\":\"1\",\"d3-voronoi\":\"1\",\"d3-zoom\":\"1\"};\n","export default function(a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n","import ascending from \"./ascending\";\n\nexport default function(compare) {\n  if (compare.length === 1) compare = ascendingComparator(compare);\n  return {\n    left: function(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) < 0) lo = mid + 1;\n        else hi = mid;\n      }\n      return lo;\n    },\n    right: function(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) > 0) hi = mid;\n        else lo = mid + 1;\n      }\n      return lo;\n    }\n  };\n}\n\nfunction ascendingComparator(f) {\n  return function(d, x) {\n    return ascending(f(d), x);\n  };\n}\n","import ascending from \"./ascending\";\nimport bisector from \"./bisector\";\n\nvar ascendingBisect = bisector(ascending);\nexport var bisectRight = ascendingBisect.right;\nexport var bisectLeft = ascendingBisect.left;\nexport default bisectRight;\n","export default function(array, f) {\n  if (f == null) f = pair;\n  var i = 0, n = array.length - 1, p = array[0], pairs = new Array(n < 0 ? 0 : n);\n  while (i < n) pairs[i] = f(p, p = array[++i]);\n  return pairs;\n}\n\nexport function pair(a, b) {\n  return [a, b];\n}\n","import {pair} from \"./pairs\";\n\nexport default function(values0, values1, reduce) {\n  var n0 = values0.length,\n      n1 = values1.length,\n      values = new Array(n0 * n1),\n      i0,\n      i1,\n      i,\n      value0;\n\n  if (reduce == null) reduce = pair;\n\n  for (i0 = i = 0; i0 < n0; ++i0) {\n    for (value0 = values0[i0], i1 = 0; i1 < n1; ++i1, ++i) {\n      values[i] = reduce(value0, values1[i1]);\n    }\n  }\n\n  return values;\n}\n","export default function(a, b) {\n  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n}\n","export default function(x) {\n  return x === null ? NaN : +x;\n}\n","import number from \"./number\";\n\nexport default function(values, valueof) {\n  var n = values.length,\n      m = 0,\n      i = -1,\n      mean = 0,\n      value,\n      delta,\n      sum = 0;\n\n  if (valueof == null) {\n    while (++i < n) {\n      if (!isNaN(value = number(values[i]))) {\n        delta = value - mean;\n        mean += delta / ++m;\n        sum += delta * (value - mean);\n      }\n    }\n  }\n\n  else {\n    while (++i < n) {\n      if (!isNaN(value = number(valueof(values[i], i, values)))) {\n        delta = value - mean;\n        mean += delta / ++m;\n        sum += delta * (value - mean);\n      }\n    }\n  }\n\n  if (m > 1) return sum / (m - 1);\n}\n","import variance from \"./variance\";\n\nexport default function(array, f) {\n  var v = variance(array, f);\n  return v ? Math.sqrt(v) : v;\n}\n","export default function(values, valueof) {\n  var n = values.length,\n      i = -1,\n      value,\n      min,\n      max;\n\n  if (valueof == null) {\n    while (++i < n) { // Find the first comparable value.\n      if ((value = values[i]) != null && value >= value) {\n        min = max = value;\n        while (++i < n) { // Compare the remaining values.\n          if ((value = values[i]) != null) {\n            if (min > value) min = value;\n            if (max < value) max = value;\n          }\n        }\n      }\n    }\n  }\n\n  else {\n    while (++i < n) { // Find the first comparable value.\n      if ((value = valueof(values[i], i, values)) != null && value >= value) {\n        min = max = value;\n        while (++i < n) { // Compare the remaining values.\n          if ((value = valueof(values[i], i, values)) != null) {\n            if (min > value) min = value;\n            if (max < value) max = value;\n          }\n        }\n      }\n    }\n  }\n\n  return [min, max];\n}\n","var array = Array.prototype;\n\nexport var slice = array.slice;\nexport var map = array.map;\n","export default function(x) {\n  return function() {\n    return x;\n  };\n}\n","export default function(x) {\n  return x;\n}\n","export default function(start, stop, step) {\n  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n\n  var i = -1,\n      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n      range = new Array(n);\n\n  while (++i < n) {\n    range[i] = start + i * step;\n  }\n\n  return range;\n}\n","var e10 = Math.sqrt(50),\n    e5 = Math.sqrt(10),\n    e2 = Math.sqrt(2);\n\nexport default function(start, stop, count) {\n  var reverse,\n      i = -1,\n      n,\n      ticks,\n      step;\n\n  stop = +stop, start = +start, count = +count;\n  if (start === stop && count > 0) return [start];\n  if (reverse = stop < start) n = start, start = stop, stop = n;\n  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];\n\n  if (step > 0) {\n    start = Math.ceil(start / step);\n    stop = Math.floor(stop / step);\n    ticks = new Array(n = Math.ceil(stop - start + 1));\n    while (++i < n) ticks[i] = (start + i) * step;\n  } else {\n    start = Math.floor(start * step);\n    stop = Math.ceil(stop * step);\n    ticks = new Array(n = Math.ceil(start - stop + 1));\n    while (++i < n) ticks[i] = (start - i) / step;\n  }\n\n  if (reverse) ticks.reverse();\n\n  return ticks;\n}\n\nexport function tickIncrement(start, stop, count) {\n  var step = (stop - start) / Math.max(0, count),\n      power = Math.floor(Math.log(step) / Math.LN10),\n      error = step / Math.pow(10, power);\n  return power >= 0\n      ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)\n      : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);\n}\n\nexport function tickStep(start, stop, count) {\n  var step0 = Math.abs(stop - start) / Math.max(0, count),\n      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\n      error = step0 / step1;\n  if (error >= e10) step1 *= 10;\n  else if (error >= e5) step1 *= 5;\n  else if (error >= e2) step1 *= 2;\n  return stop < start ? -step1 : step1;\n}\n","export default function(values) {\n  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;\n}\n","import {slice} from \"./array\";\nimport bisect from \"./bisect\";\nimport constant from \"./constant\";\nimport extent from \"./extent\";\nimport identity from \"./identity\";\nimport range from \"./range\";\nimport {tickStep} from \"./ticks\";\nimport sturges from \"./threshold/sturges\";\n\nexport default function() {\n  var value = identity,\n      domain = extent,\n      threshold = sturges;\n\n  function histogram(data) {\n    var i,\n        n = data.length,\n        x,\n        values = new Array(n);\n\n    for (i = 0; i < n; ++i) {\n      values[i] = value(data[i], i, data);\n    }\n\n    var xz = domain(values),\n        x0 = xz[0],\n        x1 = xz[1],\n        tz = threshold(values, x0, x1);\n\n    // Convert number of thresholds into uniform thresholds.\n    if (!Array.isArray(tz)) {\n      tz = tickStep(x0, x1, tz);\n      tz = range(Math.ceil(x0 / tz) * tz, x1, tz); // exclusive\n    }\n\n    // Remove any thresholds outside the domain.\n    var m = tz.length;\n    while (tz[0] <= x0) tz.shift(), --m;\n    while (tz[m - 1] > x1) tz.pop(), --m;\n\n    var bins = new Array(m + 1),\n        bin;\n\n    // Initialize bins.\n    for (i = 0; i <= m; ++i) {\n      bin = bins[i] = [];\n      bin.x0 = i > 0 ? tz[i - 1] : x0;\n      bin.x1 = i < m ? tz[i] : x1;\n    }\n\n    // Assign data to bins by value, ignoring any outside the domain.\n    for (i = 0; i < n; ++i) {\n      x = values[i];\n      if (x0 <= x && x <= x1) {\n        bins[bisect(tz, x, 0, m)].push(data[i]);\n      }\n    }\n\n    return bins;\n  }\n\n  histogram.value = function(_) {\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(_), histogram) : value;\n  };\n\n  histogram.domain = function(_) {\n    return arguments.length ? (domain = typeof _ === \"function\" ? _ : constant([_[0], _[1]]), histogram) : domain;\n  };\n\n  histogram.thresholds = function(_) {\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;\n  };\n\n  return histogram;\n}\n","import number from \"./number\";\n\nexport default function(values, p, valueof) {\n  if (valueof == null) valueof = number;\n  if (!(n = values.length)) return;\n  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);\n  if (p >= 1) return +valueof(values[n - 1], n - 1, values);\n  var n,\n      i = (n - 1) * p,\n      i0 = Math.floor(i),\n      value0 = +valueof(values[i0], i0, values),\n      value1 = +valueof(values[i0 + 1], i0 + 1, values);\n  return value0 + (value1 - value0) * (i - i0);\n}\n","import {map} from \"../array\";\nimport ascending from \"../ascending\";\nimport number from \"../number\";\nimport quantile from \"../quantile\";\n\nexport default function(values, min, max) {\n  values = map.call(values, number).sort(ascending);\n  return Math.ceil((max - min) / (2 * (quantile(values, 0.75) - quantile(values, 0.25)) * Math.pow(values.length, -1 / 3)));\n}\n","import deviation from \"../deviation\";\n\nexport default function(values, min, max) {\n  return Math.ceil((max - min) / (3.5 * deviation(values) * Math.pow(values.length, -1 / 3)));\n}\n","export default function(values, valueof) {\n  var n = values.length,\n      i = -1,\n      value,\n      max;\n\n  if (valueof == null) {\n    while (++i < n) { // Find the first comparable value.\n      if ((value = values[i]) != null && value >= value) {\n        max = value;\n        while (++i < n) { // Compare the remaining values.\n          if ((value = values[i]) != null && value > max) {\n            max = value;\n          }\n        }\n      }\n    }\n  }\n\n  else {\n    while (++i < n) { // Find the first comparable value.\n      if ((value = valueof(values[i], i, values)) != null && value >= value) {\n        max = value;\n        while (++i < n) { // Compare the remaining values.\n          if ((value = valueof(values[i], i, values)) != null && value > max) {\n            max = value;\n          }\n        }\n      }\n    }\n  }\n\n  return max;\n}\n","import number from \"./number\";\n\nexport default function(values, valueof) {\n  var n = values.length,\n      m = n,\n      i = -1,\n      value,\n      sum = 0;\n\n  if (valueof == null) {\n    while (++i < n) {\n      if (!isNaN(value = number(values[i]))) sum += value;\n      else --m;\n    }\n  }\n\n  else {\n    while (++i < n) {\n      if (!isNaN(value = number(valueof(values[i], i, values)))) sum += value;\n      else --m;\n    }\n  }\n\n  if (m) return sum / m;\n}\n","import ascending from \"./ascending\";\nimport number from \"./number\";\nimport quantile from \"./quantile\";\n\nexport default function(values, valueof) {\n  var n = values.length,\n      i = -1,\n      value,\n      numbers = [];\n\n  if (valueof == null) {\n    while (++i < n) {\n      if (!isNaN(value = number(values[i]))) {\n        numbers.push(value);\n      }\n    }\n  }\n\n  else {\n    while (++i < n) {\n      if (!isNaN(value = number(valueof(values[i], i, values)))) {\n        numbers.push(value);\n      }\n    }\n  }\n\n  return quantile(numbers.sort(ascending), 0.5);\n}\n","export default function(arrays) {\n  var n = arrays.length,\n      m,\n      i = -1,\n      j = 0,\n      merged,\n      array;\n\n  while (++i < n) j += arrays[i].length;\n  merged = new Array(j);\n\n  while (--n >= 0) {\n    array = arrays[n];\n    m = array.length;\n    while (--m >= 0) {\n      merged[--j] = array[m];\n    }\n  }\n\n  return merged;\n}\n","export default function(values, valueof) {\n  var n = values.length,\n      i = -1,\n      value,\n      min;\n\n  if (valueof == null) {\n    while (++i < n) { // Find the first comparable value.\n      if ((value = values[i]) != null && value >= value) {\n        min = value;\n        while (++i < n) { // Compare the remaining values.\n          if ((value = values[i]) != null && min > value) {\n            min = value;\n          }\n        }\n      }\n    }\n  }\n\n  else {\n    while (++i < n) { // Find the first comparable value.\n      if ((value = valueof(values[i], i, values)) != null && value >= value) {\n        min = value;\n        while (++i < n) { // Compare the remaining values.\n          if ((value = valueof(values[i], i, values)) != null && min > value) {\n            min = value;\n          }\n        }\n      }\n    }\n  }\n\n  return min;\n}\n","export default function(array, indexes) {\n  var i = indexes.length, permutes = new Array(i);\n  while (i--) permutes[i] = array[indexes[i]];\n  return permutes;\n}\n","import ascending from \"./ascending\";\n\nexport default function(values, compare) {\n  if (!(n = values.length)) return;\n  var n,\n      i = 0,\n      j = 0,\n      xi,\n      xj = values[j];\n\n  if (compare == null) compare = ascending;\n\n  while (++i < n) {\n    if (compare(xi = values[i], xj) < 0 || compare(xj, xj) !== 0) {\n      xj = xi, j = i;\n    }\n  }\n\n  if (compare(xj, xj) === 0) return j;\n}\n","export default function(array, i0, i1) {\n  var m = (i1 == null ? array.length : i1) - (i0 = i0 == null ? 0 : +i0),\n      t,\n      i;\n\n  while (m) {\n    i = Math.random() * m-- | 0;\n    t = array[m + i0];\n    array[m + i0] = array[i + i0];\n    array[i + i0] = t;\n  }\n\n  return array;\n}\n","export default function(values, valueof) {\n  var n = values.length,\n      i = -1,\n      value,\n      sum = 0;\n\n  if (valueof == null) {\n    while (++i < n) {\n      if (value = +values[i]) sum += value; // Note: zero and null are equivalent.\n    }\n  }\n\n  else {\n    while (++i < n) {\n      if (value = +valueof(values[i], i, values)) sum += value;\n    }\n  }\n\n  return sum;\n}\n","import min from \"./min\";\n\nexport default function(matrix) {\n  if (!(n = matrix.length)) return [];\n  for (var i = -1, m = min(matrix, length), transpose = new Array(m); ++i < m;) {\n    for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {\n      row[j] = matrix[j][i];\n    }\n  }\n  return transpose;\n}\n\nfunction length(d) {\n  return d.length;\n}\n","import transpose from \"./transpose\";\n\nexport default function() {\n  return transpose(arguments);\n}\n","export var slice = Array.prototype.slice;\n","export default function(x) {\n  return x;\n}\n","import {slice} from \"./array\";\nimport identity from \"./identity\";\n\nvar top = 1,\n    right = 2,\n    bottom = 3,\n    left = 4,\n    epsilon = 1e-6;\n\nfunction translateX(x) {\n  return \"translate(\" + (x + 0.5) + \",0)\";\n}\n\nfunction translateY(y) {\n  return \"translate(0,\" + (y + 0.5) + \")\";\n}\n\nfunction number(scale) {\n  return function(d) {\n    return +scale(d);\n  };\n}\n\nfunction center(scale) {\n  var offset = Math.max(0, scale.bandwidth() - 1) / 2; // Adjust for 0.5px offset.\n  if (scale.round()) offset = Math.round(offset);\n  return function(d) {\n    return +scale(d) + offset;\n  };\n}\n\nfunction entering() {\n  return !this.__axis;\n}\n\nfunction axis(orient, scale) {\n  var tickArguments = [],\n      tickValues = null,\n      tickFormat = null,\n      tickSizeInner = 6,\n      tickSizeOuter = 6,\n      tickPadding = 3,\n      k = orient === top || orient === left ? -1 : 1,\n      x = orient === left || orient === right ? \"x\" : \"y\",\n      transform = orient === top || orient === bottom ? translateX : translateY;\n\n  function axis(context) {\n    var values = tickValues == null ? (scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain()) : tickValues,\n        format = tickFormat == null ? (scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : identity) : tickFormat,\n        spacing = Math.max(tickSizeInner, 0) + tickPadding,\n        range = scale.range(),\n        range0 = +range[0] + 0.5,\n        range1 = +range[range.length - 1] + 0.5,\n        position = (scale.bandwidth ? center : number)(scale.copy()),\n        selection = context.selection ? context.selection() : context,\n        path = selection.selectAll(\".domain\").data([null]),\n        tick = selection.selectAll(\".tick\").data(values, scale).order(),\n        tickExit = tick.exit(),\n        tickEnter = tick.enter().append(\"g\").attr(\"class\", \"tick\"),\n        line = tick.select(\"line\"),\n        text = tick.select(\"text\");\n\n    path = path.merge(path.enter().insert(\"path\", \".tick\")\n        .attr(\"class\", \"domain\")\n        .attr(\"stroke\", \"currentColor\"));\n\n    tick = tick.merge(tickEnter);\n\n    line = line.merge(tickEnter.append(\"line\")\n        .attr(\"stroke\", \"currentColor\")\n        .attr(x + \"2\", k * tickSizeInner));\n\n    text = text.merge(tickEnter.append(\"text\")\n        .attr(\"fill\", \"currentColor\")\n        .attr(x, k * spacing)\n        .attr(\"dy\", orient === top ? \"0em\" : orient === bottom ? \"0.71em\" : \"0.32em\"));\n\n    if (context !== selection) {\n      path = path.transition(context);\n      tick = tick.transition(context);\n      line = line.transition(context);\n      text = text.transition(context);\n\n      tickExit = tickExit.transition(context)\n          .attr(\"opacity\", epsilon)\n          .attr(\"transform\", function(d) { return isFinite(d = position(d)) ? transform(d) : this.getAttribute(\"transform\"); });\n\n      tickEnter\n          .attr(\"opacity\", epsilon)\n          .attr(\"transform\", function(d) { var p = this.parentNode.__axis; return transform(p && isFinite(p = p(d)) ? p : position(d)); });\n    }\n\n    tickExit.remove();\n\n    path\n        .attr(\"d\", orient === left || orient == right\n            ? (tickSizeOuter ? \"M\" + k * tickSizeOuter + \",\" + range0 + \"H0.5V\" + range1 + \"H\" + k * tickSizeOuter : \"M0.5,\" + range0 + \"V\" + range1)\n            : (tickSizeOuter ? \"M\" + range0 + \",\" + k * tickSizeOuter + \"V0.5H\" + range1 + \"V\" + k * tickSizeOuter : \"M\" + range0 + \",0.5H\" + range1));\n\n    tick\n        .attr(\"opacity\", 1)\n        .attr(\"transform\", function(d) { return transform(position(d)); });\n\n    line\n        .attr(x + \"2\", k * tickSizeInner);\n\n    text\n        .attr(x, k * spacing)\n        .text(format);\n\n    selection.filter(entering)\n        .attr(\"fill\", \"none\")\n        .attr(\"font-size\", 10)\n        .attr(\"font-family\", \"sans-serif\")\n        .attr(\"text-anchor\", orient === right ? \"start\" : orient === left ? \"end\" : \"middle\");\n\n    selection\n        .each(function() { this.__axis = position; });\n  }\n\n  axis.scale = function(_) {\n    return arguments.length ? (scale = _, axis) : scale;\n  };\n\n  axis.ticks = function() {\n    return tickArguments = slice.call(arguments), axis;\n  };\n\n  axis.tickArguments = function(_) {\n    return arguments.length ? (tickArguments = _ == null ? [] : slice.call(_), axis) : tickArguments.slice();\n  };\n\n  axis.tickValues = function(_) {\n    return arguments.length ? (tickValues = _ == null ? null : slice.call(_), axis) : tickValues && tickValues.slice();\n  };\n\n  axis.tickFormat = function(_) {\n    return arguments.length ? (tickFormat = _, axis) : tickFormat;\n  };\n\n  axis.tickSize = function(_) {\n    return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;\n  };\n\n  axis.tickSizeInner = function(_) {\n    return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;\n  };\n\n  axis.tickSizeOuter = function(_) {\n    return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;\n  };\n\n  axis.tickPadding = function(_) {\n    return arguments.length ? (tickPadding = +_, axis) : tickPadding;\n  };\n\n  return axis;\n}\n\nexport function axisTop(scale) {\n  return axis(top, scale);\n}\n\nexport function axisRight(scale) {\n  return axis(right, scale);\n}\n\nexport function axisBottom(scale) {\n  return axis(bottom, scale);\n}\n\nexport function axisLeft(scale) {\n  return axis(left, scale);\n}\n","var noop = {value: function() {}};\n\nfunction dispatch() {\n  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {\n    if (!(t = arguments[i] + \"\") || (t in _)) throw new Error(\"illegal type: \" + t);\n    _[t] = [];\n  }\n  return new Dispatch(_);\n}\n\nfunction Dispatch(_) {\n  this._ = _;\n}\n\nfunction parseTypenames(typenames, types) {\n  return typenames.trim().split(/^|\\s+/).map(function(t) {\n    var name = \"\", i = t.indexOf(\".\");\n    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n    if (t && !types.hasOwnProperty(t)) throw new Error(\"unknown type: \" + t);\n    return {type: t, name: name};\n  });\n}\n\nDispatch.prototype = dispatch.prototype = {\n  constructor: Dispatch,\n  on: function(typename, callback) {\n    var _ = this._,\n        T = parseTypenames(typename + \"\", _),\n        t,\n        i = -1,\n        n = T.length;\n\n    // If no callback was specified, return the callback of the given type and name.\n    if (arguments.length < 2) {\n      while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;\n      return;\n    }\n\n    // If a type was specified, set the callback for the given type and name.\n    // Otherwise, if a null callback was specified, remove callbacks of the given name.\n    if (callback != null && typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n    while (++i < n) {\n      if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);\n      else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);\n    }\n\n    return this;\n  },\n  copy: function() {\n    var copy = {}, _ = this._;\n    for (var t in _) copy[t] = _[t].slice();\n    return new Dispatch(copy);\n  },\n  call: function(type, that) {\n    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];\n    if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n    for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n  },\n  apply: function(type, that, args) {\n    if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n  }\n};\n\nfunction get(type, name) {\n  for (var i = 0, n = type.length, c; i < n; ++i) {\n    if ((c = type[i]).name === name) {\n      return c.value;\n    }\n  }\n}\n\nfunction set(type, name, callback) {\n  for (var i = 0, n = type.length; i < n; ++i) {\n    if (type[i].name === name) {\n      type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));\n      break;\n    }\n  }\n  if (callback != null) type.push({name: name, value: callback});\n  return type;\n}\n\nexport default dispatch;\n","export var xhtml = \"http://www.w3.org/1999/xhtml\";\n\nexport default {\n  svg: \"http://www.w3.org/2000/svg\",\n  xhtml: xhtml,\n  xlink: \"http://www.w3.org/1999/xlink\",\n  xml: \"http://www.w3.org/XML/1998/namespace\",\n  xmlns: \"http://www.w3.org/2000/xmlns/\"\n};\n","import namespaces from \"./namespaces\";\n\nexport default function(name) {\n  var prefix = name += \"\", i = prefix.indexOf(\":\");\n  if (i >= 0 && (prefix = name.slice(0, i)) !== \"xmlns\") name = name.slice(i + 1);\n  return namespaces.hasOwnProperty(prefix) ? {space: namespaces[prefix], local: name} : name;\n}\n","import namespace from \"./namespace\";\nimport {xhtml} from \"./namespaces\";\n\nfunction creatorInherit(name) {\n  return function() {\n    var document = this.ownerDocument,\n        uri = this.namespaceURI;\n    return uri === xhtml && document.documentElement.namespaceURI === xhtml\n        ? document.createElement(name)\n        : document.createElementNS(uri, name);\n  };\n}\n\nfunction creatorFixed(fullname) {\n  return function() {\n    return this.ownerDocument.createElementNS(fullname.space, fullname.local);\n  };\n}\n\nexport default function(name) {\n  var fullname = namespace(name);\n  return (fullname.local\n      ? creatorFixed\n      : creatorInherit)(fullname);\n}\n","function none() {}\n\nexport default function(selector) {\n  return selector == null ? none : function() {\n    return this.querySelector(selector);\n  };\n}\n","function empty() {\n  return [];\n}\n\nexport default function(selector) {\n  return selector == null ? empty : function() {\n    return this.querySelectorAll(selector);\n  };\n}\n","var matcher = function(selector) {\n  return function() {\n    return this.matches(selector);\n  };\n};\n\nif (typeof document !== \"undefined\") {\n  var element = document.documentElement;\n  if (!element.matches) {\n    var vendorMatches = element.webkitMatchesSelector\n        || element.msMatchesSelector\n        || element.mozMatchesSelector\n        || element.oMatchesSelector;\n    matcher = function(selector) {\n      return function() {\n        return vendorMatches.call(this, selector);\n      };\n    };\n  }\n}\n\nexport default matcher;\n","export default function(update) {\n  return new Array(update.length);\n}\n","import sparse from \"./sparse\";\nimport {Selection} from \"./index\";\n\nexport default function() {\n  return new Selection(this._enter || this._groups.map(sparse), this._parents);\n}\n\nexport function EnterNode(parent, datum) {\n  this.ownerDocument = parent.ownerDocument;\n  this.namespaceURI = parent.namespaceURI;\n  this._next = null;\n  this._parent = parent;\n  this.__data__ = datum;\n}\n\nEnterNode.prototype = {\n  constructor: EnterNode,\n  appendChild: function(child) { return this._parent.insertBefore(child, this._next); },\n  insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },\n  querySelector: function(selector) { return this._parent.querySelector(selector); },\n  querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }\n};\n","export default function(x) {\n  return function() {\n    return x;\n  };\n}\n","import {Selection} from \"./index\";\nimport {EnterNode} from \"./enter\";\nimport constant from \"../constant\";\n\nvar keyPrefix = \"$\"; // Protect against keys like “__proto__”.\n\nfunction bindIndex(parent, group, enter, update, exit, data) {\n  var i = 0,\n      node,\n      groupLength = group.length,\n      dataLength = data.length;\n\n  // Put any non-null nodes that fit into update.\n  // Put any null nodes into enter.\n  // Put any remaining data into enter.\n  for (; i < dataLength; ++i) {\n    if (node = group[i]) {\n      node.__data__ = data[i];\n      update[i] = node;\n    } else {\n      enter[i] = new EnterNode(parent, data[i]);\n    }\n  }\n\n  // Put any non-null nodes that don’t fit into exit.\n  for (; i < groupLength; ++i) {\n    if (node = group[i]) {\n      exit[i] = node;\n    }\n  }\n}\n\nfunction bindKey(parent, group, enter, update, exit, data, key) {\n  var i,\n      node,\n      nodeByKeyValue = {},\n      groupLength = group.length,\n      dataLength = data.length,\n      keyValues = new Array(groupLength),\n      keyValue;\n\n  // Compute the key for each node.\n  // If multiple nodes have the same key, the duplicates are added to exit.\n  for (i = 0; i < groupLength; ++i) {\n    if (node = group[i]) {\n      keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);\n      if (keyValue in nodeByKeyValue) {\n        exit[i] = node;\n      } else {\n        nodeByKeyValue[keyValue] = node;\n      }\n    }\n  }\n\n  // Compute the key for each datum.\n  // If there a node associated with this key, join and add it to update.\n  // If there is not (or the key is a duplicate), add it to enter.\n  for (i = 0; i < dataLength; ++i) {\n    keyValue = keyPrefix + key.call(parent, data[i], i, data);\n    if (node = nodeByKeyValue[keyValue]) {\n      update[i] = node;\n      node.__data__ = data[i];\n      nodeByKeyValue[keyValue] = null;\n    } else {\n      enter[i] = new EnterNode(parent, data[i]);\n    }\n  }\n\n  // Add any remaining nodes that were not bound to data to exit.\n  for (i = 0; i < groupLength; ++i) {\n    if ((node = group[i]) && (nodeByKeyValue[keyValues[i]] === node)) {\n      exit[i] = node;\n    }\n  }\n}\n\nexport default function(value, key) {\n  if (!value) {\n    data = new Array(this.size()), j = -1;\n    this.each(function(d) { data[++j] = d; });\n    return data;\n  }\n\n  var bind = key ? bindKey : bindIndex,\n      parents = this._parents,\n      groups = this._groups;\n\n  if (typeof value !== \"function\") value = constant(value);\n\n  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {\n    var parent = parents[j],\n        group = groups[j],\n        groupLength = group.length,\n        data = value.call(parent, parent && parent.__data__, j, parents),\n        dataLength = data.length,\n        enterGroup = enter[j] = new Array(dataLength),\n        updateGroup = update[j] = new Array(dataLength),\n        exitGroup = exit[j] = new Array(groupLength);\n\n    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);\n\n    // Now connect the enter nodes to their following update node, such that\n    // appendChild can insert the materialized enter node before this node,\n    // rather than at the end of the parent node.\n    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {\n      if (previous = enterGroup[i0]) {\n        if (i0 >= i1) i1 = i0 + 1;\n        while (!(next = updateGroup[i1]) && ++i1 < dataLength);\n        previous._next = next || null;\n      }\n    }\n  }\n\n  update = new Selection(update, parents);\n  update._enter = enter;\n  update._exit = exit;\n  return update;\n}\n","import {Selection} from \"./index\";\n\nexport default function(compare) {\n  if (!compare) compare = ascending;\n\n  function compareNode(a, b) {\n    return a && b ? compare(a.__data__, b.__data__) : !a - !b;\n  }\n\n  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        sortgroup[i] = node;\n      }\n    }\n    sortgroup.sort(compareNode);\n  }\n\n  return new Selection(sortgroups, this._parents).order();\n}\n\nfunction ascending(a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n","import namespace from \"../namespace\";\n\nfunction attrRemove(name) {\n  return function() {\n    this.removeAttribute(name);\n  };\n}\n\nfunction attrRemoveNS(fullname) {\n  return function() {\n    this.removeAttributeNS(fullname.space, fullname.local);\n  };\n}\n\nfunction attrConstant(name, value) {\n  return function() {\n    this.setAttribute(name, value);\n  };\n}\n\nfunction attrConstantNS(fullname, value) {\n  return function() {\n    this.setAttributeNS(fullname.space, fullname.local, value);\n  };\n}\n\nfunction attrFunction(name, value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (v == null) this.removeAttribute(name);\n    else this.setAttribute(name, v);\n  };\n}\n\nfunction attrFunctionNS(fullname, value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);\n    else this.setAttributeNS(fullname.space, fullname.local, v);\n  };\n}\n\nexport default function(name, value) {\n  var fullname = namespace(name);\n\n  if (arguments.length < 2) {\n    var node = this.node();\n    return fullname.local\n        ? node.getAttributeNS(fullname.space, fullname.local)\n        : node.getAttribute(fullname);\n  }\n\n  return this.each((value == null\n      ? (fullname.local ? attrRemoveNS : attrRemove) : (typeof value === \"function\"\n      ? (fullname.local ? attrFunctionNS : attrFunction)\n      : (fullname.local ? attrConstantNS : attrConstant)))(fullname, value));\n}\n","export default function(node) {\n  return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node\n      || (node.document && node) // node is a Window\n      || node.defaultView; // node is a Document\n}\n","import defaultView from \"../window\";\n\nfunction styleRemove(name) {\n  return function() {\n    this.style.removeProperty(name);\n  };\n}\n\nfunction styleConstant(name, value, priority) {\n  return function() {\n    this.style.setProperty(name, value, priority);\n  };\n}\n\nfunction styleFunction(name, value, priority) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (v == null) this.style.removeProperty(name);\n    else this.style.setProperty(name, v, priority);\n  };\n}\n\nexport default function(name, value, priority) {\n  return arguments.length > 1\n      ? this.each((value == null\n            ? styleRemove : typeof value === \"function\"\n            ? styleFunction\n            : styleConstant)(name, value, priority == null ? \"\" : priority))\n      : styleValue(this.node(), name);\n}\n\nexport function styleValue(node, name) {\n  return node.style.getPropertyValue(name)\n      || defaultView(node).getComputedStyle(node, null).getPropertyValue(name);\n}\n","function classArray(string) {\n  return string.trim().split(/^|\\s+/);\n}\n\nfunction classList(node) {\n  return node.classList || new ClassList(node);\n}\n\nfunction ClassList(node) {\n  this._node = node;\n  this._names = classArray(node.getAttribute(\"class\") || \"\");\n}\n\nClassList.prototype = {\n  add: function(name) {\n    var i = this._names.indexOf(name);\n    if (i < 0) {\n      this._names.push(name);\n      this._node.setAttribute(\"class\", this._names.join(\" \"));\n    }\n  },\n  remove: function(name) {\n    var i = this._names.indexOf(name);\n    if (i >= 0) {\n      this._names.splice(i, 1);\n      this._node.setAttribute(\"class\", this._names.join(\" \"));\n    }\n  },\n  contains: function(name) {\n    return this._names.indexOf(name) >= 0;\n  }\n};\n\nfunction classedAdd(node, names) {\n  var list = classList(node), i = -1, n = names.length;\n  while (++i < n) list.add(names[i]);\n}\n\nfunction classedRemove(node, names) {\n  var list = classList(node), i = -1, n = names.length;\n  while (++i < n) list.remove(names[i]);\n}\n\nfunction classedTrue(names) {\n  return function() {\n    classedAdd(this, names);\n  };\n}\n\nfunction classedFalse(names) {\n  return function() {\n    classedRemove(this, names);\n  };\n}\n\nfunction classedFunction(names, value) {\n  return function() {\n    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);\n  };\n}\n\nexport default function(name, value) {\n  var names = classArray(name + \"\");\n\n  if (arguments.length < 2) {\n    var list = classList(this.node()), i = -1, n = names.length;\n    while (++i < n) if (!list.contains(names[i])) return false;\n    return true;\n  }\n\n  return this.each((typeof value === \"function\"\n      ? classedFunction : value\n      ? classedTrue\n      : classedFalse)(names, value));\n}\n","function textRemove() {\n  this.textContent = \"\";\n}\n\nfunction textConstant(value) {\n  return function() {\n    this.textContent = value;\n  };\n}\n\nfunction textFunction(value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    this.textContent = v == null ? \"\" : v;\n  };\n}\n\nexport default function(value) {\n  return arguments.length\n      ? this.each(value == null\n          ? textRemove : (typeof value === \"function\"\n          ? textFunction\n          : textConstant)(value))\n      : this.node().textContent;\n}\n","function htmlRemove() {\n  this.innerHTML = \"\";\n}\n\nfunction htmlConstant(value) {\n  return function() {\n    this.innerHTML = value;\n  };\n}\n\nfunction htmlFunction(value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    this.innerHTML = v == null ? \"\" : v;\n  };\n}\n\nexport default function(value) {\n  return arguments.length\n      ? this.each(value == null\n          ? htmlRemove : (typeof value === \"function\"\n          ? htmlFunction\n          : htmlConstant)(value))\n      : this.node().innerHTML;\n}\n","function raise() {\n  if (this.nextSibling) this.parentNode.appendChild(this);\n}\n\nexport default function() {\n  return this.each(raise);\n}\n","function lower() {\n  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);\n}\n\nexport default function() {\n  return this.each(lower);\n}\n","import creator from \"../creator\";\nimport selector from \"../selector\";\n\nfunction constantNull() {\n  return null;\n}\n\nexport default function(name, before) {\n  var create = typeof name === \"function\" ? name : creator(name),\n      select = before == null ? constantNull : typeof before === \"function\" ? before : selector(before);\n  return this.select(function() {\n    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);\n  });\n}\n","function remove() {\n  var parent = this.parentNode;\n  if (parent) parent.removeChild(this);\n}\n\nexport default function() {\n  return this.each(remove);\n}\n","function selection_cloneShallow() {\n  return this.parentNode.insertBefore(this.cloneNode(false), this.nextSibling);\n}\n\nfunction selection_cloneDeep() {\n  return this.parentNode.insertBefore(this.cloneNode(true), this.nextSibling);\n}\n\nexport default function(deep) {\n  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);\n}\n","var filterEvents = {};\n\nexport var event = null;\n\nif (typeof document !== \"undefined\") {\n  var element = document.documentElement;\n  if (!(\"onmouseenter\" in element)) {\n    filterEvents = {mouseenter: \"mouseover\", mouseleave: \"mouseout\"};\n  }\n}\n\nfunction filterContextListener(listener, index, group) {\n  listener = contextListener(listener, index, group);\n  return function(event) {\n    var related = event.relatedTarget;\n    if (!related || (related !== this && !(related.compareDocumentPosition(this) & 8))) {\n      listener.call(this, event);\n    }\n  };\n}\n\nfunction contextListener(listener, index, group) {\n  return function(event1) {\n    var event0 = event; // Events can be reentrant (e.g., focus).\n    event = event1;\n    try {\n      listener.call(this, this.__data__, index, group);\n    } finally {\n      event = event0;\n    }\n  };\n}\n\nfunction parseTypenames(typenames) {\n  return typenames.trim().split(/^|\\s+/).map(function(t) {\n    var name = \"\", i = t.indexOf(\".\");\n    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n    return {type: t, name: name};\n  });\n}\n\nfunction onRemove(typename) {\n  return function() {\n    var on = this.__on;\n    if (!on) return;\n    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {\n      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {\n        this.removeEventListener(o.type, o.listener, o.capture);\n      } else {\n        on[++i] = o;\n      }\n    }\n    if (++i) on.length = i;\n    else delete this.__on;\n  };\n}\n\nfunction onAdd(typename, value, capture) {\n  var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;\n  return function(d, i, group) {\n    var on = this.__on, o, listener = wrap(value, i, group);\n    if (on) for (var j = 0, m = on.length; j < m; ++j) {\n      if ((o = on[j]).type === typename.type && o.name === typename.name) {\n        this.removeEventListener(o.type, o.listener, o.capture);\n        this.addEventListener(o.type, o.listener = listener, o.capture = capture);\n        o.value = value;\n        return;\n      }\n    }\n    this.addEventListener(typename.type, listener, capture);\n    o = {type: typename.type, name: typename.name, value: value, listener: listener, capture: capture};\n    if (!on) this.__on = [o];\n    else on.push(o);\n  };\n}\n\nexport default function(typename, value, capture) {\n  var typenames = parseTypenames(typename + \"\"), i, n = typenames.length, t;\n\n  if (arguments.length < 2) {\n    var on = this.node().__on;\n    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {\n      for (i = 0, o = on[j]; i < n; ++i) {\n        if ((t = typenames[i]).type === o.type && t.name === o.name) {\n          return o.value;\n        }\n      }\n    }\n    return;\n  }\n\n  on = value ? onAdd : onRemove;\n  if (capture == null) capture = false;\n  for (i = 0; i < n; ++i) this.each(on(typenames[i], value, capture));\n  return this;\n}\n\nexport function customEvent(event1, listener, that, args) {\n  var event0 = event;\n  event1.sourceEvent = event;\n  event = event1;\n  try {\n    return listener.apply(that, args);\n  } finally {\n    event = event0;\n  }\n}\n","import defaultView from \"../window\";\n\nfunction dispatchEvent(node, type, params) {\n  var window = defaultView(node),\n      event = window.CustomEvent;\n\n  if (typeof event === \"function\") {\n    event = new event(type, params);\n  } else {\n    event = window.document.createEvent(\"Event\");\n    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;\n    else event.initEvent(type, false, false);\n  }\n\n  node.dispatchEvent(event);\n}\n\nfunction dispatchConstant(type, params) {\n  return function() {\n    return dispatchEvent(this, type, params);\n  };\n}\n\nfunction dispatchFunction(type, params) {\n  return function() {\n    return dispatchEvent(this, type, params.apply(this, arguments));\n  };\n}\n\nexport default function(type, params) {\n  return this.each((typeof params === \"function\"\n      ? dispatchFunction\n      : dispatchConstant)(type, params));\n}\n","import selection_select from \"./select\";\nimport selection_selectAll from \"./selectAll\";\nimport selection_filter from \"./filter\";\nimport selection_data from \"./data\";\nimport selection_enter from \"./enter\";\nimport selection_exit from \"./exit\";\nimport selection_merge from \"./merge\";\nimport selection_order from \"./order\";\nimport selection_sort from \"./sort\";\nimport selection_call from \"./call\";\nimport selection_nodes from \"./nodes\";\nimport selection_node from \"./node\";\nimport selection_size from \"./size\";\nimport selection_empty from \"./empty\";\nimport selection_each from \"./each\";\nimport selection_attr from \"./attr\";\nimport selection_style from \"./style\";\nimport selection_property from \"./property\";\nimport selection_classed from \"./classed\";\nimport selection_text from \"./text\";\nimport selection_html from \"./html\";\nimport selection_raise from \"./raise\";\nimport selection_lower from \"./lower\";\nimport selection_append from \"./append\";\nimport selection_insert from \"./insert\";\nimport selection_remove from \"./remove\";\nimport selection_clone from \"./clone\";\nimport selection_datum from \"./datum\";\nimport selection_on from \"./on\";\nimport selection_dispatch from \"./dispatch\";\n\nexport var root = [null];\n\nexport function Selection(groups, parents) {\n  this._groups = groups;\n  this._parents = parents;\n}\n\nfunction selection() {\n  return new Selection([[document.documentElement]], root);\n}\n\nSelection.prototype = selection.prototype = {\n  constructor: Selection,\n  select: selection_select,\n  selectAll: selection_selectAll,\n  filter: selection_filter,\n  data: selection_data,\n  enter: selection_enter,\n  exit: selection_exit,\n  merge: selection_merge,\n  order: selection_order,\n  sort: selection_sort,\n  call: selection_call,\n  nodes: selection_nodes,\n  node: selection_node,\n  size: selection_size,\n  empty: selection_empty,\n  each: selection_each,\n  attr: selection_attr,\n  style: selection_style,\n  property: selection_property,\n  classed: selection_classed,\n  text: selection_text,\n  html: selection_html,\n  raise: selection_raise,\n  lower: selection_lower,\n  append: selection_append,\n  insert: selection_insert,\n  remove: selection_remove,\n  clone: selection_clone,\n  datum: selection_datum,\n  on: selection_on,\n  dispatch: selection_dispatch\n};\n\nexport default selection;\n","import {Selection} from \"./index\";\nimport selector from \"../selector\";\n\nexport default function(select) {\n  if (typeof select !== \"function\") select = selector(select);\n\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {\n      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {\n        if (\"__data__\" in node) subnode.__data__ = node.__data__;\n        subgroup[i] = subnode;\n      }\n    }\n  }\n\n  return new Selection(subgroups, this._parents);\n}\n","import {Selection} from \"./index\";\nimport selectorAll from \"../selectorAll\";\n\nexport default function(select) {\n  if (typeof select !== \"function\") select = selectorAll(select);\n\n  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        subgroups.push(select.call(node, node.__data__, i, group));\n        parents.push(node);\n      }\n    }\n  }\n\n  return new Selection(subgroups, parents);\n}\n","import {Selection} from \"./index\";\nimport matcher from \"../matcher\";\n\nexport default function(match) {\n  if (typeof match !== \"function\") match = matcher(match);\n\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {\n      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {\n        subgroup.push(node);\n      }\n    }\n  }\n\n  return new Selection(subgroups, this._parents);\n}\n","import sparse from \"./sparse\";\nimport {Selection} from \"./index\";\n\nexport default function() {\n  return new Selection(this._exit || this._groups.map(sparse), this._parents);\n}\n","import {Selection} from \"./index\";\n\nexport default function(selection) {\n\n  for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {\n    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {\n      if (node = group0[i] || group1[i]) {\n        merge[i] = node;\n      }\n    }\n  }\n\n  for (; j < m0; ++j) {\n    merges[j] = groups0[j];\n  }\n\n  return new Selection(merges, this._parents);\n}\n","export default function() {\n\n  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {\n    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {\n      if (node = group[i]) {\n        if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);\n        next = node;\n      }\n    }\n  }\n\n  return this;\n}\n","export default function() {\n  var callback = arguments[0];\n  arguments[0] = this;\n  callback.apply(null, arguments);\n  return this;\n}\n","export default function() {\n  var nodes = new Array(this.size()), i = -1;\n  this.each(function() { nodes[++i] = this; });\n  return nodes;\n}\n","export default function() {\n\n  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {\n      var node = group[i];\n      if (node) return node;\n    }\n  }\n\n  return null;\n}\n","export default function() {\n  var size = 0;\n  this.each(function() { ++size; });\n  return size;\n}\n","export default function() {\n  return !this.node();\n}\n","export default function(callback) {\n\n  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {\n      if (node = group[i]) callback.call(node, node.__data__, i, group);\n    }\n  }\n\n  return this;\n}\n","function propertyRemove(name) {\n  return function() {\n    delete this[name];\n  };\n}\n\nfunction propertyConstant(name, value) {\n  return function() {\n    this[name] = value;\n  };\n}\n\nfunction propertyFunction(name, value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (v == null) delete this[name];\n    else this[name] = v;\n  };\n}\n\nexport default function(name, value) {\n  return arguments.length > 1\n      ? this.each((value == null\n          ? propertyRemove : typeof value === \"function\"\n          ? propertyFunction\n          : propertyConstant)(name, value))\n      : this.node()[name];\n}\n","import creator from \"../creator\";\n\nexport default function(name) {\n  var create = typeof name === \"function\" ? name : creator(name);\n  return this.select(function() {\n    return this.appendChild(create.apply(this, arguments));\n  });\n}\n","export default function(value) {\n  return arguments.length\n      ? this.property(\"__data__\", value)\n      : this.node().__data__;\n}\n","import {Selection, root} from \"./selection/index\";\n\nexport default function(selector) {\n  return typeof selector === \"string\"\n      ? new Selection([[document.querySelector(selector)]], [document.documentElement])\n      : new Selection([[selector]], root);\n}\n","import creator from \"./creator\";\nimport select from \"./select\";\n\nexport default function(name) {\n  return select(creator(name).call(document.documentElement));\n}\n","var nextId = 0;\n\nexport default function local() {\n  return new Local;\n}\n\nfunction Local() {\n  this._ = \"@\" + (++nextId).toString(36);\n}\n\nLocal.prototype = local.prototype = {\n  constructor: Local,\n  get: function(node) {\n    var id = this._;\n    while (!(id in node)) if (!(node = node.parentNode)) return;\n    return node[id];\n  },\n  set: function(node, value) {\n    return node[this._] = value;\n  },\n  remove: function(node) {\n    return this._ in node && delete node[this._];\n  },\n  toString: function() {\n    return this._;\n  }\n};\n","import {event} from \"./selection/on\";\n\nexport default function() {\n  var current = event, source;\n  while (source = current.sourceEvent) current = source;\n  return current;\n}\n","export default function(node, event) {\n  var svg = node.ownerSVGElement || node;\n\n  if (svg.createSVGPoint) {\n    var point = svg.createSVGPoint();\n    point.x = event.clientX, point.y = event.clientY;\n    point = point.matrixTransform(node.getScreenCTM().inverse());\n    return [point.x, point.y];\n  }\n\n  var rect = node.getBoundingClientRect();\n  return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];\n}\n","import sourceEvent from \"./sourceEvent\";\nimport point from \"./point\";\n\nexport default function(node) {\n  var event = sourceEvent();\n  if (event.changedTouches) event = event.changedTouches[0];\n  return point(node, event);\n}\n","import {Selection, root} from \"./selection/index\";\n\nexport default function(selector) {\n  return typeof selector === \"string\"\n      ? new Selection([document.querySelectorAll(selector)], [document.documentElement])\n      : new Selection([selector == null ? [] : selector], root);\n}\n","import sourceEvent from \"./sourceEvent\";\nimport point from \"./point\";\n\nexport default function(node, touches, identifier) {\n  if (arguments.length < 3) identifier = touches, touches = sourceEvent().changedTouches;\n\n  for (var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i) {\n    if ((touch = touches[i]).identifier === identifier) {\n      return point(node, touch);\n    }\n  }\n\n  return null;\n}\n","import sourceEvent from \"./sourceEvent\";\nimport point from \"./point\";\n\nexport default function(node, touches) {\n  if (touches == null) touches = sourceEvent().touches;\n\n  for (var i = 0, n = touches ? touches.length : 0, points = new Array(n); i < n; ++i) {\n    points[i] = point(node, touches[i]);\n  }\n\n  return points;\n}\n","import {event} from \"d3-selection\";\n\nexport function nopropagation() {\n  event.stopImmediatePropagation();\n}\n\nexport default function() {\n  event.preventDefault();\n  event.stopImmediatePropagation();\n}\n","import {select} from \"d3-selection\";\nimport noevent from \"./noevent\";\n\nexport default function(view) {\n  var root = view.document.documentElement,\n      selection = select(view).on(\"dragstart.drag\", noevent, true);\n  if (\"onselectstart\" in root) {\n    selection.on(\"selectstart.drag\", noevent, true);\n  } else {\n    root.__noselect = root.style.MozUserSelect;\n    root.style.MozUserSelect = \"none\";\n  }\n}\n\nexport function yesdrag(view, noclick) {\n  var root = view.document.documentElement,\n      selection = select(view).on(\"dragstart.drag\", null);\n  if (noclick) {\n    selection.on(\"click.drag\", noevent, true);\n    setTimeout(function() { selection.on(\"click.drag\", null); }, 0);\n  }\n  if (\"onselectstart\" in root) {\n    selection.on(\"selectstart.drag\", null);\n  } else {\n    root.style.MozUserSelect = root.__noselect;\n    delete root.__noselect;\n  }\n}\n","export default function(x) {\n  return function() {\n    return x;\n  };\n}\n","export default function DragEvent(target, type, subject, id, active, x, y, dx, dy, dispatch) {\n  this.target = target;\n  this.type = type;\n  this.subject = subject;\n  this.identifier = id;\n  this.active = active;\n  this.x = x;\n  this.y = y;\n  this.dx = dx;\n  this.dy = dy;\n  this._ = dispatch;\n}\n\nDragEvent.prototype.on = function() {\n  var value = this._.on.apply(this._, arguments);\n  return value === this._ ? this : value;\n};\n","import {dispatch} from \"d3-dispatch\";\nimport {event, customEvent, select, mouse, touch} from \"d3-selection\";\nimport nodrag, {yesdrag} from \"./nodrag\";\nimport noevent, {nopropagation} from \"./noevent\";\nimport constant from \"./constant\";\nimport DragEvent from \"./event\";\n\n// Ignore right-click, since that should open the context menu.\nfunction defaultFilter() {\n  return !event.button;\n}\n\nfunction defaultContainer() {\n  return this.parentNode;\n}\n\nfunction defaultSubject(d) {\n  return d == null ? {x: event.x, y: event.y} : d;\n}\n\nfunction defaultTouchable() {\n  return \"ontouchstart\" in this;\n}\n\nexport default function() {\n  var filter = defaultFilter,\n      container = defaultContainer,\n      subject = defaultSubject,\n      touchable = defaultTouchable,\n      gestures = {},\n      listeners = dispatch(\"start\", \"drag\", \"end\"),\n      active = 0,\n      mousedownx,\n      mousedowny,\n      mousemoving,\n      touchending,\n      clickDistance2 = 0;\n\n  function drag(selection) {\n    selection\n        .on(\"mousedown.drag\", mousedowned)\n      .filter(touchable)\n        .on(\"touchstart.drag\", touchstarted)\n        .on(\"touchmove.drag\", touchmoved)\n        .on(\"touchend.drag touchcancel.drag\", touchended)\n        .style(\"touch-action\", \"none\")\n        .style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\");\n  }\n\n  function mousedowned() {\n    if (touchending || !filter.apply(this, arguments)) return;\n    var gesture = beforestart(\"mouse\", container.apply(this, arguments), mouse, this, arguments);\n    if (!gesture) return;\n    select(event.view).on(\"mousemove.drag\", mousemoved, true).on(\"mouseup.drag\", mouseupped, true);\n    nodrag(event.view);\n    nopropagation();\n    mousemoving = false;\n    mousedownx = event.clientX;\n    mousedowny = event.clientY;\n    gesture(\"start\");\n  }\n\n  function mousemoved() {\n    noevent();\n    if (!mousemoving) {\n      var dx = event.clientX - mousedownx, dy = event.clientY - mousedowny;\n      mousemoving = dx * dx + dy * dy > clickDistance2;\n    }\n    gestures.mouse(\"drag\");\n  }\n\n  function mouseupped() {\n    select(event.view).on(\"mousemove.drag mouseup.drag\", null);\n    yesdrag(event.view, mousemoving);\n    noevent();\n    gestures.mouse(\"end\");\n  }\n\n  function touchstarted() {\n    if (!filter.apply(this, arguments)) return;\n    var touches = event.changedTouches,\n        c = container.apply(this, arguments),\n        n = touches.length, i, gesture;\n\n    for (i = 0; i < n; ++i) {\n      if (gesture = beforestart(touches[i].identifier, c, touch, this, arguments)) {\n        nopropagation();\n        gesture(\"start\");\n      }\n    }\n  }\n\n  function touchmoved() {\n    var touches = event.changedTouches,\n        n = touches.length, i, gesture;\n\n    for (i = 0; i < n; ++i) {\n      if (gesture = gestures[touches[i].identifier]) {\n        noevent();\n        gesture(\"drag\");\n      }\n    }\n  }\n\n  function touchended() {\n    var touches = event.changedTouches,\n        n = touches.length, i, gesture;\n\n    if (touchending) clearTimeout(touchending);\n    touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!\n    for (i = 0; i < n; ++i) {\n      if (gesture = gestures[touches[i].identifier]) {\n        nopropagation();\n        gesture(\"end\");\n      }\n    }\n  }\n\n  function beforestart(id, container, point, that, args) {\n    var p = point(container, id), s, dx, dy,\n        sublisteners = listeners.copy();\n\n    if (!customEvent(new DragEvent(drag, \"beforestart\", s, id, active, p[0], p[1], 0, 0, sublisteners), function() {\n      if ((event.subject = s = subject.apply(that, args)) == null) return false;\n      dx = s.x - p[0] || 0;\n      dy = s.y - p[1] || 0;\n      return true;\n    })) return;\n\n    return function gesture(type) {\n      var p0 = p, n;\n      switch (type) {\n        case \"start\": gestures[id] = gesture, n = active++; break;\n        case \"end\": delete gestures[id], --active; // nobreak\n        case \"drag\": p = point(container, id), n = active; break;\n      }\n      customEvent(new DragEvent(drag, type, s, id, n, p[0] + dx, p[1] + dy, p[0] - p0[0], p[1] - p0[1], sublisteners), sublisteners.apply, sublisteners, [type, that, args]);\n    };\n  }\n\n  drag.filter = function(_) {\n    return arguments.length ? (filter = typeof _ === \"function\" ? _ : constant(!!_), drag) : filter;\n  };\n\n  drag.container = function(_) {\n    return arguments.length ? (container = typeof _ === \"function\" ? _ : constant(_), drag) : container;\n  };\n\n  drag.subject = function(_) {\n    return arguments.length ? (subject = typeof _ === \"function\" ? _ : constant(_), drag) : subject;\n  };\n\n  drag.touchable = function(_) {\n    return arguments.length ? (touchable = typeof _ === \"function\" ? _ : constant(!!_), drag) : touchable;\n  };\n\n  drag.on = function() {\n    var value = listeners.on.apply(listeners, arguments);\n    return value === listeners ? drag : value;\n  };\n\n  drag.clickDistance = function(_) {\n    return arguments.length ? (clickDistance2 = (_ = +_) * _, drag) : Math.sqrt(clickDistance2);\n  };\n\n  return drag;\n}\n","export default function(constructor, factory, prototype) {\n  constructor.prototype = factory.prototype = prototype;\n  prototype.constructor = constructor;\n}\n\nexport function extend(parent, definition) {\n  var prototype = Object.create(parent.prototype);\n  for (var key in definition) prototype[key] = definition[key];\n  return prototype;\n}\n","import define, {extend} from \"./define\";\n\nexport function Color() {}\n\nexport var darker = 0.7;\nexport var brighter = 1 / darker;\n\nvar reI = \"\\\\s*([+-]?\\\\d+)\\\\s*\",\n    reN = \"\\\\s*([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)\\\\s*\",\n    reP = \"\\\\s*([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)%\\\\s*\",\n    reHex3 = /^#([0-9a-f]{3})$/,\n    reHex6 = /^#([0-9a-f]{6})$/,\n    reRgbInteger = new RegExp(\"^rgb\\\\(\" + [reI, reI, reI] + \"\\\\)$\"),\n    reRgbPercent = new RegExp(\"^rgb\\\\(\" + [reP, reP, reP] + \"\\\\)$\"),\n    reRgbaInteger = new RegExp(\"^rgba\\\\(\" + [reI, reI, reI, reN] + \"\\\\)$\"),\n    reRgbaPercent = new RegExp(\"^rgba\\\\(\" + [reP, reP, reP, reN] + \"\\\\)$\"),\n    reHslPercent = new RegExp(\"^hsl\\\\(\" + [reN, reP, reP] + \"\\\\)$\"),\n    reHslaPercent = new RegExp(\"^hsla\\\\(\" + [reN, reP, reP, reN] + \"\\\\)$\");\n\nvar named = {\n  aliceblue: 0xf0f8ff,\n  antiquewhite: 0xfaebd7,\n  aqua: 0x00ffff,\n  aquamarine: 0x7fffd4,\n  azure: 0xf0ffff,\n  beige: 0xf5f5dc,\n  bisque: 0xffe4c4,\n  black: 0x000000,\n  blanchedalmond: 0xffebcd,\n  blue: 0x0000ff,\n  blueviolet: 0x8a2be2,\n  brown: 0xa52a2a,\n  burlywood: 0xdeb887,\n  cadetblue: 0x5f9ea0,\n  chartreuse: 0x7fff00,\n  chocolate: 0xd2691e,\n  coral: 0xff7f50,\n  cornflowerblue: 0x6495ed,\n  cornsilk: 0xfff8dc,\n  crimson: 0xdc143c,\n  cyan: 0x00ffff,\n  darkblue: 0x00008b,\n  darkcyan: 0x008b8b,\n  darkgoldenrod: 0xb8860b,\n  darkgray: 0xa9a9a9,\n  darkgreen: 0x006400,\n  darkgrey: 0xa9a9a9,\n  darkkhaki: 0xbdb76b,\n  darkmagenta: 0x8b008b,\n  darkolivegreen: 0x556b2f,\n  darkorange: 0xff8c00,\n  darkorchid: 0x9932cc,\n  darkred: 0x8b0000,\n  darksalmon: 0xe9967a,\n  darkseagreen: 0x8fbc8f,\n  darkslateblue: 0x483d8b,\n  darkslategray: 0x2f4f4f,\n  darkslategrey: 0x2f4f4f,\n  darkturquoise: 0x00ced1,\n  darkviolet: 0x9400d3,\n  deeppink: 0xff1493,\n  deepskyblue: 0x00bfff,\n  dimgray: 0x696969,\n  dimgrey: 0x696969,\n  dodgerblue: 0x1e90ff,\n  firebrick: 0xb22222,\n  floralwhite: 0xfffaf0,\n  forestgreen: 0x228b22,\n  fuchsia: 0xff00ff,\n  gainsboro: 0xdcdcdc,\n  ghostwhite: 0xf8f8ff,\n  gold: 0xffd700,\n  goldenrod: 0xdaa520,\n  gray: 0x808080,\n  green: 0x008000,\n  greenyellow: 0xadff2f,\n  grey: 0x808080,\n  honeydew: 0xf0fff0,\n  hotpink: 0xff69b4,\n  indianred: 0xcd5c5c,\n  indigo: 0x4b0082,\n  ivory: 0xfffff0,\n  khaki: 0xf0e68c,\n  lavender: 0xe6e6fa,\n  lavenderblush: 0xfff0f5,\n  lawngreen: 0x7cfc00,\n  lemonchiffon: 0xfffacd,\n  lightblue: 0xadd8e6,\n  lightcoral: 0xf08080,\n  lightcyan: 0xe0ffff,\n  lightgoldenrodyellow: 0xfafad2,\n  lightgray: 0xd3d3d3,\n  lightgreen: 0x90ee90,\n  lightgrey: 0xd3d3d3,\n  lightpink: 0xffb6c1,\n  lightsalmon: 0xffa07a,\n  lightseagreen: 0x20b2aa,\n  lightskyblue: 0x87cefa,\n  lightslategray: 0x778899,\n  lightslategrey: 0x778899,\n  lightsteelblue: 0xb0c4de,\n  lightyellow: 0xffffe0,\n  lime: 0x00ff00,\n  limegreen: 0x32cd32,\n  linen: 0xfaf0e6,\n  magenta: 0xff00ff,\n  maroon: 0x800000,\n  mediumaquamarine: 0x66cdaa,\n  mediumblue: 0x0000cd,\n  mediumorchid: 0xba55d3,\n  mediumpurple: 0x9370db,\n  mediumseagreen: 0x3cb371,\n  mediumslateblue: 0x7b68ee,\n  mediumspringgreen: 0x00fa9a,\n  mediumturquoise: 0x48d1cc,\n  mediumvioletred: 0xc71585,\n  midnightblue: 0x191970,\n  mintcream: 0xf5fffa,\n  mistyrose: 0xffe4e1,\n  moccasin: 0xffe4b5,\n  navajowhite: 0xffdead,\n  navy: 0x000080,\n  oldlace: 0xfdf5e6,\n  olive: 0x808000,\n  olivedrab: 0x6b8e23,\n  orange: 0xffa500,\n  orangered: 0xff4500,\n  orchid: 0xda70d6,\n  palegoldenrod: 0xeee8aa,\n  palegreen: 0x98fb98,\n  paleturquoise: 0xafeeee,\n  palevioletred: 0xdb7093,\n  papayawhip: 0xffefd5,\n  peachpuff: 0xffdab9,\n  peru: 0xcd853f,\n  pink: 0xffc0cb,\n  plum: 0xdda0dd,\n  powderblue: 0xb0e0e6,\n  purple: 0x800080,\n  rebeccapurple: 0x663399,\n  red: 0xff0000,\n  rosybrown: 0xbc8f8f,\n  royalblue: 0x4169e1,\n  saddlebrown: 0x8b4513,\n  salmon: 0xfa8072,\n  sandybrown: 0xf4a460,\n  seagreen: 0x2e8b57,\n  seashell: 0xfff5ee,\n  sienna: 0xa0522d,\n  silver: 0xc0c0c0,\n  skyblue: 0x87ceeb,\n  slateblue: 0x6a5acd,\n  slategray: 0x708090,\n  slategrey: 0x708090,\n  snow: 0xfffafa,\n  springgreen: 0x00ff7f,\n  steelblue: 0x4682b4,\n  tan: 0xd2b48c,\n  teal: 0x008080,\n  thistle: 0xd8bfd8,\n  tomato: 0xff6347,\n  turquoise: 0x40e0d0,\n  violet: 0xee82ee,\n  wheat: 0xf5deb3,\n  white: 0xffffff,\n  whitesmoke: 0xf5f5f5,\n  yellow: 0xffff00,\n  yellowgreen: 0x9acd32\n};\n\ndefine(Color, color, {\n  displayable: function() {\n    return this.rgb().displayable();\n  },\n  hex: function() {\n    return this.rgb().hex();\n  },\n  toString: function() {\n    return this.rgb() + \"\";\n  }\n});\n\nexport default function color(format) {\n  var m;\n  format = (format + \"\").trim().toLowerCase();\n  return (m = reHex3.exec(format)) ? (m = parseInt(m[1], 16), new Rgb((m >> 8 & 0xf) | (m >> 4 & 0x0f0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1)) // #f00\n      : (m = reHex6.exec(format)) ? rgbn(parseInt(m[1], 16)) // #ff0000\n      : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)\n      : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)\n      : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)\n      : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)\n      : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)\n      : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)\n      : named.hasOwnProperty(format) ? rgbn(named[format])\n      : format === \"transparent\" ? new Rgb(NaN, NaN, NaN, 0)\n      : null;\n}\n\nfunction rgbn(n) {\n  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);\n}\n\nfunction rgba(r, g, b, a) {\n  if (a <= 0) r = g = b = NaN;\n  return new Rgb(r, g, b, a);\n}\n\nexport function rgbConvert(o) {\n  if (!(o instanceof Color)) o = color(o);\n  if (!o) return new Rgb;\n  o = o.rgb();\n  return new Rgb(o.r, o.g, o.b, o.opacity);\n}\n\nexport function rgb(r, g, b, opacity) {\n  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);\n}\n\nexport function Rgb(r, g, b, opacity) {\n  this.r = +r;\n  this.g = +g;\n  this.b = +b;\n  this.opacity = +opacity;\n}\n\ndefine(Rgb, rgb, extend(Color, {\n  brighter: function(k) {\n    k = k == null ? brighter : Math.pow(brighter, k);\n    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n  },\n  darker: function(k) {\n    k = k == null ? darker : Math.pow(darker, k);\n    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n  },\n  rgb: function() {\n    return this;\n  },\n  displayable: function() {\n    return (0 <= this.r && this.r <= 255)\n        && (0 <= this.g && this.g <= 255)\n        && (0 <= this.b && this.b <= 255)\n        && (0 <= this.opacity && this.opacity <= 1);\n  },\n  hex: function() {\n    return \"#\" + hex(this.r) + hex(this.g) + hex(this.b);\n  },\n  toString: function() {\n    var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));\n    return (a === 1 ? \"rgb(\" : \"rgba(\")\n        + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + \", \"\n        + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + \", \"\n        + Math.max(0, Math.min(255, Math.round(this.b) || 0))\n        + (a === 1 ? \")\" : \", \" + a + \")\");\n  }\n}));\n\nfunction hex(value) {\n  value = Math.max(0, Math.min(255, Math.round(value) || 0));\n  return (value < 16 ? \"0\" : \"\") + value.toString(16);\n}\n\nfunction hsla(h, s, l, a) {\n  if (a <= 0) h = s = l = NaN;\n  else if (l <= 0 || l >= 1) h = s = NaN;\n  else if (s <= 0) h = NaN;\n  return new Hsl(h, s, l, a);\n}\n\nexport function hslConvert(o) {\n  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);\n  if (!(o instanceof Color)) o = color(o);\n  if (!o) return new Hsl;\n  if (o instanceof Hsl) return o;\n  o = o.rgb();\n  var r = o.r / 255,\n      g = o.g / 255,\n      b = o.b / 255,\n      min = Math.min(r, g, b),\n      max = Math.max(r, g, b),\n      h = NaN,\n      s = max - min,\n      l = (max + min) / 2;\n  if (s) {\n    if (r === max) h = (g - b) / s + (g < b) * 6;\n    else if (g === max) h = (b - r) / s + 2;\n    else h = (r - g) / s + 4;\n    s /= l < 0.5 ? max + min : 2 - max - min;\n    h *= 60;\n  } else {\n    s = l > 0 && l < 1 ? 0 : h;\n  }\n  return new Hsl(h, s, l, o.opacity);\n}\n\nexport function hsl(h, s, l, opacity) {\n  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);\n}\n\nfunction Hsl(h, s, l, opacity) {\n  this.h = +h;\n  this.s = +s;\n  this.l = +l;\n  this.opacity = +opacity;\n}\n\ndefine(Hsl, hsl, extend(Color, {\n  brighter: function(k) {\n    k = k == null ? brighter : Math.pow(brighter, k);\n    return new Hsl(this.h, this.s, this.l * k, this.opacity);\n  },\n  darker: function(k) {\n    k = k == null ? darker : Math.pow(darker, k);\n    return new Hsl(this.h, this.s, this.l * k, this.opacity);\n  },\n  rgb: function() {\n    var h = this.h % 360 + (this.h < 0) * 360,\n        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,\n        l = this.l,\n        m2 = l + (l < 0.5 ? l : 1 - l) * s,\n        m1 = 2 * l - m2;\n    return new Rgb(\n      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),\n      hsl2rgb(h, m1, m2),\n      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),\n      this.opacity\n    );\n  },\n  displayable: function() {\n    return (0 <= this.s && this.s <= 1 || isNaN(this.s))\n        && (0 <= this.l && this.l <= 1)\n        && (0 <= this.opacity && this.opacity <= 1);\n  }\n}));\n\n/* From FvD 13.37, CSS Color Module Level 3 */\nfunction hsl2rgb(h, m1, m2) {\n  return (h < 60 ? m1 + (m2 - m1) * h / 60\n      : h < 180 ? m2\n      : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60\n      : m1) * 255;\n}\n","export var deg2rad = Math.PI / 180;\nexport var rad2deg = 180 / Math.PI;\n","import define, {extend} from \"./define\";\nimport {Color, rgbConvert, Rgb} from \"./color\";\nimport {deg2rad, rad2deg} from \"./math\";\n\n// https://beta.observablehq.com/@mbostock/lab-and-rgb\nvar K = 18,\n    Xn = 0.96422,\n    Yn = 1,\n    Zn = 0.82521,\n    t0 = 4 / 29,\n    t1 = 6 / 29,\n    t2 = 3 * t1 * t1,\n    t3 = t1 * t1 * t1;\n\nfunction labConvert(o) {\n  if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);\n  if (o instanceof Hcl) {\n    if (isNaN(o.h)) return new Lab(o.l, 0, 0, o.opacity);\n    var h = o.h * deg2rad;\n    return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);\n  }\n  if (!(o instanceof Rgb)) o = rgbConvert(o);\n  var r = rgb2lrgb(o.r),\n      g = rgb2lrgb(o.g),\n      b = rgb2lrgb(o.b),\n      y = xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b) / Yn), x, z;\n  if (r === g && g === b) x = z = y; else {\n    x = xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b) / Xn);\n    z = xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b) / Zn);\n  }\n  return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);\n}\n\nexport function gray(l, opacity) {\n  return new Lab(l, 0, 0, opacity == null ? 1 : opacity);\n}\n\nexport default function lab(l, a, b, opacity) {\n  return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);\n}\n\nexport function Lab(l, a, b, opacity) {\n  this.l = +l;\n  this.a = +a;\n  this.b = +b;\n  this.opacity = +opacity;\n}\n\ndefine(Lab, lab, extend(Color, {\n  brighter: function(k) {\n    return new Lab(this.l + K * (k == null ? 1 : k), this.a, this.b, this.opacity);\n  },\n  darker: function(k) {\n    return new Lab(this.l - K * (k == null ? 1 : k), this.a, this.b, this.opacity);\n  },\n  rgb: function() {\n    var y = (this.l + 16) / 116,\n        x = isNaN(this.a) ? y : y + this.a / 500,\n        z = isNaN(this.b) ? y : y - this.b / 200;\n    x = Xn * lab2xyz(x);\n    y = Yn * lab2xyz(y);\n    z = Zn * lab2xyz(z);\n    return new Rgb(\n      lrgb2rgb( 3.1338561 * x - 1.6168667 * y - 0.4906146 * z),\n      lrgb2rgb(-0.9787684 * x + 1.9161415 * y + 0.0334540 * z),\n      lrgb2rgb( 0.0719453 * x - 0.2289914 * y + 1.4052427 * z),\n      this.opacity\n    );\n  }\n}));\n\nfunction xyz2lab(t) {\n  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;\n}\n\nfunction lab2xyz(t) {\n  return t > t1 ? t * t * t : t2 * (t - t0);\n}\n\nfunction lrgb2rgb(x) {\n  return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);\n}\n\nfunction rgb2lrgb(x) {\n  return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);\n}\n\nfunction hclConvert(o) {\n  if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);\n  if (!(o instanceof Lab)) o = labConvert(o);\n  if (o.a === 0 && o.b === 0) return new Hcl(NaN, 0, o.l, o.opacity);\n  var h = Math.atan2(o.b, o.a) * rad2deg;\n  return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);\n}\n\nexport function lch(l, c, h, opacity) {\n  return arguments.length === 1 ? hclConvert(l) : new Hcl(h, c, l, opacity == null ? 1 : opacity);\n}\n\nexport function hcl(h, c, l, opacity) {\n  return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);\n}\n\nexport function Hcl(h, c, l, opacity) {\n  this.h = +h;\n  this.c = +c;\n  this.l = +l;\n  this.opacity = +opacity;\n}\n\ndefine(Hcl, hcl, extend(Color, {\n  brighter: function(k) {\n    return new Hcl(this.h, this.c, this.l + K * (k == null ? 1 : k), this.opacity);\n  },\n  darker: function(k) {\n    return new Hcl(this.h, this.c, this.l - K * (k == null ? 1 : k), this.opacity);\n  },\n  rgb: function() {\n    return labConvert(this).rgb();\n  }\n}));\n","import define, {extend} from \"./define\";\nimport {Color, rgbConvert, Rgb, darker, brighter} from \"./color\";\nimport {deg2rad, rad2deg} from \"./math\";\n\nvar A = -0.14861,\n    B = +1.78277,\n    C = -0.29227,\n    D = -0.90649,\n    E = +1.97294,\n    ED = E * D,\n    EB = E * B,\n    BC_DA = B * C - D * A;\n\nfunction cubehelixConvert(o) {\n  if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);\n  if (!(o instanceof Rgb)) o = rgbConvert(o);\n  var r = o.r / 255,\n      g = o.g / 255,\n      b = o.b / 255,\n      l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),\n      bl = b - l,\n      k = (E * (g - l) - C * bl) / D,\n      s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), // NaN if l=0 or l=1\n      h = s ? Math.atan2(k, bl) * rad2deg - 120 : NaN;\n  return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);\n}\n\nexport default function cubehelix(h, s, l, opacity) {\n  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);\n}\n\nexport function Cubehelix(h, s, l, opacity) {\n  this.h = +h;\n  this.s = +s;\n  this.l = +l;\n  this.opacity = +opacity;\n}\n\ndefine(Cubehelix, cubehelix, extend(Color, {\n  brighter: function(k) {\n    k = k == null ? brighter : Math.pow(brighter, k);\n    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);\n  },\n  darker: function(k) {\n    k = k == null ? darker : Math.pow(darker, k);\n    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);\n  },\n  rgb: function() {\n    var h = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad,\n        l = +this.l,\n        a = isNaN(this.s) ? 0 : this.s * l * (1 - l),\n        cosh = Math.cos(h),\n        sinh = Math.sin(h);\n    return new Rgb(\n      255 * (l + a * (A * cosh + B * sinh)),\n      255 * (l + a * (C * cosh + D * sinh)),\n      255 * (l + a * (E * cosh)),\n      this.opacity\n    );\n  }\n}));\n","export function basis(t1, v0, v1, v2, v3) {\n  var t2 = t1 * t1, t3 = t2 * t1;\n  return ((1 - 3 * t1 + 3 * t2 - t3) * v0\n      + (4 - 6 * t2 + 3 * t3) * v1\n      + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2\n      + t3 * v3) / 6;\n}\n\nexport default function(values) {\n  var n = values.length - 1;\n  return function(t) {\n    var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),\n        v1 = values[i],\n        v2 = values[i + 1],\n        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,\n        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;\n    return basis((t - i / n) * n, v0, v1, v2, v3);\n  };\n}\n","import {basis} from \"./basis\";\n\nexport default function(values) {\n  var n = values.length;\n  return function(t) {\n    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),\n        v0 = values[(i + n - 1) % n],\n        v1 = values[i % n],\n        v2 = values[(i + 1) % n],\n        v3 = values[(i + 2) % n];\n    return basis((t - i / n) * n, v0, v1, v2, v3);\n  };\n}\n","export default function(x) {\n  return function() {\n    return x;\n  };\n}\n","import constant from \"./constant\";\n\nfunction linear(a, d) {\n  return function(t) {\n    return a + t * d;\n  };\n}\n\nfunction exponential(a, b, y) {\n  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {\n    return Math.pow(a + t * b, y);\n  };\n}\n\nexport function hue(a, b) {\n  var d = b - a;\n  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant(isNaN(a) ? b : a);\n}\n\nexport function gamma(y) {\n  return (y = +y) === 1 ? nogamma : function(a, b) {\n    return b - a ? exponential(a, b, y) : constant(isNaN(a) ? b : a);\n  };\n}\n\nexport default function nogamma(a, b) {\n  var d = b - a;\n  return d ? linear(a, d) : constant(isNaN(a) ? b : a);\n}\n","import {rgb as colorRgb} from \"d3-color\";\nimport basis from \"./basis\";\nimport basisClosed from \"./basisClosed\";\nimport nogamma, {gamma} from \"./color\";\n\nexport default (function rgbGamma(y) {\n  var color = gamma(y);\n\n  function rgb(start, end) {\n    var r = color((start = colorRgb(start)).r, (end = colorRgb(end)).r),\n        g = color(start.g, end.g),\n        b = color(start.b, end.b),\n        opacity = nogamma(start.opacity, end.opacity);\n    return function(t) {\n      start.r = r(t);\n      start.g = g(t);\n      start.b = b(t);\n      start.opacity = opacity(t);\n      return start + \"\";\n    };\n  }\n\n  rgb.gamma = rgbGamma;\n\n  return rgb;\n})(1);\n\nfunction rgbSpline(spline) {\n  return function(colors) {\n    var n = colors.length,\n        r = new Array(n),\n        g = new Array(n),\n        b = new Array(n),\n        i, color;\n    for (i = 0; i < n; ++i) {\n      color = colorRgb(colors[i]);\n      r[i] = color.r || 0;\n      g[i] = color.g || 0;\n      b[i] = color.b || 0;\n    }\n    r = spline(r);\n    g = spline(g);\n    b = spline(b);\n    color.opacity = 1;\n    return function(t) {\n      color.r = r(t);\n      color.g = g(t);\n      color.b = b(t);\n      return color + \"\";\n    };\n  };\n}\n\nexport var rgbBasis = rgbSpline(basis);\nexport var rgbBasisClosed = rgbSpline(basisClosed);\n","import value from \"./value\";\n\nexport default function(a, b) {\n  var nb = b ? b.length : 0,\n      na = a ? Math.min(nb, a.length) : 0,\n      x = new Array(na),\n      c = new Array(nb),\n      i;\n\n  for (i = 0; i < na; ++i) x[i] = value(a[i], b[i]);\n  for (; i < nb; ++i) c[i] = b[i];\n\n  return function(t) {\n    for (i = 0; i < na; ++i) c[i] = x[i](t);\n    return c;\n  };\n}\n","export default function(a, b) {\n  var d = new Date;\n  return a = +a, b -= a, function(t) {\n    return d.setTime(a + b * t), d;\n  };\n}\n","export default function(a, b) {\n  return a = +a, b -= a, function(t) {\n    return a + b * t;\n  };\n}\n","import value from \"./value\";\n\nexport default function(a, b) {\n  var i = {},\n      c = {},\n      k;\n\n  if (a === null || typeof a !== \"object\") a = {};\n  if (b === null || typeof b !== \"object\") b = {};\n\n  for (k in b) {\n    if (k in a) {\n      i[k] = value(a[k], b[k]);\n    } else {\n      c[k] = b[k];\n    }\n  }\n\n  return function(t) {\n    for (k in i) c[k] = i[k](t);\n    return c;\n  };\n}\n","import number from \"./number\";\n\nvar reA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g,\n    reB = new RegExp(reA.source, \"g\");\n\nfunction zero(b) {\n  return function() {\n    return b;\n  };\n}\n\nfunction one(b) {\n  return function(t) {\n    return b(t) + \"\";\n  };\n}\n\nexport default function(a, b) {\n  var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b\n      am, // current match in a\n      bm, // current match in b\n      bs, // string preceding current number in b, if any\n      i = -1, // index in s\n      s = [], // string constants and placeholders\n      q = []; // number interpolators\n\n  // Coerce inputs to strings.\n  a = a + \"\", b = b + \"\";\n\n  // Interpolate pairs of numbers in a & b.\n  while ((am = reA.exec(a))\n      && (bm = reB.exec(b))) {\n    if ((bs = bm.index) > bi) { // a string precedes the next number in b\n      bs = b.slice(bi, bs);\n      if (s[i]) s[i] += bs; // coalesce with previous string\n      else s[++i] = bs;\n    }\n    if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match\n      if (s[i]) s[i] += bm; // coalesce with previous string\n      else s[++i] = bm;\n    } else { // interpolate non-matching numbers\n      s[++i] = null;\n      q.push({i: i, x: number(am, bm)});\n    }\n    bi = reB.lastIndex;\n  }\n\n  // Add remains of b.\n  if (bi < b.length) {\n    bs = b.slice(bi);\n    if (s[i]) s[i] += bs; // coalesce with previous string\n    else s[++i] = bs;\n  }\n\n  // Special optimization for only a single match.\n  // Otherwise, interpolate each of the numbers and rejoin the string.\n  return s.length < 2 ? (q[0]\n      ? one(q[0].x)\n      : zero(b))\n      : (b = q.length, function(t) {\n          for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);\n          return s.join(\"\");\n        });\n}\n","import decompose, {identity} from \"./decompose\";\n\nvar cssNode,\n    cssRoot,\n    cssView,\n    svgNode;\n\nexport function parseCss(value) {\n  if (value === \"none\") return identity;\n  if (!cssNode) cssNode = document.createElement(\"DIV\"), cssRoot = document.documentElement, cssView = document.defaultView;\n  cssNode.style.transform = value;\n  value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue(\"transform\");\n  cssRoot.removeChild(cssNode);\n  value = value.slice(7, -1).split(\",\");\n  return decompose(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);\n}\n\nexport function parseSvg(value) {\n  if (value == null) return identity;\n  if (!svgNode) svgNode = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n  svgNode.setAttribute(\"transform\", value);\n  if (!(value = svgNode.transform.baseVal.consolidate())) return identity;\n  value = value.matrix;\n  return decompose(value.a, value.b, value.c, value.d, value.e, value.f);\n}\n","import {color} from \"d3-color\";\nimport rgb from \"./rgb\";\nimport array from \"./array\";\nimport date from \"./date\";\nimport number from \"./number\";\nimport object from \"./object\";\nimport string from \"./string\";\nimport constant from \"./constant\";\n\nexport default function(a, b) {\n  var t = typeof b, c;\n  return b == null || t === \"boolean\" ? constant(b)\n      : (t === \"number\" ? number\n      : t === \"string\" ? ((c = color(b)) ? (b = c, rgb) : string)\n      : b instanceof color ? rgb\n      : b instanceof Date ? date\n      : Array.isArray(b) ? array\n      : typeof b.valueOf !== \"function\" && typeof b.toString !== \"function\" || isNaN(b) ? object\n      : number)(a, b);\n}\n","export default function(range) {\n  var n = range.length;\n  return function(t) {\n    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];\n  };\n}\n","import {hue} from \"./color\";\n\nexport default function(a, b) {\n  var i = hue(+a, +b);\n  return function(t) {\n    var x = i(t);\n    return x - 360 * Math.floor(x / 360);\n  };\n}\n","export default function(a, b) {\n  return a = +a, b -= a, function(t) {\n    return Math.round(a + b * t);\n  };\n}\n","var degrees = 180 / Math.PI;\n\nexport var identity = {\n  translateX: 0,\n  translateY: 0,\n  rotate: 0,\n  skewX: 0,\n  scaleX: 1,\n  scaleY: 1\n};\n\nexport default function(a, b, c, d, e, f) {\n  var scaleX, scaleY, skewX;\n  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;\n  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;\n  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;\n  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;\n  return {\n    translateX: e,\n    translateY: f,\n    rotate: Math.atan2(b, a) * degrees,\n    skewX: Math.atan(skewX) * degrees,\n    scaleX: scaleX,\n    scaleY: scaleY\n  };\n}\n","import number from \"../number\";\nimport {parseCss, parseSvg} from \"./parse\";\n\nfunction interpolateTransform(parse, pxComma, pxParen, degParen) {\n\n  function pop(s) {\n    return s.length ? s.pop() + \" \" : \"\";\n  }\n\n  function translate(xa, ya, xb, yb, s, q) {\n    if (xa !== xb || ya !== yb) {\n      var i = s.push(\"translate(\", null, pxComma, null, pxParen);\n      q.push({i: i - 4, x: number(xa, xb)}, {i: i - 2, x: number(ya, yb)});\n    } else if (xb || yb) {\n      s.push(\"translate(\" + xb + pxComma + yb + pxParen);\n    }\n  }\n\n  function rotate(a, b, s, q) {\n    if (a !== b) {\n      if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path\n      q.push({i: s.push(pop(s) + \"rotate(\", null, degParen) - 2, x: number(a, b)});\n    } else if (b) {\n      s.push(pop(s) + \"rotate(\" + b + degParen);\n    }\n  }\n\n  function skewX(a, b, s, q) {\n    if (a !== b) {\n      q.push({i: s.push(pop(s) + \"skewX(\", null, degParen) - 2, x: number(a, b)});\n    } else if (b) {\n      s.push(pop(s) + \"skewX(\" + b + degParen);\n    }\n  }\n\n  function scale(xa, ya, xb, yb, s, q) {\n    if (xa !== xb || ya !== yb) {\n      var i = s.push(pop(s) + \"scale(\", null, \",\", null, \")\");\n      q.push({i: i - 4, x: number(xa, xb)}, {i: i - 2, x: number(ya, yb)});\n    } else if (xb !== 1 || yb !== 1) {\n      s.push(pop(s) + \"scale(\" + xb + \",\" + yb + \")\");\n    }\n  }\n\n  return function(a, b) {\n    var s = [], // string constants and placeholders\n        q = []; // number interpolators\n    a = parse(a), b = parse(b);\n    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);\n    rotate(a.rotate, b.rotate, s, q);\n    skewX(a.skewX, b.skewX, s, q);\n    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);\n    a = b = null; // gc\n    return function(t) {\n      var i = -1, n = q.length, o;\n      while (++i < n) s[(o = q[i]).i] = o.x(t);\n      return s.join(\"\");\n    };\n  };\n}\n\nexport var interpolateTransformCss = interpolateTransform(parseCss, \"px, \", \"px)\", \"deg)\");\nexport var interpolateTransformSvg = interpolateTransform(parseSvg, \", \", \")\", \")\");\n","var rho = Math.SQRT2,\n    rho2 = 2,\n    rho4 = 4,\n    epsilon2 = 1e-12;\n\nfunction cosh(x) {\n  return ((x = Math.exp(x)) + 1 / x) / 2;\n}\n\nfunction sinh(x) {\n  return ((x = Math.exp(x)) - 1 / x) / 2;\n}\n\nfunction tanh(x) {\n  return ((x = Math.exp(2 * x)) - 1) / (x + 1);\n}\n\n// p0 = [ux0, uy0, w0]\n// p1 = [ux1, uy1, w1]\nexport default function(p0, p1) {\n  var ux0 = p0[0], uy0 = p0[1], w0 = p0[2],\n      ux1 = p1[0], uy1 = p1[1], w1 = p1[2],\n      dx = ux1 - ux0,\n      dy = uy1 - uy0,\n      d2 = dx * dx + dy * dy,\n      i,\n      S;\n\n  // Special case for u0 ≅ u1.\n  if (d2 < epsilon2) {\n    S = Math.log(w1 / w0) / rho;\n    i = function(t) {\n      return [\n        ux0 + t * dx,\n        uy0 + t * dy,\n        w0 * Math.exp(rho * t * S)\n      ];\n    }\n  }\n\n  // General case.\n  else {\n    var d1 = Math.sqrt(d2),\n        b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),\n        b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),\n        r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),\n        r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);\n    S = (r1 - r0) / rho;\n    i = function(t) {\n      var s = t * S,\n          coshr0 = cosh(r0),\n          u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));\n      return [\n        ux0 + u * dx,\n        uy0 + u * dy,\n        w0 * coshr0 / cosh(rho * s + r0)\n      ];\n    }\n  }\n\n  i.duration = S * 1000;\n\n  return i;\n}\n","import {hsl as colorHsl} from \"d3-color\";\nimport color, {hue} from \"./color\";\n\nfunction hsl(hue) {\n  return function(start, end) {\n    var h = hue((start = colorHsl(start)).h, (end = colorHsl(end)).h),\n        s = color(start.s, end.s),\n        l = color(start.l, end.l),\n        opacity = color(start.opacity, end.opacity);\n    return function(t) {\n      start.h = h(t);\n      start.s = s(t);\n      start.l = l(t);\n      start.opacity = opacity(t);\n      return start + \"\";\n    };\n  }\n}\n\nexport default hsl(hue);\nexport var hslLong = hsl(color);\n","import {lab as colorLab} from \"d3-color\";\nimport color from \"./color\";\n\nexport default function lab(start, end) {\n  var l = color((start = colorLab(start)).l, (end = colorLab(end)).l),\n      a = color(start.a, end.a),\n      b = color(start.b, end.b),\n      opacity = color(start.opacity, end.opacity);\n  return function(t) {\n    start.l = l(t);\n    start.a = a(t);\n    start.b = b(t);\n    start.opacity = opacity(t);\n    return start + \"\";\n  };\n}\n","import {hcl as colorHcl} from \"d3-color\";\nimport color, {hue} from \"./color\";\n\nfunction hcl(hue) {\n  return function(start, end) {\n    var h = hue((start = colorHcl(start)).h, (end = colorHcl(end)).h),\n        c = color(start.c, end.c),\n        l = color(start.l, end.l),\n        opacity = color(start.opacity, end.opacity);\n    return function(t) {\n      start.h = h(t);\n      start.c = c(t);\n      start.l = l(t);\n      start.opacity = opacity(t);\n      return start + \"\";\n    };\n  }\n}\n\nexport default hcl(hue);\nexport var hclLong = hcl(color);\n","import {cubehelix as colorCubehelix} from \"d3-color\";\nimport color, {hue} from \"./color\";\n\nfunction cubehelix(hue) {\n  return (function cubehelixGamma(y) {\n    y = +y;\n\n    function cubehelix(start, end) {\n      var h = hue((start = colorCubehelix(start)).h, (end = colorCubehelix(end)).h),\n          s = color(start.s, end.s),\n          l = color(start.l, end.l),\n          opacity = color(start.opacity, end.opacity);\n      return function(t) {\n        start.h = h(t);\n        start.s = s(t);\n        start.l = l(Math.pow(t, y));\n        start.opacity = opacity(t);\n        return start + \"\";\n      };\n    }\n\n    cubehelix.gamma = cubehelixGamma;\n\n    return cubehelix;\n  })(1);\n}\n\nexport default cubehelix(hue);\nexport var cubehelixLong = cubehelix(color);\n","export default function piecewise(interpolate, values) {\n  var i = 0, n = values.length - 1, v = values[0], I = new Array(n < 0 ? 0 : n);\n  while (i < n) I[i] = interpolate(v, v = values[++i]);\n  return function(t) {\n    var i = Math.max(0, Math.min(n - 1, Math.floor(t *= n)));\n    return I[i](t - i);\n  };\n}\n","export default function(interpolator, n) {\n  var samples = new Array(n);\n  for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));\n  return samples;\n}\n","var frame = 0, // is an animation frame pending?\n    timeout = 0, // is a timeout pending?\n    interval = 0, // are any timers active?\n    pokeDelay = 1000, // how frequently we check for clock skew\n    taskHead,\n    taskTail,\n    clockLast = 0,\n    clockNow = 0,\n    clockSkew = 0,\n    clock = typeof performance === \"object\" && performance.now ? performance : Date,\n    setFrame = typeof window === \"object\" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) { setTimeout(f, 17); };\n\nexport function now() {\n  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);\n}\n\nfunction clearNow() {\n  clockNow = 0;\n}\n\nexport function Timer() {\n  this._call =\n  this._time =\n  this._next = null;\n}\n\nTimer.prototype = timer.prototype = {\n  constructor: Timer,\n  restart: function(callback, delay, time) {\n    if (typeof callback !== \"function\") throw new TypeError(\"callback is not a function\");\n    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);\n    if (!this._next && taskTail !== this) {\n      if (taskTail) taskTail._next = this;\n      else taskHead = this;\n      taskTail = this;\n    }\n    this._call = callback;\n    this._time = time;\n    sleep();\n  },\n  stop: function() {\n    if (this._call) {\n      this._call = null;\n      this._time = Infinity;\n      sleep();\n    }\n  }\n};\n\nexport function timer(callback, delay, time) {\n  var t = new Timer;\n  t.restart(callback, delay, time);\n  return t;\n}\n\nexport function timerFlush() {\n  now(); // Get the current time, if not already set.\n  ++frame; // Pretend we’ve set an alarm, if we haven’t already.\n  var t = taskHead, e;\n  while (t) {\n    if ((e = clockNow - t._time) >= 0) t._call.call(null, e);\n    t = t._next;\n  }\n  --frame;\n}\n\nfunction wake() {\n  clockNow = (clockLast = clock.now()) + clockSkew;\n  frame = timeout = 0;\n  try {\n    timerFlush();\n  } finally {\n    frame = 0;\n    nap();\n    clockNow = 0;\n  }\n}\n\nfunction poke() {\n  var now = clock.now(), delay = now - clockLast;\n  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;\n}\n\nfunction nap() {\n  var t0, t1 = taskHead, t2, time = Infinity;\n  while (t1) {\n    if (t1._call) {\n      if (time > t1._time) time = t1._time;\n      t0 = t1, t1 = t1._next;\n    } else {\n      t2 = t1._next, t1._next = null;\n      t1 = t0 ? t0._next = t2 : taskHead = t2;\n    }\n  }\n  taskTail = t0;\n  sleep(time);\n}\n\nfunction sleep(time) {\n  if (frame) return; // Soonest alarm already set, or will be.\n  if (timeout) timeout = clearTimeout(timeout);\n  var delay = time - clockNow; // Strictly less than if we recomputed clockNow.\n  if (delay > 24) {\n    if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);\n    if (interval) interval = clearInterval(interval);\n  } else {\n    if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);\n    frame = 1, setFrame(wake);\n  }\n}\n","import {Timer} from \"./timer\";\n\nexport default function(callback, delay, time) {\n  var t = new Timer;\n  delay = delay == null ? 0 : +delay;\n  t.restart(function(elapsed) {\n    t.stop();\n    callback(elapsed + delay);\n  }, delay, time);\n  return t;\n}\n","import {Timer, now} from \"./timer\";\n\nexport default function(callback, delay, time) {\n  var t = new Timer, total = delay;\n  if (delay == null) return t.restart(callback, delay, time), t;\n  delay = +delay, time = time == null ? now() : +time;\n  t.restart(function tick(elapsed) {\n    elapsed += total;\n    t.restart(tick, total += delay, time);\n    callback(elapsed);\n  }, delay, time);\n  return t;\n}\n","import {dispatch} from \"d3-dispatch\";\nimport {timer, timeout} from \"d3-timer\";\n\nvar emptyOn = dispatch(\"start\", \"end\", \"interrupt\");\nvar emptyTween = [];\n\nexport var CREATED = 0;\nexport var SCHEDULED = 1;\nexport var STARTING = 2;\nexport var STARTED = 3;\nexport var RUNNING = 4;\nexport var ENDING = 5;\nexport var ENDED = 6;\n\nexport default function(node, name, id, index, group, timing) {\n  var schedules = node.__transition;\n  if (!schedules) node.__transition = {};\n  else if (id in schedules) return;\n  create(node, id, {\n    name: name,\n    index: index, // For context during callback.\n    group: group, // For context during callback.\n    on: emptyOn,\n    tween: emptyTween,\n    time: timing.time,\n    delay: timing.delay,\n    duration: timing.duration,\n    ease: timing.ease,\n    timer: null,\n    state: CREATED\n  });\n}\n\nexport function init(node, id) {\n  var schedule = get(node, id);\n  if (schedule.state > CREATED) throw new Error(\"too late; already scheduled\");\n  return schedule;\n}\n\nexport function set(node, id) {\n  var schedule = get(node, id);\n  if (schedule.state > STARTING) throw new Error(\"too late; already started\");\n  return schedule;\n}\n\nexport function get(node, id) {\n  var schedule = node.__transition;\n  if (!schedule || !(schedule = schedule[id])) throw new Error(\"transition not found\");\n  return schedule;\n}\n\nfunction create(node, id, self) {\n  var schedules = node.__transition,\n      tween;\n\n  // Initialize the self timer when the transition is created.\n  // Note the actual delay is not known until the first callback!\n  schedules[id] = self;\n  self.timer = timer(schedule, 0, self.time);\n\n  function schedule(elapsed) {\n    self.state = SCHEDULED;\n    self.timer.restart(start, self.delay, self.time);\n\n    // If the elapsed delay is less than our first sleep, start immediately.\n    if (self.delay <= elapsed) start(elapsed - self.delay);\n  }\n\n  function start(elapsed) {\n    var i, j, n, o;\n\n    // If the state is not SCHEDULED, then we previously errored on start.\n    if (self.state !== SCHEDULED) return stop();\n\n    for (i in schedules) {\n      o = schedules[i];\n      if (o.name !== self.name) continue;\n\n      // While this element already has a starting transition during this frame,\n      // defer starting an interrupting transition until that transition has a\n      // chance to tick (and possibly end); see d3/d3-transition#54!\n      if (o.state === STARTED) return timeout(start);\n\n      // Interrupt the active transition, if any.\n      // Dispatch the interrupt event.\n      if (o.state === RUNNING) {\n        o.state = ENDED;\n        o.timer.stop();\n        o.on.call(\"interrupt\", node, node.__data__, o.index, o.group);\n        delete schedules[i];\n      }\n\n      // Cancel any pre-empted transitions. No interrupt event is dispatched\n      // because the cancelled transitions never started. Note that this also\n      // removes this transition from the pending list!\n      else if (+i < id) {\n        o.state = ENDED;\n        o.timer.stop();\n        delete schedules[i];\n      }\n    }\n\n    // Defer the first tick to end of the current frame; see d3/d3#1576.\n    // Note the transition may be canceled after start and before the first tick!\n    // Note this must be scheduled before the start event; see d3/d3-transition#16!\n    // Assuming this is successful, subsequent callbacks go straight to tick.\n    timeout(function() {\n      if (self.state === STARTED) {\n        self.state = RUNNING;\n        self.timer.restart(tick, self.delay, self.time);\n        tick(elapsed);\n      }\n    });\n\n    // Dispatch the start event.\n    // Note this must be done before the tween are initialized.\n    self.state = STARTING;\n    self.on.call(\"start\", node, node.__data__, self.index, self.group);\n    if (self.state !== STARTING) return; // interrupted\n    self.state = STARTED;\n\n    // Initialize the tween, deleting null tween.\n    tween = new Array(n = self.tween.length);\n    for (i = 0, j = -1; i < n; ++i) {\n      if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {\n        tween[++j] = o;\n      }\n    }\n    tween.length = j + 1;\n  }\n\n  function tick(elapsed) {\n    var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),\n        i = -1,\n        n = tween.length;\n\n    while (++i < n) {\n      tween[i].call(null, t);\n    }\n\n    // Dispatch the end event.\n    if (self.state === ENDING) {\n      self.on.call(\"end\", node, node.__data__, self.index, self.group);\n      stop();\n    }\n  }\n\n  function stop() {\n    self.state = ENDED;\n    self.timer.stop();\n    delete schedules[id];\n    for (var i in schedules) return; // eslint-disable-line no-unused-vars\n    delete node.__transition;\n  }\n}\n","import {STARTING, ENDING, ENDED} from \"./transition/schedule\";\n\nexport default function(node, name) {\n  var schedules = node.__transition,\n      schedule,\n      active,\n      empty = true,\n      i;\n\n  if (!schedules) return;\n\n  name = name == null ? null : name + \"\";\n\n  for (i in schedules) {\n    if ((schedule = schedules[i]).name !== name) { empty = false; continue; }\n    active = schedule.state > STARTING && schedule.state < ENDING;\n    schedule.state = ENDED;\n    schedule.timer.stop();\n    if (active) schedule.on.call(\"interrupt\", node, node.__data__, schedule.index, schedule.group);\n    delete schedules[i];\n  }\n\n  if (empty) delete node.__transition;\n}\n","import {get, set} from \"./schedule\";\n\nfunction tweenRemove(id, name) {\n  var tween0, tween1;\n  return function() {\n    var schedule = set(this, id),\n        tween = schedule.tween;\n\n    // If this node shared tween with the previous node,\n    // just assign the updated shared tween and we’re done!\n    // Otherwise, copy-on-write.\n    if (tween !== tween0) {\n      tween1 = tween0 = tween;\n      for (var i = 0, n = tween1.length; i < n; ++i) {\n        if (tween1[i].name === name) {\n          tween1 = tween1.slice();\n          tween1.splice(i, 1);\n          break;\n        }\n      }\n    }\n\n    schedule.tween = tween1;\n  };\n}\n\nfunction tweenFunction(id, name, value) {\n  var tween0, tween1;\n  if (typeof value !== \"function\") throw new Error;\n  return function() {\n    var schedule = set(this, id),\n        tween = schedule.tween;\n\n    // If this node shared tween with the previous node,\n    // just assign the updated shared tween and we’re done!\n    // Otherwise, copy-on-write.\n    if (tween !== tween0) {\n      tween1 = (tween0 = tween).slice();\n      for (var t = {name: name, value: value}, i = 0, n = tween1.length; i < n; ++i) {\n        if (tween1[i].name === name) {\n          tween1[i] = t;\n          break;\n        }\n      }\n      if (i === n) tween1.push(t);\n    }\n\n    schedule.tween = tween1;\n  };\n}\n\nexport default function(name, value) {\n  var id = this._id;\n\n  name += \"\";\n\n  if (arguments.length < 2) {\n    var tween = get(this.node(), id).tween;\n    for (var i = 0, n = tween.length, t; i < n; ++i) {\n      if ((t = tween[i]).name === name) {\n        return t.value;\n      }\n    }\n    return null;\n  }\n\n  return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));\n}\n\nexport function tweenValue(transition, name, value) {\n  var id = transition._id;\n\n  transition.each(function() {\n    var schedule = set(this, id);\n    (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);\n  });\n\n  return function(node) {\n    return get(node, id).value[name];\n  };\n}\n","import {color} from \"d3-color\";\nimport {interpolateNumber, interpolateRgb, interpolateString} from \"d3-interpolate\";\n\nexport default function(a, b) {\n  var c;\n  return (typeof b === \"number\" ? interpolateNumber\n      : b instanceof color ? interpolateRgb\n      : (c = color(b)) ? (b = c, interpolateRgb)\n      : interpolateString)(a, b);\n}\n","function removeFunction(id) {\n  return function() {\n    var parent = this.parentNode;\n    for (var i in this.__transition) if (+i !== id) return;\n    if (parent) parent.removeChild(this);\n  };\n}\n\nexport default function() {\n  return this.on(\"end.remove\", removeFunction(this._id));\n}\n","import {selection} from \"d3-selection\";\n\nvar Selection = selection.prototype.constructor;\n\nexport default function() {\n  return new Selection(this._groups, this._parents);\n}\n","import {tweenValue} from \"./tween\";\n\nfunction textConstant(value) {\n  return function() {\n    this.textContent = value;\n  };\n}\n\nfunction textFunction(value) {\n  return function() {\n    var value1 = value(this);\n    this.textContent = value1 == null ? \"\" : value1;\n  };\n}\n\nexport default function(value) {\n  return this.tween(\"text\", typeof value === \"function\"\n      ? textFunction(tweenValue(this, \"text\", value))\n      : textConstant(value == null ? \"\" : value + \"\"));\n}\n","import {selection} from \"d3-selection\";\nimport transition_attr from \"./attr\";\nimport transition_attrTween from \"./attrTween\";\nimport transition_delay from \"./delay\";\nimport transition_duration from \"./duration\";\nimport transition_ease from \"./ease\";\nimport transition_filter from \"./filter\";\nimport transition_merge from \"./merge\";\nimport transition_on from \"./on\";\nimport transition_remove from \"./remove\";\nimport transition_select from \"./select\";\nimport transition_selectAll from \"./selectAll\";\nimport transition_selection from \"./selection\";\nimport transition_style from \"./style\";\nimport transition_styleTween from \"./styleTween\";\nimport transition_text from \"./text\";\nimport transition_transition from \"./transition\";\nimport transition_tween from \"./tween\";\n\nvar id = 0;\n\nexport function Transition(groups, parents, name, id) {\n  this._groups = groups;\n  this._parents = parents;\n  this._name = name;\n  this._id = id;\n}\n\nexport default function transition(name) {\n  return selection().transition(name);\n}\n\nexport function newId() {\n  return ++id;\n}\n\nvar selection_prototype = selection.prototype;\n\nTransition.prototype = transition.prototype = {\n  constructor: Transition,\n  select: transition_select,\n  selectAll: transition_selectAll,\n  filter: transition_filter,\n  merge: transition_merge,\n  selection: transition_selection,\n  transition: transition_transition,\n  call: selection_prototype.call,\n  nodes: selection_prototype.nodes,\n  node: selection_prototype.node,\n  size: selection_prototype.size,\n  empty: selection_prototype.empty,\n  each: selection_prototype.each,\n  on: transition_on,\n  attr: transition_attr,\n  attrTween: transition_attrTween,\n  style: transition_style,\n  styleTween: transition_styleTween,\n  text: transition_text,\n  remove: transition_remove,\n  tween: transition_tween,\n  delay: transition_delay,\n  duration: transition_duration,\n  ease: transition_ease\n};\n","export function linear(t) {\n  return +t;\n}\n","export function quadIn(t) {\n  return t * t;\n}\n\nexport function quadOut(t) {\n  return t * (2 - t);\n}\n\nexport function quadInOut(t) {\n  return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;\n}\n","export function cubicIn(t) {\n  return t * t * t;\n}\n\nexport function cubicOut(t) {\n  return --t * t * t + 1;\n}\n\nexport function cubicInOut(t) {\n  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;\n}\n","import {selector} from \"d3-selection\";\nimport {Transition} from \"./index\";\nimport schedule, {get} from \"./schedule\";\n\nexport default function(select) {\n  var name = this._name,\n      id = this._id;\n\n  if (typeof select !== \"function\") select = selector(select);\n\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {\n      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {\n        if (\"__data__\" in node) subnode.__data__ = node.__data__;\n        subgroup[i] = subnode;\n        schedule(subgroup[i], name, id, i, subgroup, get(node, id));\n      }\n    }\n  }\n\n  return new Transition(subgroups, this._parents, name, id);\n}\n","import {selectorAll} from \"d3-selection\";\nimport {Transition} from \"./index\";\nimport schedule, {get} from \"./schedule\";\n\nexport default function(select) {\n  var name = this._name,\n      id = this._id;\n\n  if (typeof select !== \"function\") select = selectorAll(select);\n\n  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        for (var children = select.call(node, node.__data__, i, group), child, inherit = get(node, id), k = 0, l = children.length; k < l; ++k) {\n          if (child = children[k]) {\n            schedule(child, name, id, k, children, inherit);\n          }\n        }\n        subgroups.push(children);\n        parents.push(node);\n      }\n    }\n  }\n\n  return new Transition(subgroups, parents, name, id);\n}\n","import {matcher} from \"d3-selection\";\nimport {Transition} from \"./index\";\n\nexport default function(match) {\n  if (typeof match !== \"function\") match = matcher(match);\n\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {\n      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {\n        subgroup.push(node);\n      }\n    }\n  }\n\n  return new Transition(subgroups, this._parents, this._name, this._id);\n}\n","import {Transition} from \"./index\";\n\nexport default function(transition) {\n  if (transition._id !== this._id) throw new Error;\n\n  for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {\n    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {\n      if (node = group0[i] || group1[i]) {\n        merge[i] = node;\n      }\n    }\n  }\n\n  for (; j < m0; ++j) {\n    merges[j] = groups0[j];\n  }\n\n  return new Transition(merges, this._parents, this._name, this._id);\n}\n","import {Transition, newId} from \"./index\";\nimport schedule, {get} from \"./schedule\";\n\nexport default function() {\n  var name = this._name,\n      id0 = this._id,\n      id1 = newId();\n\n  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        var inherit = get(node, id0);\n        schedule(node, name, id1, i, group, {\n          time: inherit.time + inherit.delay + inherit.duration,\n          delay: 0,\n          duration: inherit.duration,\n          ease: inherit.ease\n        });\n      }\n    }\n  }\n\n  return new Transition(groups, this._parents, name, id1);\n}\n","import {get, set, init} from \"./schedule\";\n\nfunction start(name) {\n  return (name + \"\").trim().split(/^|\\s+/).every(function(t) {\n    var i = t.indexOf(\".\");\n    if (i >= 0) t = t.slice(0, i);\n    return !t || t === \"start\";\n  });\n}\n\nfunction onFunction(id, name, listener) {\n  var on0, on1, sit = start(name) ? init : set;\n  return function() {\n    var schedule = sit(this, id),\n        on = schedule.on;\n\n    // If this node shared a dispatch with the previous node,\n    // just assign the updated shared dispatch and we’re done!\n    // Otherwise, copy-on-write.\n    if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);\n\n    schedule.on = on1;\n  };\n}\n\nexport default function(name, listener) {\n  var id = this._id;\n\n  return arguments.length < 2\n      ? get(this.node(), id).on.on(name)\n      : this.each(onFunction(id, name, listener));\n}\n","import {interpolateTransformSvg as interpolateTransform} from \"d3-interpolate\";\nimport {namespace} from \"d3-selection\";\nimport {tweenValue} from \"./tween\";\nimport interpolate from \"./interpolate\";\n\nfunction attrRemove(name) {\n  return function() {\n    this.removeAttribute(name);\n  };\n}\n\nfunction attrRemoveNS(fullname) {\n  return function() {\n    this.removeAttributeNS(fullname.space, fullname.local);\n  };\n}\n\nfunction attrConstant(name, interpolate, value1) {\n  var value00,\n      interpolate0;\n  return function() {\n    var value0 = this.getAttribute(name);\n    return value0 === value1 ? null\n        : value0 === value00 ? interpolate0\n        : interpolate0 = interpolate(value00 = value0, value1);\n  };\n}\n\nfunction attrConstantNS(fullname, interpolate, value1) {\n  var value00,\n      interpolate0;\n  return function() {\n    var value0 = this.getAttributeNS(fullname.space, fullname.local);\n    return value0 === value1 ? null\n        : value0 === value00 ? interpolate0\n        : interpolate0 = interpolate(value00 = value0, value1);\n  };\n}\n\nfunction attrFunction(name, interpolate, value) {\n  var value00,\n      value10,\n      interpolate0;\n  return function() {\n    var value0, value1 = value(this);\n    if (value1 == null) return void this.removeAttribute(name);\n    value0 = this.getAttribute(name);\n    return value0 === value1 ? null\n        : value0 === value00 && value1 === value10 ? interpolate0\n        : interpolate0 = interpolate(value00 = value0, value10 = value1);\n  };\n}\n\nfunction attrFunctionNS(fullname, interpolate, value) {\n  var value00,\n      value10,\n      interpolate0;\n  return function() {\n    var value0, value1 = value(this);\n    if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);\n    value0 = this.getAttributeNS(fullname.space, fullname.local);\n    return value0 === value1 ? null\n        : value0 === value00 && value1 === value10 ? interpolate0\n        : interpolate0 = interpolate(value00 = value0, value10 = value1);\n  };\n}\n\nexport default function(name, value) {\n  var fullname = namespace(name), i = fullname === \"transform\" ? interpolateTransform : interpolate;\n  return this.attrTween(name, typeof value === \"function\"\n      ? (fullname.local ? attrFunctionNS : attrFunction)(fullname, i, tweenValue(this, \"attr.\" + name, value))\n      : value == null ? (fullname.local ? attrRemoveNS : attrRemove)(fullname)\n      : (fullname.local ? attrConstantNS : attrConstant)(fullname, i, value + \"\"));\n}\n","import {namespace} from \"d3-selection\";\n\nfunction attrTweenNS(fullname, value) {\n  function tween() {\n    var node = this, i = value.apply(node, arguments);\n    return i && function(t) {\n      node.setAttributeNS(fullname.space, fullname.local, i(t));\n    };\n  }\n  tween._value = value;\n  return tween;\n}\n\nfunction attrTween(name, value) {\n  function tween() {\n    var node = this, i = value.apply(node, arguments);\n    return i && function(t) {\n      node.setAttribute(name, i(t));\n    };\n  }\n  tween._value = value;\n  return tween;\n}\n\nexport default function(name, value) {\n  var key = \"attr.\" + name;\n  if (arguments.length < 2) return (key = this.tween(key)) && key._value;\n  if (value == null) return this.tween(key, null);\n  if (typeof value !== \"function\") throw new Error;\n  var fullname = namespace(name);\n  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));\n}\n","import {interpolateTransformCss as interpolateTransform} from \"d3-interpolate\";\nimport {style} from \"d3-selection\";\nimport {tweenValue} from \"./tween\";\nimport interpolate from \"./interpolate\";\n\nfunction styleRemove(name, interpolate) {\n  var value00,\n      value10,\n      interpolate0;\n  return function() {\n    var value0 = style(this, name),\n        value1 = (this.style.removeProperty(name), style(this, name));\n    return value0 === value1 ? null\n        : value0 === value00 && value1 === value10 ? interpolate0\n        : interpolate0 = interpolate(value00 = value0, value10 = value1);\n  };\n}\n\nfunction styleRemoveEnd(name) {\n  return function() {\n    this.style.removeProperty(name);\n  };\n}\n\nfunction styleConstant(name, interpolate, value1) {\n  var value00,\n      interpolate0;\n  return function() {\n    var value0 = style(this, name);\n    return value0 === value1 ? null\n        : value0 === value00 ? interpolate0\n        : interpolate0 = interpolate(value00 = value0, value1);\n  };\n}\n\nfunction styleFunction(name, interpolate, value) {\n  var value00,\n      value10,\n      interpolate0;\n  return function() {\n    var value0 = style(this, name),\n        value1 = value(this);\n    if (value1 == null) value1 = (this.style.removeProperty(name), style(this, name));\n    return value0 === value1 ? null\n        : value0 === value00 && value1 === value10 ? interpolate0\n        : interpolate0 = interpolate(value00 = value0, value10 = value1);\n  };\n}\n\nexport default function(name, value, priority) {\n  var i = (name += \"\") === \"transform\" ? interpolateTransform : interpolate;\n  return value == null ? this\n          .styleTween(name, styleRemove(name, i))\n          .on(\"end.style.\" + name, styleRemoveEnd(name))\n      : this.styleTween(name, typeof value === \"function\"\n          ? styleFunction(name, i, tweenValue(this, \"style.\" + name, value))\n          : styleConstant(name, i, value + \"\"), priority);\n}\n","function styleTween(name, value, priority) {\n  function tween() {\n    var node = this, i = value.apply(node, arguments);\n    return i && function(t) {\n      node.style.setProperty(name, i(t), priority);\n    };\n  }\n  tween._value = value;\n  return tween;\n}\n\nexport default function(name, value, priority) {\n  var key = \"style.\" + (name += \"\");\n  if (arguments.length < 2) return (key = this.tween(key)) && key._value;\n  if (value == null) return this.tween(key, null);\n  if (typeof value !== \"function\") throw new Error;\n  return this.tween(key, styleTween(name, value, priority == null ? \"\" : priority));\n}\n","import {get, init} from \"./schedule\";\n\nfunction delayFunction(id, value) {\n  return function() {\n    init(this, id).delay = +value.apply(this, arguments);\n  };\n}\n\nfunction delayConstant(id, value) {\n  return value = +value, function() {\n    init(this, id).delay = value;\n  };\n}\n\nexport default function(value) {\n  var id = this._id;\n\n  return arguments.length\n      ? this.each((typeof value === \"function\"\n          ? delayFunction\n          : delayConstant)(id, value))\n      : get(this.node(), id).delay;\n}\n","import {get, set} from \"./schedule\";\n\nfunction durationFunction(id, value) {\n  return function() {\n    set(this, id).duration = +value.apply(this, arguments);\n  };\n}\n\nfunction durationConstant(id, value) {\n  return value = +value, function() {\n    set(this, id).duration = value;\n  };\n}\n\nexport default function(value) {\n  var id = this._id;\n\n  return arguments.length\n      ? this.each((typeof value === \"function\"\n          ? durationFunction\n          : durationConstant)(id, value))\n      : get(this.node(), id).duration;\n}\n","import {get, set} from \"./schedule\";\n\nfunction easeConstant(id, value) {\n  if (typeof value !== \"function\") throw new Error;\n  return function() {\n    set(this, id).ease = value;\n  };\n}\n\nexport default function(value) {\n  var id = this._id;\n\n  return arguments.length\n      ? this.each(easeConstant(id, value))\n      : get(this.node(), id).ease;\n}\n","var exponent = 3;\n\nexport var polyIn = (function custom(e) {\n  e = +e;\n\n  function polyIn(t) {\n    return Math.pow(t, e);\n  }\n\n  polyIn.exponent = custom;\n\n  return polyIn;\n})(exponent);\n\nexport var polyOut = (function custom(e) {\n  e = +e;\n\n  function polyOut(t) {\n    return 1 - Math.pow(1 - t, e);\n  }\n\n  polyOut.exponent = custom;\n\n  return polyOut;\n})(exponent);\n\nexport var polyInOut = (function custom(e) {\n  e = +e;\n\n  function polyInOut(t) {\n    return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;\n  }\n\n  polyInOut.exponent = custom;\n\n  return polyInOut;\n})(exponent);\n","var pi = Math.PI,\n    halfPi = pi / 2;\n\nexport function sinIn(t) {\n  return 1 - Math.cos(t * halfPi);\n}\n\nexport function sinOut(t) {\n  return Math.sin(t * halfPi);\n}\n\nexport function sinInOut(t) {\n  return (1 - Math.cos(pi * t)) / 2;\n}\n","export function expIn(t) {\n  return Math.pow(2, 10 * t - 10);\n}\n\nexport function expOut(t) {\n  return 1 - Math.pow(2, -10 * t);\n}\n\nexport function expInOut(t) {\n  return ((t *= 2) <= 1 ? Math.pow(2, 10 * t - 10) : 2 - Math.pow(2, 10 - 10 * t)) / 2;\n}\n","export function circleIn(t) {\n  return 1 - Math.sqrt(1 - t * t);\n}\n\nexport function circleOut(t) {\n  return Math.sqrt(1 - --t * t);\n}\n\nexport function circleInOut(t) {\n  return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;\n}\n","var b1 = 4 / 11,\n    b2 = 6 / 11,\n    b3 = 8 / 11,\n    b4 = 3 / 4,\n    b5 = 9 / 11,\n    b6 = 10 / 11,\n    b7 = 15 / 16,\n    b8 = 21 / 22,\n    b9 = 63 / 64,\n    b0 = 1 / b1 / b1;\n\nexport function bounceIn(t) {\n  return 1 - bounceOut(1 - t);\n}\n\nexport function bounceOut(t) {\n  return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;\n}\n\nexport function bounceInOut(t) {\n  return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;\n}\n","var overshoot = 1.70158;\n\nexport var backIn = (function custom(s) {\n  s = +s;\n\n  function backIn(t) {\n    return t * t * ((s + 1) * t - s);\n  }\n\n  backIn.overshoot = custom;\n\n  return backIn;\n})(overshoot);\n\nexport var backOut = (function custom(s) {\n  s = +s;\n\n  function backOut(t) {\n    return --t * t * ((s + 1) * t + s) + 1;\n  }\n\n  backOut.overshoot = custom;\n\n  return backOut;\n})(overshoot);\n\nexport var backInOut = (function custom(s) {\n  s = +s;\n\n  function backInOut(t) {\n    return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2;\n  }\n\n  backInOut.overshoot = custom;\n\n  return backInOut;\n})(overshoot);\n","var tau = 2 * Math.PI,\n    amplitude = 1,\n    period = 0.3;\n\nexport var elasticIn = (function custom(a, p) {\n  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);\n\n  function elasticIn(t) {\n    return a * Math.pow(2, 10 * --t) * Math.sin((s - t) / p);\n  }\n\n  elasticIn.amplitude = function(a) { return custom(a, p * tau); };\n  elasticIn.period = function(p) { return custom(a, p); };\n\n  return elasticIn;\n})(amplitude, period);\n\nexport var elasticOut = (function custom(a, p) {\n  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);\n\n  function elasticOut(t) {\n    return 1 - a * Math.pow(2, -10 * (t = +t)) * Math.sin((t + s) / p);\n  }\n\n  elasticOut.amplitude = function(a) { return custom(a, p * tau); };\n  elasticOut.period = function(p) { return custom(a, p); };\n\n  return elasticOut;\n})(amplitude, period);\n\nexport var elasticInOut = (function custom(a, p) {\n  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);\n\n  function elasticInOut(t) {\n    return ((t = t * 2 - 1) < 0\n        ? a * Math.pow(2, 10 * t) * Math.sin((s - t) / p)\n        : 2 - a * Math.pow(2, -10 * t) * Math.sin((s + t) / p)) / 2;\n  }\n\n  elasticInOut.amplitude = function(a) { return custom(a, p * tau); };\n  elasticInOut.period = function(p) { return custom(a, p); };\n\n  return elasticInOut;\n})(amplitude, period);\n","import {Transition, newId} from \"../transition/index\";\nimport schedule from \"../transition/schedule\";\nimport {easeCubicInOut} from \"d3-ease\";\nimport {now} from \"d3-timer\";\n\nvar defaultTiming = {\n  time: null, // Set on use.\n  delay: 0,\n  duration: 250,\n  ease: easeCubicInOut\n};\n\nfunction inherit(node, id) {\n  var timing;\n  while (!(timing = node.__transition) || !(timing = timing[id])) {\n    if (!(node = node.parentNode)) {\n      return defaultTiming.time = now(), defaultTiming;\n    }\n  }\n  return timing;\n}\n\nexport default function(name) {\n  var id,\n      timing;\n\n  if (name instanceof Transition) {\n    id = name._id, name = name._name;\n  } else {\n    id = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + \"\";\n  }\n\n  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        schedule(node, name, id, i, group, timing || inherit(node, id));\n      }\n    }\n  }\n\n  return new Transition(groups, this._parents, name, id);\n}\n","import {selection} from \"d3-selection\";\nimport selection_interrupt from \"./interrupt\";\nimport selection_transition from \"./transition\";\n\nselection.prototype.interrupt = selection_interrupt;\nselection.prototype.transition = selection_transition;\n","import interrupt from \"../interrupt\";\n\nexport default function(name) {\n  return this.each(function() {\n    interrupt(this, name);\n  });\n}\n","import {Transition} from \"./transition/index\";\nimport {SCHEDULED} from \"./transition/schedule\";\n\nvar root = [null];\n\nexport default function(node, name) {\n  var schedules = node.__transition,\n      schedule,\n      i;\n\n  if (schedules) {\n    name = name == null ? null : name + \"\";\n    for (i in schedules) {\n      if ((schedule = schedules[i]).state > SCHEDULED && schedule.name === name) {\n        return new Transition([[node]], root, name, +i);\n      }\n    }\n  }\n\n  return null;\n}\n","export default function(x) {\n  return function() {\n    return x;\n  };\n}\n","export default function(target, type, selection) {\n  this.target = target;\n  this.type = type;\n  this.selection = selection;\n}\n","import {event} from \"d3-selection\";\n\nexport function nopropagation() {\n  event.stopImmediatePropagation();\n}\n\nexport default function() {\n  event.preventDefault();\n  event.stopImmediatePropagation();\n}\n","import {dispatch} from \"d3-dispatch\";\nimport {dragDisable, dragEnable} from \"d3-drag\";\nimport {interpolate} from \"d3-interpolate\";\nimport {customEvent, event, mouse, select} from \"d3-selection\";\nimport {interrupt} from \"d3-transition\";\nimport constant from \"./constant\";\nimport BrushEvent from \"./event\";\nimport noevent, {nopropagation} from \"./noevent\";\n\nvar MODE_DRAG = {name: \"drag\"},\n    MODE_SPACE = {name: \"space\"},\n    MODE_HANDLE = {name: \"handle\"},\n    MODE_CENTER = {name: \"center\"};\n\nvar X = {\n  name: \"x\",\n  handles: [\"e\", \"w\"].map(type),\n  input: function(x, e) { return x && [[x[0], e[0][1]], [x[1], e[1][1]]]; },\n  output: function(xy) { return xy && [xy[0][0], xy[1][0]]; }\n};\n\nvar Y = {\n  name: \"y\",\n  handles: [\"n\", \"s\"].map(type),\n  input: function(y, e) { return y && [[e[0][0], y[0]], [e[1][0], y[1]]]; },\n  output: function(xy) { return xy && [xy[0][1], xy[1][1]]; }\n};\n\nvar XY = {\n  name: \"xy\",\n  handles: [\"n\", \"e\", \"s\", \"w\", \"nw\", \"ne\", \"se\", \"sw\"].map(type),\n  input: function(xy) { return xy; },\n  output: function(xy) { return xy; }\n};\n\nvar cursors = {\n  overlay: \"crosshair\",\n  selection: \"move\",\n  n: \"ns-resize\",\n  e: \"ew-resize\",\n  s: \"ns-resize\",\n  w: \"ew-resize\",\n  nw: \"nwse-resize\",\n  ne: \"nesw-resize\",\n  se: \"nwse-resize\",\n  sw: \"nesw-resize\"\n};\n\nvar flipX = {\n  e: \"w\",\n  w: \"e\",\n  nw: \"ne\",\n  ne: \"nw\",\n  se: \"sw\",\n  sw: \"se\"\n};\n\nvar flipY = {\n  n: \"s\",\n  s: \"n\",\n  nw: \"sw\",\n  ne: \"se\",\n  se: \"ne\",\n  sw: \"nw\"\n};\n\nvar signsX = {\n  overlay: +1,\n  selection: +1,\n  n: null,\n  e: +1,\n  s: null,\n  w: -1,\n  nw: -1,\n  ne: +1,\n  se: +1,\n  sw: -1\n};\n\nvar signsY = {\n  overlay: +1,\n  selection: +1,\n  n: -1,\n  e: null,\n  s: +1,\n  w: null,\n  nw: -1,\n  ne: -1,\n  se: +1,\n  sw: +1\n};\n\nfunction type(t) {\n  return {type: t};\n}\n\n// Ignore right-click, since that should open the context menu.\nfunction defaultFilter() {\n  return !event.button;\n}\n\nfunction defaultExtent() {\n  var svg = this.ownerSVGElement || this;\n  return [[0, 0], [svg.width.baseVal.value, svg.height.baseVal.value]];\n}\n\n// Like d3.local, but with the name “__brush” rather than auto-generated.\nfunction local(node) {\n  while (!node.__brush) if (!(node = node.parentNode)) return;\n  return node.__brush;\n}\n\nfunction empty(extent) {\n  return extent[0][0] === extent[1][0]\n      || extent[0][1] === extent[1][1];\n}\n\nexport function brushSelection(node) {\n  var state = node.__brush;\n  return state ? state.dim.output(state.selection) : null;\n}\n\nexport function brushX() {\n  return brush(X);\n}\n\nexport function brushY() {\n  return brush(Y);\n}\n\nexport default function() {\n  return brush(XY);\n}\n\nfunction brush(dim) {\n  var extent = defaultExtent,\n      filter = defaultFilter,\n      listeners = dispatch(brush, \"start\", \"brush\", \"end\"),\n      handleSize = 6,\n      touchending;\n\n  function brush(group) {\n    var overlay = group\n        .property(\"__brush\", initialize)\n      .selectAll(\".overlay\")\n      .data([type(\"overlay\")]);\n\n    overlay.enter().append(\"rect\")\n        .attr(\"class\", \"overlay\")\n        .attr(\"pointer-events\", \"all\")\n        .attr(\"cursor\", cursors.overlay)\n      .merge(overlay)\n        .each(function() {\n          var extent = local(this).extent;\n          select(this)\n              .attr(\"x\", extent[0][0])\n              .attr(\"y\", extent[0][1])\n              .attr(\"width\", extent[1][0] - extent[0][0])\n              .attr(\"height\", extent[1][1] - extent[0][1]);\n        });\n\n    group.selectAll(\".selection\")\n      .data([type(\"selection\")])\n      .enter().append(\"rect\")\n        .attr(\"class\", \"selection\")\n        .attr(\"cursor\", cursors.selection)\n        .attr(\"fill\", \"#777\")\n        .attr(\"fill-opacity\", 0.3)\n        .attr(\"stroke\", \"#fff\")\n        .attr(\"shape-rendering\", \"crispEdges\");\n\n    var handle = group.selectAll(\".handle\")\n      .data(dim.handles, function(d) { return d.type; });\n\n    handle.exit().remove();\n\n    handle.enter().append(\"rect\")\n        .attr(\"class\", function(d) { return \"handle handle--\" + d.type; })\n        .attr(\"cursor\", function(d) { return cursors[d.type]; });\n\n    group\n        .each(redraw)\n        .attr(\"fill\", \"none\")\n        .attr(\"pointer-events\", \"all\")\n        .style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\")\n        .on(\"mousedown.brush touchstart.brush\", started);\n  }\n\n  brush.move = function(group, selection) {\n    if (group.selection) {\n      group\n          .on(\"start.brush\", function() { emitter(this, arguments).beforestart().start(); })\n          .on(\"interrupt.brush end.brush\", function() { emitter(this, arguments).end(); })\n          .tween(\"brush\", function() {\n            var that = this,\n                state = that.__brush,\n                emit = emitter(that, arguments),\n                selection0 = state.selection,\n                selection1 = dim.input(typeof selection === \"function\" ? selection.apply(this, arguments) : selection, state.extent),\n                i = interpolate(selection0, selection1);\n\n            function tween(t) {\n              state.selection = t === 1 && empty(selection1) ? null : i(t);\n              redraw.call(that);\n              emit.brush();\n            }\n\n            return selection0 && selection1 ? tween : tween(1);\n          });\n    } else {\n      group\n          .each(function() {\n            var that = this,\n                args = arguments,\n                state = that.__brush,\n                selection1 = dim.input(typeof selection === \"function\" ? selection.apply(that, args) : selection, state.extent),\n                emit = emitter(that, args).beforestart();\n\n            interrupt(that);\n            state.selection = selection1 == null || empty(selection1) ? null : selection1;\n            redraw.call(that);\n            emit.start().brush().end();\n          });\n    }\n  };\n\n  function redraw() {\n    var group = select(this),\n        selection = local(this).selection;\n\n    if (selection) {\n      group.selectAll(\".selection\")\n          .style(\"display\", null)\n          .attr(\"x\", selection[0][0])\n          .attr(\"y\", selection[0][1])\n          .attr(\"width\", selection[1][0] - selection[0][0])\n          .attr(\"height\", selection[1][1] - selection[0][1]);\n\n      group.selectAll(\".handle\")\n          .style(\"display\", null)\n          .attr(\"x\", function(d) { return d.type[d.type.length - 1] === \"e\" ? selection[1][0] - handleSize / 2 : selection[0][0] - handleSize / 2; })\n          .attr(\"y\", function(d) { return d.type[0] === \"s\" ? selection[1][1] - handleSize / 2 : selection[0][1] - handleSize / 2; })\n          .attr(\"width\", function(d) { return d.type === \"n\" || d.type === \"s\" ? selection[1][0] - selection[0][0] + handleSize : handleSize; })\n          .attr(\"height\", function(d) { return d.type === \"e\" || d.type === \"w\" ? selection[1][1] - selection[0][1] + handleSize : handleSize; });\n    }\n\n    else {\n      group.selectAll(\".selection,.handle\")\n          .style(\"display\", \"none\")\n          .attr(\"x\", null)\n          .attr(\"y\", null)\n          .attr(\"width\", null)\n          .attr(\"height\", null);\n    }\n  }\n\n  function emitter(that, args) {\n    return that.__brush.emitter || new Emitter(that, args);\n  }\n\n  function Emitter(that, args) {\n    this.that = that;\n    this.args = args;\n    this.state = that.__brush;\n    this.active = 0;\n  }\n\n  Emitter.prototype = {\n    beforestart: function() {\n      if (++this.active === 1) this.state.emitter = this, this.starting = true;\n      return this;\n    },\n    start: function() {\n      if (this.starting) this.starting = false, this.emit(\"start\");\n      return this;\n    },\n    brush: function() {\n      this.emit(\"brush\");\n      return this;\n    },\n    end: function() {\n      if (--this.active === 0) delete this.state.emitter, this.emit(\"end\");\n      return this;\n    },\n    emit: function(type) {\n      customEvent(new BrushEvent(brush, type, dim.output(this.state.selection)), listeners.apply, listeners, [type, this.that, this.args]);\n    }\n  };\n\n  function started() {\n    if (event.touches) { if (event.changedTouches.length < event.touches.length) return noevent(); }\n    else if (touchending) return;\n    if (!filter.apply(this, arguments)) return;\n\n    var that = this,\n        type = event.target.__data__.type,\n        mode = (event.metaKey ? type = \"overlay\" : type) === \"selection\" ? MODE_DRAG : (event.altKey ? MODE_CENTER : MODE_HANDLE),\n        signX = dim === Y ? null : signsX[type],\n        signY = dim === X ? null : signsY[type],\n        state = local(that),\n        extent = state.extent,\n        selection = state.selection,\n        W = extent[0][0], w0, w1,\n        N = extent[0][1], n0, n1,\n        E = extent[1][0], e0, e1,\n        S = extent[1][1], s0, s1,\n        dx,\n        dy,\n        moving,\n        shifting = signX && signY && event.shiftKey,\n        lockX,\n        lockY,\n        point0 = mouse(that),\n        point = point0,\n        emit = emitter(that, arguments).beforestart();\n\n    if (type === \"overlay\") {\n      state.selection = selection = [\n        [w0 = dim === Y ? W : point0[0], n0 = dim === X ? N : point0[1]],\n        [e0 = dim === Y ? E : w0, s0 = dim === X ? S : n0]\n      ];\n    } else {\n      w0 = selection[0][0];\n      n0 = selection[0][1];\n      e0 = selection[1][0];\n      s0 = selection[1][1];\n    }\n\n    w1 = w0;\n    n1 = n0;\n    e1 = e0;\n    s1 = s0;\n\n    var group = select(that)\n        .attr(\"pointer-events\", \"none\");\n\n    var overlay = group.selectAll(\".overlay\")\n        .attr(\"cursor\", cursors[type]);\n\n    if (event.touches) {\n      group\n          .on(\"touchmove.brush\", moved, true)\n          .on(\"touchend.brush touchcancel.brush\", ended, true);\n    } else {\n      var view = select(event.view)\n          .on(\"keydown.brush\", keydowned, true)\n          .on(\"keyup.brush\", keyupped, true)\n          .on(\"mousemove.brush\", moved, true)\n          .on(\"mouseup.brush\", ended, true);\n\n      dragDisable(event.view);\n    }\n\n    nopropagation();\n    interrupt(that);\n    redraw.call(that);\n    emit.start();\n\n    function moved() {\n      var point1 = mouse(that);\n      if (shifting && !lockX && !lockY) {\n        if (Math.abs(point1[0] - point[0]) > Math.abs(point1[1] - point[1])) lockY = true;\n        else lockX = true;\n      }\n      point = point1;\n      moving = true;\n      noevent();\n      move();\n    }\n\n    function move() {\n      var t;\n\n      dx = point[0] - point0[0];\n      dy = point[1] - point0[1];\n\n      switch (mode) {\n        case MODE_SPACE:\n        case MODE_DRAG: {\n          if (signX) dx = Math.max(W - w0, Math.min(E - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;\n          if (signY) dy = Math.max(N - n0, Math.min(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;\n          break;\n        }\n        case MODE_HANDLE: {\n          if (signX < 0) dx = Math.max(W - w0, Math.min(E - w0, dx)), w1 = w0 + dx, e1 = e0;\n          else if (signX > 0) dx = Math.max(W - e0, Math.min(E - e0, dx)), w1 = w0, e1 = e0 + dx;\n          if (signY < 0) dy = Math.max(N - n0, Math.min(S - n0, dy)), n1 = n0 + dy, s1 = s0;\n          else if (signY > 0) dy = Math.max(N - s0, Math.min(S - s0, dy)), n1 = n0, s1 = s0 + dy;\n          break;\n        }\n        case MODE_CENTER: {\n          if (signX) w1 = Math.max(W, Math.min(E, w0 - dx * signX)), e1 = Math.max(W, Math.min(E, e0 + dx * signX));\n          if (signY) n1 = Math.max(N, Math.min(S, n0 - dy * signY)), s1 = Math.max(N, Math.min(S, s0 + dy * signY));\n          break;\n        }\n      }\n\n      if (e1 < w1) {\n        signX *= -1;\n        t = w0, w0 = e0, e0 = t;\n        t = w1, w1 = e1, e1 = t;\n        if (type in flipX) overlay.attr(\"cursor\", cursors[type = flipX[type]]);\n      }\n\n      if (s1 < n1) {\n        signY *= -1;\n        t = n0, n0 = s0, s0 = t;\n        t = n1, n1 = s1, s1 = t;\n        if (type in flipY) overlay.attr(\"cursor\", cursors[type = flipY[type]]);\n      }\n\n      if (state.selection) selection = state.selection; // May be set by brush.move!\n      if (lockX) w1 = selection[0][0], e1 = selection[1][0];\n      if (lockY) n1 = selection[0][1], s1 = selection[1][1];\n\n      if (selection[0][0] !== w1\n          || selection[0][1] !== n1\n          || selection[1][0] !== e1\n          || selection[1][1] !== s1) {\n        state.selection = [[w1, n1], [e1, s1]];\n        redraw.call(that);\n        emit.brush();\n      }\n    }\n\n    function ended() {\n      nopropagation();\n      if (event.touches) {\n        if (event.touches.length) return;\n        if (touchending) clearTimeout(touchending);\n        touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!\n        group.on(\"touchmove.brush touchend.brush touchcancel.brush\", null);\n      } else {\n        dragEnable(event.view, moving);\n        view.on(\"keydown.brush keyup.brush mousemove.brush mouseup.brush\", null);\n      }\n      group.attr(\"pointer-events\", \"all\");\n      overlay.attr(\"cursor\", cursors.overlay);\n      if (state.selection) selection = state.selection; // May be set by brush.move (on start)!\n      if (empty(selection)) state.selection = null, redraw.call(that);\n      emit.end();\n    }\n\n    function keydowned() {\n      switch (event.keyCode) {\n        case 16: { // SHIFT\n          shifting = signX && signY;\n          break;\n        }\n        case 18: { // ALT\n          if (mode === MODE_HANDLE) {\n            if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;\n            if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;\n            mode = MODE_CENTER;\n            move();\n          }\n          break;\n        }\n        case 32: { // SPACE; takes priority over ALT\n          if (mode === MODE_HANDLE || mode === MODE_CENTER) {\n            if (signX < 0) e0 = e1 - dx; else if (signX > 0) w0 = w1 - dx;\n            if (signY < 0) s0 = s1 - dy; else if (signY > 0) n0 = n1 - dy;\n            mode = MODE_SPACE;\n            overlay.attr(\"cursor\", cursors.selection);\n            move();\n          }\n          break;\n        }\n        default: return;\n      }\n      noevent();\n    }\n\n    function keyupped() {\n      switch (event.keyCode) {\n        case 16: { // SHIFT\n          if (shifting) {\n            lockX = lockY = shifting = false;\n            move();\n          }\n          break;\n        }\n        case 18: { // ALT\n          if (mode === MODE_CENTER) {\n            if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;\n            if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;\n            mode = MODE_HANDLE;\n            move();\n          }\n          break;\n        }\n        case 32: { // SPACE\n          if (mode === MODE_SPACE) {\n            if (event.altKey) {\n              if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;\n              if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;\n              mode = MODE_CENTER;\n            } else {\n              if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;\n              if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;\n              mode = MODE_HANDLE;\n            }\n            overlay.attr(\"cursor\", cursors[type]);\n            move();\n          }\n          break;\n        }\n        default: return;\n      }\n      noevent();\n    }\n  }\n\n  function initialize() {\n    var state = this.__brush || {selection: null};\n    state.extent = extent.apply(this, arguments);\n    state.dim = dim;\n    return state;\n  }\n\n  brush.extent = function(_) {\n    return arguments.length ? (extent = typeof _ === \"function\" ? _ : constant([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), brush) : extent;\n  };\n\n  brush.filter = function(_) {\n    return arguments.length ? (filter = typeof _ === \"function\" ? _ : constant(!!_), brush) : filter;\n  };\n\n  brush.handleSize = function(_) {\n    return arguments.length ? (handleSize = +_, brush) : handleSize;\n  };\n\n  brush.on = function() {\n    var value = listeners.on.apply(listeners, arguments);\n    return value === listeners ? brush : value;\n  };\n\n  return brush;\n}\n","export var cos = Math.cos;\nexport var sin = Math.sin;\nexport var pi = Math.PI;\nexport var halfPi = pi / 2;\nexport var tau = pi * 2;\nexport var max = Math.max;\n","import {range} from \"d3-array\";\nimport {max, tau} from \"./math\";\n\nfunction compareValue(compare) {\n  return function(a, b) {\n    return compare(\n      a.source.value + a.target.value,\n      b.source.value + b.target.value\n    );\n  };\n}\n\nexport default function() {\n  var padAngle = 0,\n      sortGroups = null,\n      sortSubgroups = null,\n      sortChords = null;\n\n  function chord(matrix) {\n    var n = matrix.length,\n        groupSums = [],\n        groupIndex = range(n),\n        subgroupIndex = [],\n        chords = [],\n        groups = chords.groups = new Array(n),\n        subgroups = new Array(n * n),\n        k,\n        x,\n        x0,\n        dx,\n        i,\n        j;\n\n    // Compute the sum.\n    k = 0, i = -1; while (++i < n) {\n      x = 0, j = -1; while (++j < n) {\n        x += matrix[i][j];\n      }\n      groupSums.push(x);\n      subgroupIndex.push(range(n));\n      k += x;\n    }\n\n    // Sort groups…\n    if (sortGroups) groupIndex.sort(function(a, b) {\n      return sortGroups(groupSums[a], groupSums[b]);\n    });\n\n    // Sort subgroups…\n    if (sortSubgroups) subgroupIndex.forEach(function(d, i) {\n      d.sort(function(a, b) {\n        return sortSubgroups(matrix[i][a], matrix[i][b]);\n      });\n    });\n\n    // Convert the sum to scaling factor for [0, 2pi].\n    // TODO Allow start and end angle to be specified?\n    // TODO Allow padding to be specified as percentage?\n    k = max(0, tau - padAngle * n) / k;\n    dx = k ? padAngle : tau / n;\n\n    // Compute the start and end angle for each group and subgroup.\n    // Note: Opera has a bug reordering object literal properties!\n    x = 0, i = -1; while (++i < n) {\n      x0 = x, j = -1; while (++j < n) {\n        var di = groupIndex[i],\n            dj = subgroupIndex[di][j],\n            v = matrix[di][dj],\n            a0 = x,\n            a1 = x += v * k;\n        subgroups[dj * n + di] = {\n          index: di,\n          subindex: dj,\n          startAngle: a0,\n          endAngle: a1,\n          value: v\n        };\n      }\n      groups[di] = {\n        index: di,\n        startAngle: x0,\n        endAngle: x,\n        value: groupSums[di]\n      };\n      x += dx;\n    }\n\n    // Generate chords for each (non-empty) subgroup-subgroup link.\n    i = -1; while (++i < n) {\n      j = i - 1; while (++j < n) {\n        var source = subgroups[j * n + i],\n            target = subgroups[i * n + j];\n        if (source.value || target.value) {\n          chords.push(source.value < target.value\n              ? {source: target, target: source}\n              : {source: source, target: target});\n        }\n      }\n    }\n\n    return sortChords ? chords.sort(sortChords) : chords;\n  }\n\n  chord.padAngle = function(_) {\n    return arguments.length ? (padAngle = max(0, _), chord) : padAngle;\n  };\n\n  chord.sortGroups = function(_) {\n    return arguments.length ? (sortGroups = _, chord) : sortGroups;\n  };\n\n  chord.sortSubgroups = function(_) {\n    return arguments.length ? (sortSubgroups = _, chord) : sortSubgroups;\n  };\n\n  chord.sortChords = function(_) {\n    return arguments.length ? (_ == null ? sortChords = null : (sortChords = compareValue(_))._ = _, chord) : sortChords && sortChords._;\n  };\n\n  return chord;\n}\n","export var slice = Array.prototype.slice;\n","export default function(x) {\n  return function() {\n    return x;\n  };\n}\n","var pi = Math.PI,\n    tau = 2 * pi,\n    epsilon = 1e-6,\n    tauEpsilon = tau - epsilon;\n\nfunction Path() {\n  this._x0 = this._y0 = // start of current subpath\n  this._x1 = this._y1 = null; // end of current subpath\n  this._ = \"\";\n}\n\nfunction path() {\n  return new Path;\n}\n\nPath.prototype = path.prototype = {\n  constructor: Path,\n  moveTo: function(x, y) {\n    this._ += \"M\" + (this._x0 = this._x1 = +x) + \",\" + (this._y0 = this._y1 = +y);\n  },\n  closePath: function() {\n    if (this._x1 !== null) {\n      this._x1 = this._x0, this._y1 = this._y0;\n      this._ += \"Z\";\n    }\n  },\n  lineTo: function(x, y) {\n    this._ += \"L\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  quadraticCurveTo: function(x1, y1, x, y) {\n    this._ += \"Q\" + (+x1) + \",\" + (+y1) + \",\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  bezierCurveTo: function(x1, y1, x2, y2, x, y) {\n    this._ += \"C\" + (+x1) + \",\" + (+y1) + \",\" + (+x2) + \",\" + (+y2) + \",\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  arcTo: function(x1, y1, x2, y2, r) {\n    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;\n    var x0 = this._x1,\n        y0 = this._y1,\n        x21 = x2 - x1,\n        y21 = y2 - y1,\n        x01 = x0 - x1,\n        y01 = y0 - y1,\n        l01_2 = x01 * x01 + y01 * y01;\n\n    // Is the radius negative? Error.\n    if (r < 0) throw new Error(\"negative radius: \" + r);\n\n    // Is this path empty? Move to (x1,y1).\n    if (this._x1 === null) {\n      this._ += \"M\" + (this._x1 = x1) + \",\" + (this._y1 = y1);\n    }\n\n    // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.\n    else if (!(l01_2 > epsilon));\n\n    // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?\n    // Equivalently, is (x1,y1) coincident with (x2,y2)?\n    // Or, is the radius zero? Line to (x1,y1).\n    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {\n      this._ += \"L\" + (this._x1 = x1) + \",\" + (this._y1 = y1);\n    }\n\n    // Otherwise, draw an arc!\n    else {\n      var x20 = x2 - x0,\n          y20 = y2 - y0,\n          l21_2 = x21 * x21 + y21 * y21,\n          l20_2 = x20 * x20 + y20 * y20,\n          l21 = Math.sqrt(l21_2),\n          l01 = Math.sqrt(l01_2),\n          l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),\n          t01 = l / l01,\n          t21 = l / l21;\n\n      // If the start tangent is not coincident with (x0,y0), line to.\n      if (Math.abs(t01 - 1) > epsilon) {\n        this._ += \"L\" + (x1 + t01 * x01) + \",\" + (y1 + t01 * y01);\n      }\n\n      this._ += \"A\" + r + \",\" + r + \",0,0,\" + (+(y01 * x20 > x01 * y20)) + \",\" + (this._x1 = x1 + t21 * x21) + \",\" + (this._y1 = y1 + t21 * y21);\n    }\n  },\n  arc: function(x, y, r, a0, a1, ccw) {\n    x = +x, y = +y, r = +r;\n    var dx = r * Math.cos(a0),\n        dy = r * Math.sin(a0),\n        x0 = x + dx,\n        y0 = y + dy,\n        cw = 1 ^ ccw,\n        da = ccw ? a0 - a1 : a1 - a0;\n\n    // Is the radius negative? Error.\n    if (r < 0) throw new Error(\"negative radius: \" + r);\n\n    // Is this path empty? Move to (x0,y0).\n    if (this._x1 === null) {\n      this._ += \"M\" + x0 + \",\" + y0;\n    }\n\n    // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).\n    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {\n      this._ += \"L\" + x0 + \",\" + y0;\n    }\n\n    // Is this arc empty? We’re done.\n    if (!r) return;\n\n    // Does the angle go the wrong way? Flip the direction.\n    if (da < 0) da = da % tau + tau;\n\n    // Is this a complete circle? Draw two arcs to complete the circle.\n    if (da > tauEpsilon) {\n      this._ += \"A\" + r + \",\" + r + \",0,1,\" + cw + \",\" + (x - dx) + \",\" + (y - dy) + \"A\" + r + \",\" + r + \",0,1,\" + cw + \",\" + (this._x1 = x0) + \",\" + (this._y1 = y0);\n    }\n\n    // Is this arc non-empty? Draw an arc!\n    else if (da > epsilon) {\n      this._ += \"A\" + r + \",\" + r + \",0,\" + (+(da >= pi)) + \",\" + cw + \",\" + (this._x1 = x + r * Math.cos(a1)) + \",\" + (this._y1 = y + r * Math.sin(a1));\n    }\n  },\n  rect: function(x, y, w, h) {\n    this._ += \"M\" + (this._x0 = this._x1 = +x) + \",\" + (this._y0 = this._y1 = +y) + \"h\" + (+w) + \"v\" + (+h) + \"h\" + (-w) + \"Z\";\n  },\n  toString: function() {\n    return this._;\n  }\n};\n\nexport default path;\n","import {slice} from \"./array\";\nimport constant from \"./constant\";\nimport {cos, halfPi, sin} from \"./math\";\nimport {path} from \"d3-path\";\n\nfunction defaultSource(d) {\n  return d.source;\n}\n\nfunction defaultTarget(d) {\n  return d.target;\n}\n\nfunction defaultRadius(d) {\n  return d.radius;\n}\n\nfunction defaultStartAngle(d) {\n  return d.startAngle;\n}\n\nfunction defaultEndAngle(d) {\n  return d.endAngle;\n}\n\nexport default function() {\n  var source = defaultSource,\n      target = defaultTarget,\n      radius = defaultRadius,\n      startAngle = defaultStartAngle,\n      endAngle = defaultEndAngle,\n      context = null;\n\n  function ribbon() {\n    var buffer,\n        argv = slice.call(arguments),\n        s = source.apply(this, argv),\n        t = target.apply(this, argv),\n        sr = +radius.apply(this, (argv[0] = s, argv)),\n        sa0 = startAngle.apply(this, argv) - halfPi,\n        sa1 = endAngle.apply(this, argv) - halfPi,\n        sx0 = sr * cos(sa0),\n        sy0 = sr * sin(sa0),\n        tr = +radius.apply(this, (argv[0] = t, argv)),\n        ta0 = startAngle.apply(this, argv) - halfPi,\n        ta1 = endAngle.apply(this, argv) - halfPi;\n\n    if (!context) context = buffer = path();\n\n    context.moveTo(sx0, sy0);\n    context.arc(0, 0, sr, sa0, sa1);\n    if (sa0 !== ta0 || sa1 !== ta1) { // TODO sr !== tr?\n      context.quadraticCurveTo(0, 0, tr * cos(ta0), tr * sin(ta0));\n      context.arc(0, 0, tr, ta0, ta1);\n    }\n    context.quadraticCurveTo(0, 0, sx0, sy0);\n    context.closePath();\n\n    if (buffer) return context = null, buffer + \"\" || null;\n  }\n\n  ribbon.radius = function(_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), ribbon) : radius;\n  };\n\n  ribbon.startAngle = function(_) {\n    return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant(+_), ribbon) : startAngle;\n  };\n\n  ribbon.endAngle = function(_) {\n    return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant(+_), ribbon) : endAngle;\n  };\n\n  ribbon.source = function(_) {\n    return arguments.length ? (source = _, ribbon) : source;\n  };\n\n  ribbon.target = function(_) {\n    return arguments.length ? (target = _, ribbon) : target;\n  };\n\n  ribbon.context = function(_) {\n    return arguments.length ? ((context = _ == null ? null : _), ribbon) : context;\n  };\n\n  return ribbon;\n}\n","export var prefix = \"$\";\n\nfunction Map() {}\n\nMap.prototype = map.prototype = {\n  constructor: Map,\n  has: function(key) {\n    return (prefix + key) in this;\n  },\n  get: function(key) {\n    return this[prefix + key];\n  },\n  set: function(key, value) {\n    this[prefix + key] = value;\n    return this;\n  },\n  remove: function(key) {\n    var property = prefix + key;\n    return property in this && delete this[property];\n  },\n  clear: function() {\n    for (var property in this) if (property[0] === prefix) delete this[property];\n  },\n  keys: function() {\n    var keys = [];\n    for (var property in this) if (property[0] === prefix) keys.push(property.slice(1));\n    return keys;\n  },\n  values: function() {\n    var values = [];\n    for (var property in this) if (property[0] === prefix) values.push(this[property]);\n    return values;\n  },\n  entries: function() {\n    var entries = [];\n    for (var property in this) if (property[0] === prefix) entries.push({key: property.slice(1), value: this[property]});\n    return entries;\n  },\n  size: function() {\n    var size = 0;\n    for (var property in this) if (property[0] === prefix) ++size;\n    return size;\n  },\n  empty: function() {\n    for (var property in this) if (property[0] === prefix) return false;\n    return true;\n  },\n  each: function(f) {\n    for (var property in this) if (property[0] === prefix) f(this[property], property.slice(1), this);\n  }\n};\n\nfunction map(object, f) {\n  var map = new Map;\n\n  // Copy constructor.\n  if (object instanceof Map) object.each(function(value, key) { map.set(key, value); });\n\n  // Index array by numeric index or specified key function.\n  else if (Array.isArray(object)) {\n    var i = -1,\n        n = object.length,\n        o;\n\n    if (f == null) while (++i < n) map.set(i, object[i]);\n    else while (++i < n) map.set(f(o = object[i], i, object), o);\n  }\n\n  // Convert object to map.\n  else if (object) for (var key in object) map.set(key, object[key]);\n\n  return map;\n}\n\nexport default map;\n","import map from \"./map\";\n\nexport default function() {\n  var keys = [],\n      sortKeys = [],\n      sortValues,\n      rollup,\n      nest;\n\n  function apply(array, depth, createResult, setResult) {\n    if (depth >= keys.length) {\n      if (sortValues != null) array.sort(sortValues);\n      return rollup != null ? rollup(array) : array;\n    }\n\n    var i = -1,\n        n = array.length,\n        key = keys[depth++],\n        keyValue,\n        value,\n        valuesByKey = map(),\n        values,\n        result = createResult();\n\n    while (++i < n) {\n      if (values = valuesByKey.get(keyValue = key(value = array[i]) + \"\")) {\n        values.push(value);\n      } else {\n        valuesByKey.set(keyValue, [value]);\n      }\n    }\n\n    valuesByKey.each(function(values, key) {\n      setResult(result, key, apply(values, depth, createResult, setResult));\n    });\n\n    return result;\n  }\n\n  function entries(map, depth) {\n    if (++depth > keys.length) return map;\n    var array, sortKey = sortKeys[depth - 1];\n    if (rollup != null && depth >= keys.length) array = map.entries();\n    else array = [], map.each(function(v, k) { array.push({key: k, values: entries(v, depth)}); });\n    return sortKey != null ? array.sort(function(a, b) { return sortKey(a.key, b.key); }) : array;\n  }\n\n  return nest = {\n    object: function(array) { return apply(array, 0, createObject, setObject); },\n    map: function(array) { return apply(array, 0, createMap, setMap); },\n    entries: function(array) { return entries(apply(array, 0, createMap, setMap), 0); },\n    key: function(d) { keys.push(d); return nest; },\n    sortKeys: function(order) { sortKeys[keys.length - 1] = order; return nest; },\n    sortValues: function(order) { sortValues = order; return nest; },\n    rollup: function(f) { rollup = f; return nest; }\n  };\n}\n\nfunction createObject() {\n  return {};\n}\n\nfunction setObject(object, key, value) {\n  object[key] = value;\n}\n\nfunction createMap() {\n  return map();\n}\n\nfunction setMap(map, key, value) {\n  map.set(key, value);\n}\n","import {default as map, prefix} from \"./map\";\n\nfunction Set() {}\n\nvar proto = map.prototype;\n\nSet.prototype = set.prototype = {\n  constructor: Set,\n  has: proto.has,\n  add: function(value) {\n    value += \"\";\n    this[prefix + value] = value;\n    return this;\n  },\n  remove: proto.remove,\n  clear: proto.clear,\n  values: proto.keys,\n  size: proto.size,\n  empty: proto.empty,\n  each: proto.each\n};\n\nfunction set(object, f) {\n  var set = new Set;\n\n  // Copy constructor.\n  if (object instanceof Set) object.each(function(value) { set.add(value); });\n\n  // Otherwise, assume it’s an array.\n  else if (object) {\n    var i = -1, n = object.length;\n    if (f == null) while (++i < n) set.add(object[i]);\n    else while (++i < n) set.add(f(object[i], i, object));\n  }\n\n  return set;\n}\n\nexport default set;\n","export default function(map) {\n  var keys = [];\n  for (var key in map) keys.push(key);\n  return keys;\n}\n","export default function(map) {\n  var values = [];\n  for (var key in map) values.push(map[key]);\n  return values;\n}\n","export default function(map) {\n  var entries = [];\n  for (var key in map) entries.push({key: key, value: map[key]});\n  return entries;\n}\n","var array = Array.prototype;\n\nexport var slice = array.slice;\n","export default function(a, b) {\n  return a - b;\n}\n","export default function(ring) {\n  var i = 0, n = ring.length, area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];\n  while (++i < n) area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];\n  return area;\n}\n","export default function(x) {\n  return function() {\n    return x;\n  };\n}\n","export default function(ring, hole) {\n  var i = -1, n = hole.length, c;\n  while (++i < n) if (c = ringContains(ring, hole[i])) return c;\n  return 0;\n}\n\nfunction ringContains(ring, point) {\n  var x = point[0], y = point[1], contains = -1;\n  for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {\n    var pi = ring[i], xi = pi[0], yi = pi[1], pj = ring[j], xj = pj[0], yj = pj[1];\n    if (segmentContains(pi, pj, point)) return 0;\n    if (((yi > y) !== (yj > y)) && ((x < (xj - xi) * (y - yi) / (yj - yi) + xi))) contains = -contains;\n  }\n  return contains;\n}\n\nfunction segmentContains(a, b, c) {\n  var i; return collinear(a, b, c) && within(a[i = +(a[0] === b[0])], c[i], b[i]);\n}\n\nfunction collinear(a, b, c) {\n  return (b[0] - a[0]) * (c[1] - a[1]) === (c[0] - a[0]) * (b[1] - a[1]);\n}\n\nfunction within(p, q, r) {\n  return p <= q && q <= r || r <= q && q <= p;\n}\n","export default function() {}\n","import {extent, thresholdSturges, tickStep, range} from \"d3-array\";\nimport {slice} from \"./array\";\nimport ascending from \"./ascending\";\nimport area from \"./area\";\nimport constant from \"./constant\";\nimport contains from \"./contains\";\nimport noop from \"./noop\";\n\nvar cases = [\n  [],\n  [[[1.0, 1.5], [0.5, 1.0]]],\n  [[[1.5, 1.0], [1.0, 1.5]]],\n  [[[1.5, 1.0], [0.5, 1.0]]],\n  [[[1.0, 0.5], [1.5, 1.0]]],\n  [[[1.0, 1.5], [0.5, 1.0]], [[1.0, 0.5], [1.5, 1.0]]],\n  [[[1.0, 0.5], [1.0, 1.5]]],\n  [[[1.0, 0.5], [0.5, 1.0]]],\n  [[[0.5, 1.0], [1.0, 0.5]]],\n  [[[1.0, 1.5], [1.0, 0.5]]],\n  [[[0.5, 1.0], [1.0, 0.5]], [[1.5, 1.0], [1.0, 1.5]]],\n  [[[1.5, 1.0], [1.0, 0.5]]],\n  [[[0.5, 1.0], [1.5, 1.0]]],\n  [[[1.0, 1.5], [1.5, 1.0]]],\n  [[[0.5, 1.0], [1.0, 1.5]]],\n  []\n];\n\nexport default function() {\n  var dx = 1,\n      dy = 1,\n      threshold = thresholdSturges,\n      smooth = smoothLinear;\n\n  function contours(values) {\n    var tz = threshold(values);\n\n    // Convert number of thresholds into uniform thresholds.\n    if (!Array.isArray(tz)) {\n      var domain = extent(values), start = domain[0], stop = domain[1];\n      tz = tickStep(start, stop, tz);\n      tz = range(Math.floor(start / tz) * tz, Math.floor(stop / tz) * tz, tz);\n    } else {\n      tz = tz.slice().sort(ascending);\n    }\n\n    return tz.map(function(value) {\n      return contour(values, value);\n    });\n  }\n\n  // Accumulate, smooth contour rings, assign holes to exterior rings.\n  // Based on https://github.com/mbostock/shapefile/blob/v0.6.2/shp/polygon.js\n  function contour(values, value) {\n    var polygons = [],\n        holes = [];\n\n    isorings(values, value, function(ring) {\n      smooth(ring, values, value);\n      if (area(ring) > 0) polygons.push([ring]);\n      else holes.push(ring);\n    });\n\n    holes.forEach(function(hole) {\n      for (var i = 0, n = polygons.length, polygon; i < n; ++i) {\n        if (contains((polygon = polygons[i])[0], hole) !== -1) {\n          polygon.push(hole);\n          return;\n        }\n      }\n    });\n\n    return {\n      type: \"MultiPolygon\",\n      value: value,\n      coordinates: polygons\n    };\n  }\n\n  // Marching squares with isolines stitched into rings.\n  // Based on https://github.com/topojson/topojson-client/blob/v3.0.0/src/stitch.js\n  function isorings(values, value, callback) {\n    var fragmentByStart = new Array,\n        fragmentByEnd = new Array,\n        x, y, t0, t1, t2, t3;\n\n    // Special case for the first row (y = -1, t2 = t3 = 0).\n    x = y = -1;\n    t1 = values[0] >= value;\n    cases[t1 << 1].forEach(stitch);\n    while (++x < dx - 1) {\n      t0 = t1, t1 = values[x + 1] >= value;\n      cases[t0 | t1 << 1].forEach(stitch);\n    }\n    cases[t1 << 0].forEach(stitch);\n\n    // General case for the intermediate rows.\n    while (++y < dy - 1) {\n      x = -1;\n      t1 = values[y * dx + dx] >= value;\n      t2 = values[y * dx] >= value;\n      cases[t1 << 1 | t2 << 2].forEach(stitch);\n      while (++x < dx - 1) {\n        t0 = t1, t1 = values[y * dx + dx + x + 1] >= value;\n        t3 = t2, t2 = values[y * dx + x + 1] >= value;\n        cases[t0 | t1 << 1 | t2 << 2 | t3 << 3].forEach(stitch);\n      }\n      cases[t1 | t2 << 3].forEach(stitch);\n    }\n\n    // Special case for the last row (y = dy - 1, t0 = t1 = 0).\n    x = -1;\n    t2 = values[y * dx] >= value;\n    cases[t2 << 2].forEach(stitch);\n    while (++x < dx - 1) {\n      t3 = t2, t2 = values[y * dx + x + 1] >= value;\n      cases[t2 << 2 | t3 << 3].forEach(stitch);\n    }\n    cases[t2 << 3].forEach(stitch);\n\n    function stitch(line) {\n      var start = [line[0][0] + x, line[0][1] + y],\n          end = [line[1][0] + x, line[1][1] + y],\n          startIndex = index(start),\n          endIndex = index(end),\n          f, g;\n      if (f = fragmentByEnd[startIndex]) {\n        if (g = fragmentByStart[endIndex]) {\n          delete fragmentByEnd[f.end];\n          delete fragmentByStart[g.start];\n          if (f === g) {\n            f.ring.push(end);\n            callback(f.ring);\n          } else {\n            fragmentByStart[f.start] = fragmentByEnd[g.end] = {start: f.start, end: g.end, ring: f.ring.concat(g.ring)};\n          }\n        } else {\n          delete fragmentByEnd[f.end];\n          f.ring.push(end);\n          fragmentByEnd[f.end = endIndex] = f;\n        }\n      } else if (f = fragmentByStart[endIndex]) {\n        if (g = fragmentByEnd[startIndex]) {\n          delete fragmentByStart[f.start];\n          delete fragmentByEnd[g.end];\n          if (f === g) {\n            f.ring.push(end);\n            callback(f.ring);\n          } else {\n            fragmentByStart[g.start] = fragmentByEnd[f.end] = {start: g.start, end: f.end, ring: g.ring.concat(f.ring)};\n          }\n        } else {\n          delete fragmentByStart[f.start];\n          f.ring.unshift(start);\n          fragmentByStart[f.start = startIndex] = f;\n        }\n      } else {\n        fragmentByStart[startIndex] = fragmentByEnd[endIndex] = {start: startIndex, end: endIndex, ring: [start, end]};\n      }\n    }\n  }\n\n  function index(point) {\n    return point[0] * 2 + point[1] * (dx + 1) * 4;\n  }\n\n  function smoothLinear(ring, values, value) {\n    ring.forEach(function(point) {\n      var x = point[0],\n          y = point[1],\n          xt = x | 0,\n          yt = y | 0,\n          v0,\n          v1 = values[yt * dx + xt];\n      if (x > 0 && x < dx && xt === x) {\n        v0 = values[yt * dx + xt - 1];\n        point[0] = x + (value - v0) / (v1 - v0) - 0.5;\n      }\n      if (y > 0 && y < dy && yt === y) {\n        v0 = values[(yt - 1) * dx + xt];\n        point[1] = y + (value - v0) / (v1 - v0) - 0.5;\n      }\n    });\n  }\n\n  contours.contour = contour;\n\n  contours.size = function(_) {\n    if (!arguments.length) return [dx, dy];\n    var _0 = Math.ceil(_[0]), _1 = Math.ceil(_[1]);\n    if (!(_0 > 0) || !(_1 > 0)) throw new Error(\"invalid size\");\n    return dx = _0, dy = _1, contours;\n  };\n\n  contours.thresholds = function(_) {\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), contours) : threshold;\n  };\n\n  contours.smooth = function(_) {\n    return arguments.length ? (smooth = _ ? smoothLinear : noop, contours) : smooth === smoothLinear;\n  };\n\n  return contours;\n}\n","// TODO Optimize edge cases.\n// TODO Optimize index calculation.\n// TODO Optimize arguments.\nexport function blurX(source, target, r) {\n  var n = source.width,\n      m = source.height,\n      w = (r << 1) + 1;\n  for (var j = 0; j < m; ++j) {\n    for (var i = 0, sr = 0; i < n + r; ++i) {\n      if (i < n) {\n        sr += source.data[i + j * n];\n      }\n      if (i >= r) {\n        if (i >= w) {\n          sr -= source.data[i - w + j * n];\n        }\n        target.data[i - r + j * n] = sr / Math.min(i + 1, n - 1 + w - i, w);\n      }\n    }\n  }\n}\n\n// TODO Optimize edge cases.\n// TODO Optimize index calculation.\n// TODO Optimize arguments.\nexport function blurY(source, target, r) {\n  var n = source.width,\n      m = source.height,\n      w = (r << 1) + 1;\n  for (var i = 0; i < n; ++i) {\n    for (var j = 0, sr = 0; j < m + r; ++j) {\n      if (j < m) {\n        sr += source.data[i + j * n];\n      }\n      if (j >= r) {\n        if (j >= w) {\n          sr -= source.data[i + (j - w) * n];\n        }\n        target.data[i + (j - r) * n] = sr / Math.min(j + 1, m - 1 + w - j, w);\n      }\n    }\n  }\n}\n","import {max, range, tickStep} from \"d3-array\";\nimport {slice} from \"./array\";\nimport {blurX, blurY} from \"./blur\";\nimport constant from \"./constant\";\nimport contours from \"./contours\";\n\nfunction defaultX(d) {\n  return d[0];\n}\n\nfunction defaultY(d) {\n  return d[1];\n}\n\nfunction defaultWeight() {\n  return 1;\n}\n\nexport default function() {\n  var x = defaultX,\n      y = defaultY,\n      weight = defaultWeight,\n      dx = 960,\n      dy = 500,\n      r = 20, // blur radius\n      k = 2, // log2(grid cell size)\n      o = r * 3, // grid offset, to pad for blur\n      n = (dx + o * 2) >> k, // grid width\n      m = (dy + o * 2) >> k, // grid height\n      threshold = constant(20);\n\n  function density(data) {\n    var values0 = new Float32Array(n * m),\n        values1 = new Float32Array(n * m);\n\n    data.forEach(function(d, i, data) {\n      var xi = (+x(d, i, data) + o) >> k,\n          yi = (+y(d, i, data) + o) >> k,\n          wi = +weight(d, i, data);\n      if (xi >= 0 && xi < n && yi >= 0 && yi < m) {\n        values0[xi + yi * n] += wi;\n      }\n    });\n\n    // TODO Optimize.\n    blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);\n    blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);\n    blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);\n    blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);\n    blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);\n    blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);\n\n    var tz = threshold(values0);\n\n    // Convert number of thresholds into uniform thresholds.\n    if (!Array.isArray(tz)) {\n      var stop = max(values0);\n      tz = tickStep(0, stop, tz);\n      tz = range(0, Math.floor(stop / tz) * tz, tz);\n      tz.shift();\n    }\n\n    return contours()\n        .thresholds(tz)\n        .size([n, m])\n      (values0)\n        .map(transform);\n  }\n\n  function transform(geometry) {\n    geometry.value *= Math.pow(2, -2 * k); // Density in points per square pixel.\n    geometry.coordinates.forEach(transformPolygon);\n    return geometry;\n  }\n\n  function transformPolygon(coordinates) {\n    coordinates.forEach(transformRing);\n  }\n\n  function transformRing(coordinates) {\n    coordinates.forEach(transformPoint);\n  }\n\n  // TODO Optimize.\n  function transformPoint(coordinates) {\n    coordinates[0] = coordinates[0] * Math.pow(2, k) - o;\n    coordinates[1] = coordinates[1] * Math.pow(2, k) - o;\n  }\n\n  function resize() {\n    o = r * 3;\n    n = (dx + o * 2) >> k;\n    m = (dy + o * 2) >> k;\n    return density;\n  }\n\n  density.x = function(_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), density) : x;\n  };\n\n  density.y = function(_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), density) : y;\n  };\n\n  density.weight = function(_) {\n    return arguments.length ? (weight = typeof _ === \"function\" ? _ : constant(+_), density) : weight;\n  };\n\n  density.size = function(_) {\n    if (!arguments.length) return [dx, dy];\n    var _0 = Math.ceil(_[0]), _1 = Math.ceil(_[1]);\n    if (!(_0 >= 0) && !(_0 >= 0)) throw new Error(\"invalid size\");\n    return dx = _0, dy = _1, resize();\n  };\n\n  density.cellSize = function(_) {\n    if (!arguments.length) return 1 << k;\n    if (!((_ = +_) >= 1)) throw new Error(\"invalid cell size\");\n    return k = Math.floor(Math.log(_) / Math.LN2), resize();\n  };\n\n  density.thresholds = function(_) {\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), density) : threshold;\n  };\n\n  density.bandwidth = function(_) {\n    if (!arguments.length) return Math.sqrt(r * (r + 1));\n    if (!((_ = +_) >= 0)) throw new Error(\"invalid bandwidth\");\n    return r = Math.round((Math.sqrt(4 * _ * _ + 1) - 1) / 2), resize();\n  };\n\n  return density;\n}\n","var EOL = {},\n    EOF = {},\n    QUOTE = 34,\n    NEWLINE = 10,\n    RETURN = 13;\n\nfunction objectConverter(columns) {\n  return new Function(\"d\", \"return {\" + columns.map(function(name, i) {\n    return JSON.stringify(name) + \": d[\" + i + \"]\";\n  }).join(\",\") + \"}\");\n}\n\nfunction customConverter(columns, f) {\n  var object = objectConverter(columns);\n  return function(row, i) {\n    return f(object(row), i, columns);\n  };\n}\n\n// Compute unique columns in order of discovery.\nfunction inferColumns(rows) {\n  var columnSet = Object.create(null),\n      columns = [];\n\n  rows.forEach(function(row) {\n    for (var column in row) {\n      if (!(column in columnSet)) {\n        columns.push(columnSet[column] = column);\n      }\n    }\n  });\n\n  return columns;\n}\n\nexport default function(delimiter) {\n  var reFormat = new RegExp(\"[\\\"\" + delimiter + \"\\n\\r]\"),\n      DELIMITER = delimiter.charCodeAt(0);\n\n  function parse(text, f) {\n    var convert, columns, rows = parseRows(text, function(row, i) {\n      if (convert) return convert(row, i - 1);\n      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);\n    });\n    rows.columns = columns || [];\n    return rows;\n  }\n\n  function parseRows(text, f) {\n    var rows = [], // output rows\n        N = text.length,\n        I = 0, // current character index\n        n = 0, // current line number\n        t, // current token\n        eof = N <= 0, // current token followed by EOF?\n        eol = false; // current token followed by EOL?\n\n    // Strip the trailing newline.\n    if (text.charCodeAt(N - 1) === NEWLINE) --N;\n    if (text.charCodeAt(N - 1) === RETURN) --N;\n\n    function token() {\n      if (eof) return EOF;\n      if (eol) return eol = false, EOL;\n\n      // Unescape quotes.\n      var i, j = I, c;\n      if (text.charCodeAt(j) === QUOTE) {\n        while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);\n        if ((i = I) >= N) eof = true;\n        else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n        return text.slice(j + 1, i - 1).replace(/\"\"/g, \"\\\"\");\n      }\n\n      // Find next delimiter or newline.\n      while (I < N) {\n        if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n        else if (c !== DELIMITER) continue;\n        return text.slice(j, i);\n      }\n\n      // Return last token before EOF.\n      return eof = true, text.slice(j, N);\n    }\n\n    while ((t = token()) !== EOF) {\n      var row = [];\n      while (t !== EOL && t !== EOF) row.push(t), t = token();\n      if (f && (row = f(row, n++)) == null) continue;\n      rows.push(row);\n    }\n\n    return rows;\n  }\n\n  function format(rows, columns) {\n    if (columns == null) columns = inferColumns(rows);\n    return [columns.map(formatValue).join(delimiter)].concat(rows.map(function(row) {\n      return columns.map(function(column) {\n        return formatValue(row[column]);\n      }).join(delimiter);\n    })).join(\"\\n\");\n  }\n\n  function formatRows(rows) {\n    return rows.map(formatRow).join(\"\\n\");\n  }\n\n  function formatRow(row) {\n    return row.map(formatValue).join(delimiter);\n  }\n\n  function formatValue(text) {\n    return text == null ? \"\"\n        : reFormat.test(text += \"\") ? \"\\\"\" + text.replace(/\"/g, \"\\\"\\\"\") + \"\\\"\"\n        : text;\n  }\n\n  return {\n    parse: parse,\n    parseRows: parseRows,\n    format: format,\n    formatRows: formatRows\n  };\n}\n","import dsv from \"./dsv\";\n\nvar csv = dsv(\",\");\n\nexport var csvParse = csv.parse;\nexport var csvParseRows = csv.parseRows;\nexport var csvFormat = csv.format;\nexport var csvFormatRows = csv.formatRows;\n","import dsv from \"./dsv\";\n\nvar tsv = dsv(\"\\t\");\n\nexport var tsvParse = tsv.parse;\nexport var tsvParseRows = tsv.parseRows;\nexport var tsvFormat = tsv.format;\nexport var tsvFormatRows = tsv.formatRows;\n","function responseBlob(response) {\n  if (!response.ok) throw new Error(response.status + \" \" + response.statusText);\n  return response.blob();\n}\n\nexport default function(input, init) {\n  return fetch(input, init).then(responseBlob);\n}\n","function responseArrayBuffer(response) {\n  if (!response.ok) throw new Error(response.status + \" \" + response.statusText);\n  return response.arrayBuffer();\n}\n\nexport default function(input, init) {\n  return fetch(input, init).then(responseArrayBuffer);\n}\n","function responseText(response) {\n  if (!response.ok) throw new Error(response.status + \" \" + response.statusText);\n  return response.text();\n}\n\nexport default function(input, init) {\n  return fetch(input, init).then(responseText);\n}\n","import {csvParse, dsvFormat, tsvParse} from \"d3-dsv\";\nimport text from \"./text\";\n\nfunction dsvParse(parse) {\n  return function(input, init, row) {\n    if (arguments.length === 2 && typeof init === \"function\") row = init, init = undefined;\n    return text(input, init).then(function(response) {\n      return parse(response, row);\n    });\n  };\n}\n\nexport default function dsv(delimiter, input, init, row) {\n  if (arguments.length === 3 && typeof init === \"function\") row = init, init = undefined;\n  var format = dsvFormat(delimiter);\n  return text(input, init).then(function(response) {\n    return format.parse(response, row);\n  });\n}\n\nexport var csv = dsvParse(csvParse);\nexport var tsv = dsvParse(tsvParse);\n","export default function(input, init) {\n  return new Promise(function(resolve, reject) {\n    var image = new Image;\n    for (var key in init) image[key] = init[key];\n    image.onerror = reject;\n    image.onload = function() { resolve(image); };\n    image.src = input;\n  });\n}\n","function responseJson(response) {\n  if (!response.ok) throw new Error(response.status + \" \" + response.statusText);\n  return response.json();\n}\n\nexport default function(input, init) {\n  return fetch(input, init).then(responseJson);\n}\n","import text from \"./text\";\n\nfunction parser(type) {\n  return function(input, init)  {\n    return text(input, init).then(function(text) {\n      return (new DOMParser).parseFromString(text, type);\n    });\n  };\n}\n\nexport default parser(\"application/xml\");\n\nexport var html = parser(\"text/html\");\n\nexport var svg = parser(\"image/svg+xml\");\n","export default function(x, y) {\n  var nodes;\n\n  if (x == null) x = 0;\n  if (y == null) y = 0;\n\n  function force() {\n    var i,\n        n = nodes.length,\n        node,\n        sx = 0,\n        sy = 0;\n\n    for (i = 0; i < n; ++i) {\n      node = nodes[i], sx += node.x, sy += node.y;\n    }\n\n    for (sx = sx / n - x, sy = sy / n - y, i = 0; i < n; ++i) {\n      node = nodes[i], node.x -= sx, node.y -= sy;\n    }\n  }\n\n  force.initialize = function(_) {\n    nodes = _;\n  };\n\n  force.x = function(_) {\n    return arguments.length ? (x = +_, force) : x;\n  };\n\n  force.y = function(_) {\n    return arguments.length ? (y = +_, force) : y;\n  };\n\n  return force;\n}\n","export default function(x) {\n  return function() {\n    return x;\n  };\n}\n","export default function() {\n  return (Math.random() - 0.5) * 1e-6;\n}\n","export default function(d) {\n  var x = +this._x.call(null, d),\n      y = +this._y.call(null, d);\n  return add(this.cover(x, y), x, y, d);\n}\n\nfunction add(tree, x, y, d) {\n  if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points\n\n  var parent,\n      node = tree._root,\n      leaf = {data: d},\n      x0 = tree._x0,\n      y0 = tree._y0,\n      x1 = tree._x1,\n      y1 = tree._y1,\n      xm,\n      ym,\n      xp,\n      yp,\n      right,\n      bottom,\n      i,\n      j;\n\n  // If the tree is empty, initialize the root as a leaf.\n  if (!node) return tree._root = leaf, tree;\n\n  // Find the existing leaf for the new point, or add it.\n  while (node.length) {\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n    if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;\n  }\n\n  // Is the new point is exactly coincident with the existing point?\n  xp = +tree._x.call(null, node.data);\n  yp = +tree._y.call(null, node.data);\n  if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;\n\n  // Otherwise, split the leaf node until the old and new point are separated.\n  do {\n    parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n  } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | (xp >= xm)));\n  return parent[j] = node, parent[i] = leaf, tree;\n}\n\nexport function addAll(data) {\n  var d, i, n = data.length,\n      x,\n      y,\n      xz = new Array(n),\n      yz = new Array(n),\n      x0 = Infinity,\n      y0 = Infinity,\n      x1 = -Infinity,\n      y1 = -Infinity;\n\n  // Compute the points and their extent.\n  for (i = 0; i < n; ++i) {\n    if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;\n    xz[i] = x;\n    yz[i] = y;\n    if (x < x0) x0 = x;\n    if (x > x1) x1 = x;\n    if (y < y0) y0 = y;\n    if (y > y1) y1 = y;\n  }\n\n  // If there were no (valid) points, inherit the existing extent.\n  if (x1 < x0) x0 = this._x0, x1 = this._x1;\n  if (y1 < y0) y0 = this._y0, y1 = this._y1;\n\n  // Expand the tree to cover the new points.\n  this.cover(x0, y0).cover(x1, y1);\n\n  // Add the new points.\n  for (i = 0; i < n; ++i) {\n    add(this, xz[i], yz[i], data[i]);\n  }\n\n  return this;\n}\n","export default function(x, y) {\n  if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points\n\n  var x0 = this._x0,\n      y0 = this._y0,\n      x1 = this._x1,\n      y1 = this._y1;\n\n  // If the quadtree has no extent, initialize them.\n  // Integer extent are necessary so that if we later double the extent,\n  // the existing quadrant boundaries don’t change due to floating point error!\n  if (isNaN(x0)) {\n    x1 = (x0 = Math.floor(x)) + 1;\n    y1 = (y0 = Math.floor(y)) + 1;\n  }\n\n  // Otherwise, double repeatedly to cover.\n  else if (x0 > x || x > x1 || y0 > y || y > y1) {\n    var z = x1 - x0,\n        node = this._root,\n        parent,\n        i;\n\n    switch (i = (y < (y0 + y1) / 2) << 1 | (x < (x0 + x1) / 2)) {\n      case 0: {\n        do parent = new Array(4), parent[i] = node, node = parent;\n        while (z *= 2, x1 = x0 + z, y1 = y0 + z, x > x1 || y > y1);\n        break;\n      }\n      case 1: {\n        do parent = new Array(4), parent[i] = node, node = parent;\n        while (z *= 2, x0 = x1 - z, y1 = y0 + z, x0 > x || y > y1);\n        break;\n      }\n      case 2: {\n        do parent = new Array(4), parent[i] = node, node = parent;\n        while (z *= 2, x1 = x0 + z, y0 = y1 - z, x > x1 || y0 > y);\n        break;\n      }\n      case 3: {\n        do parent = new Array(4), parent[i] = node, node = parent;\n        while (z *= 2, x0 = x1 - z, y0 = y1 - z, x0 > x || y0 > y);\n        break;\n      }\n    }\n\n    if (this._root && this._root.length) this._root = node;\n  }\n\n  // If the quadtree covers the point already, just return.\n  else return this;\n\n  this._x0 = x0;\n  this._y0 = y0;\n  this._x1 = x1;\n  this._y1 = y1;\n  return this;\n}\n","export default function(node, x0, y0, x1, y1) {\n  this.node = node;\n  this.x0 = x0;\n  this.y0 = y0;\n  this.x1 = x1;\n  this.y1 = y1;\n}\n","export function defaultX(d) {\n  return d[0];\n}\n\nexport default function(_) {\n  return arguments.length ? (this._x = _, this) : this._x;\n}\n","export function defaultY(d) {\n  return d[1];\n}\n\nexport default function(_) {\n  return arguments.length ? (this._y = _, this) : this._y;\n}\n","import tree_add, {addAll as tree_addAll} from \"./add\";\nimport tree_cover from \"./cover\";\nimport tree_data from \"./data\";\nimport tree_extent from \"./extent\";\nimport tree_find from \"./find\";\nimport tree_remove, {removeAll as tree_removeAll} from \"./remove\";\nimport tree_root from \"./root\";\nimport tree_size from \"./size\";\nimport tree_visit from \"./visit\";\nimport tree_visitAfter from \"./visitAfter\";\nimport tree_x, {defaultX} from \"./x\";\nimport tree_y, {defaultY} from \"./y\";\n\nexport default function quadtree(nodes, x, y) {\n  var tree = new Quadtree(x == null ? defaultX : x, y == null ? defaultY : y, NaN, NaN, NaN, NaN);\n  return nodes == null ? tree : tree.addAll(nodes);\n}\n\nfunction Quadtree(x, y, x0, y0, x1, y1) {\n  this._x = x;\n  this._y = y;\n  this._x0 = x0;\n  this._y0 = y0;\n  this._x1 = x1;\n  this._y1 = y1;\n  this._root = undefined;\n}\n\nfunction leaf_copy(leaf) {\n  var copy = {data: leaf.data}, next = copy;\n  while (leaf = leaf.next) next = next.next = {data: leaf.data};\n  return copy;\n}\n\nvar treeProto = quadtree.prototype = Quadtree.prototype;\n\ntreeProto.copy = function() {\n  var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),\n      node = this._root,\n      nodes,\n      child;\n\n  if (!node) return copy;\n\n  if (!node.length) return copy._root = leaf_copy(node), copy;\n\n  nodes = [{source: node, target: copy._root = new Array(4)}];\n  while (node = nodes.pop()) {\n    for (var i = 0; i < 4; ++i) {\n      if (child = node.source[i]) {\n        if (child.length) nodes.push({source: child, target: node.target[i] = new Array(4)});\n        else node.target[i] = leaf_copy(child);\n      }\n    }\n  }\n\n  return copy;\n};\n\ntreeProto.add = tree_add;\ntreeProto.addAll = tree_addAll;\ntreeProto.cover = tree_cover;\ntreeProto.data = tree_data;\ntreeProto.extent = tree_extent;\ntreeProto.find = tree_find;\ntreeProto.remove = tree_remove;\ntreeProto.removeAll = tree_removeAll;\ntreeProto.root = tree_root;\ntreeProto.size = tree_size;\ntreeProto.visit = tree_visit;\ntreeProto.visitAfter = tree_visitAfter;\ntreeProto.x = tree_x;\ntreeProto.y = tree_y;\n","import constant from \"./constant\";\nimport jiggle from \"./jiggle\";\nimport {quadtree} from \"d3-quadtree\";\n\nfunction x(d) {\n  return d.x + d.vx;\n}\n\nfunction y(d) {\n  return d.y + d.vy;\n}\n\nexport default function(radius) {\n  var nodes,\n      radii,\n      strength = 1,\n      iterations = 1;\n\n  if (typeof radius !== \"function\") radius = constant(radius == null ? 1 : +radius);\n\n  function force() {\n    var i, n = nodes.length,\n        tree,\n        node,\n        xi,\n        yi,\n        ri,\n        ri2;\n\n    for (var k = 0; k < iterations; ++k) {\n      tree = quadtree(nodes, x, y).visitAfter(prepare);\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        ri = radii[node.index], ri2 = ri * ri;\n        xi = node.x + node.vx;\n        yi = node.y + node.vy;\n        tree.visit(apply);\n      }\n    }\n\n    function apply(quad, x0, y0, x1, y1) {\n      var data = quad.data, rj = quad.r, r = ri + rj;\n      if (data) {\n        if (data.index > node.index) {\n          var x = xi - data.x - data.vx,\n              y = yi - data.y - data.vy,\n              l = x * x + y * y;\n          if (l < r * r) {\n            if (x === 0) x = jiggle(), l += x * x;\n            if (y === 0) y = jiggle(), l += y * y;\n            l = (r - (l = Math.sqrt(l))) / l * strength;\n            node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));\n            node.vy += (y *= l) * r;\n            data.vx -= x * (r = 1 - r);\n            data.vy -= y * r;\n          }\n        }\n        return;\n      }\n      return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;\n    }\n  }\n\n  function prepare(quad) {\n    if (quad.data) return quad.r = radii[quad.data.index];\n    for (var i = quad.r = 0; i < 4; ++i) {\n      if (quad[i] && quad[i].r > quad.r) {\n        quad.r = quad[i].r;\n      }\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length, node;\n    radii = new Array(n);\n    for (i = 0; i < n; ++i) node = nodes[i], radii[node.index] = +radius(node, i, nodes);\n  }\n\n  force.initialize = function(_) {\n    nodes = _;\n    initialize();\n  };\n\n  force.iterations = function(_) {\n    return arguments.length ? (iterations = +_, force) : iterations;\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = +_, force) : strength;\n  };\n\n  force.radius = function(_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : radius;\n  };\n\n  return force;\n}\n","export default function() {\n  var data = [];\n  this.visit(function(node) {\n    if (!node.length) do data.push(node.data); while (node = node.next)\n  });\n  return data;\n}\n","export default function(_) {\n  return arguments.length\n      ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1])\n      : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];\n}\n","import Quad from \"./quad\";\n\nexport default function(x, y, radius) {\n  var data,\n      x0 = this._x0,\n      y0 = this._y0,\n      x1,\n      y1,\n      x2,\n      y2,\n      x3 = this._x1,\n      y3 = this._y1,\n      quads = [],\n      node = this._root,\n      q,\n      i;\n\n  if (node) quads.push(new Quad(node, x0, y0, x3, y3));\n  if (radius == null) radius = Infinity;\n  else {\n    x0 = x - radius, y0 = y - radius;\n    x3 = x + radius, y3 = y + radius;\n    radius *= radius;\n  }\n\n  while (q = quads.pop()) {\n\n    // Stop searching if this quadrant can’t contain a closer node.\n    if (!(node = q.node)\n        || (x1 = q.x0) > x3\n        || (y1 = q.y0) > y3\n        || (x2 = q.x1) < x0\n        || (y2 = q.y1) < y0) continue;\n\n    // Bisect the current quadrant.\n    if (node.length) {\n      var xm = (x1 + x2) / 2,\n          ym = (y1 + y2) / 2;\n\n      quads.push(\n        new Quad(node[3], xm, ym, x2, y2),\n        new Quad(node[2], x1, ym, xm, y2),\n        new Quad(node[1], xm, y1, x2, ym),\n        new Quad(node[0], x1, y1, xm, ym)\n      );\n\n      // Visit the closest quadrant first.\n      if (i = (y >= ym) << 1 | (x >= xm)) {\n        q = quads[quads.length - 1];\n        quads[quads.length - 1] = quads[quads.length - 1 - i];\n        quads[quads.length - 1 - i] = q;\n      }\n    }\n\n    // Visit this point. (Visiting coincident points isn’t necessary!)\n    else {\n      var dx = x - +this._x.call(null, node.data),\n          dy = y - +this._y.call(null, node.data),\n          d2 = dx * dx + dy * dy;\n      if (d2 < radius) {\n        var d = Math.sqrt(radius = d2);\n        x0 = x - d, y0 = y - d;\n        x3 = x + d, y3 = y + d;\n        data = node.data;\n      }\n    }\n  }\n\n  return data;\n}\n","export default function(d) {\n  if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points\n\n  var parent,\n      node = this._root,\n      retainer,\n      previous,\n      next,\n      x0 = this._x0,\n      y0 = this._y0,\n      x1 = this._x1,\n      y1 = this._y1,\n      x,\n      y,\n      xm,\n      ym,\n      right,\n      bottom,\n      i,\n      j;\n\n  // If the tree is empty, initialize the root as a leaf.\n  if (!node) return this;\n\n  // Find the leaf node for the point.\n  // While descending, also retain the deepest parent with a non-removed sibling.\n  if (node.length) while (true) {\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n    if (!(parent = node, node = node[i = bottom << 1 | right])) return this;\n    if (!node.length) break;\n    if (parent[(i + 1) & 3] || parent[(i + 2) & 3] || parent[(i + 3) & 3]) retainer = parent, j = i;\n  }\n\n  // Find the point to remove.\n  while (node.data !== d) if (!(previous = node, node = node.next)) return this;\n  if (next = node.next) delete node.next;\n\n  // If there are multiple coincident points, remove just the point.\n  if (previous) return (next ? previous.next = next : delete previous.next), this;\n\n  // If this is the root point, remove it.\n  if (!parent) return this._root = next, this;\n\n  // Remove this leaf.\n  next ? parent[i] = next : delete parent[i];\n\n  // If the parent now contains exactly one leaf, collapse superfluous parents.\n  if ((node = parent[0] || parent[1] || parent[2] || parent[3])\n      && node === (parent[3] || parent[2] || parent[1] || parent[0])\n      && !node.length) {\n    if (retainer) retainer[j] = node;\n    else this._root = node;\n  }\n\n  return this;\n}\n\nexport function removeAll(data) {\n  for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);\n  return this;\n}\n","export default function() {\n  return this._root;\n}\n","export default function() {\n  var size = 0;\n  this.visit(function(node) {\n    if (!node.length) do ++size; while (node = node.next)\n  });\n  return size;\n}\n","import Quad from \"./quad\";\n\nexport default function(callback) {\n  var quads = [], q, node = this._root, child, x0, y0, x1, y1;\n  if (node) quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));\n  while (q = quads.pop()) {\n    if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {\n      var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;\n      if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));\n      if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));\n      if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));\n      if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));\n    }\n  }\n  return this;\n}\n","import Quad from \"./quad\";\n\nexport default function(callback) {\n  var quads = [], next = [], q;\n  if (this._root) quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));\n  while (q = quads.pop()) {\n    var node = q.node;\n    if (node.length) {\n      var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;\n      if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));\n      if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));\n      if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));\n      if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));\n    }\n    next.push(q);\n  }\n  while (q = next.pop()) {\n    callback(q.node, q.x0, q.y0, q.x1, q.y1);\n  }\n  return this;\n}\n","import constant from \"./constant\";\nimport jiggle from \"./jiggle\";\nimport {map} from \"d3-collection\";\n\nfunction index(d) {\n  return d.index;\n}\n\nfunction find(nodeById, nodeId) {\n  var node = nodeById.get(nodeId);\n  if (!node) throw new Error(\"missing: \" + nodeId);\n  return node;\n}\n\nexport default function(links) {\n  var id = index,\n      strength = defaultStrength,\n      strengths,\n      distance = constant(30),\n      distances,\n      nodes,\n      count,\n      bias,\n      iterations = 1;\n\n  if (links == null) links = [];\n\n  function defaultStrength(link) {\n    return 1 / Math.min(count[link.source.index], count[link.target.index]);\n  }\n\n  function force(alpha) {\n    for (var k = 0, n = links.length; k < iterations; ++k) {\n      for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {\n        link = links[i], source = link.source, target = link.target;\n        x = target.x + target.vx - source.x - source.vx || jiggle();\n        y = target.y + target.vy - source.y - source.vy || jiggle();\n        l = Math.sqrt(x * x + y * y);\n        l = (l - distances[i]) / l * alpha * strengths[i];\n        x *= l, y *= l;\n        target.vx -= x * (b = bias[i]);\n        target.vy -= y * b;\n        source.vx += x * (b = 1 - b);\n        source.vy += y * b;\n      }\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n\n    var i,\n        n = nodes.length,\n        m = links.length,\n        nodeById = map(nodes, id),\n        link;\n\n    for (i = 0, count = new Array(n); i < m; ++i) {\n      link = links[i], link.index = i;\n      if (typeof link.source !== \"object\") link.source = find(nodeById, link.source);\n      if (typeof link.target !== \"object\") link.target = find(nodeById, link.target);\n      count[link.source.index] = (count[link.source.index] || 0) + 1;\n      count[link.target.index] = (count[link.target.index] || 0) + 1;\n    }\n\n    for (i = 0, bias = new Array(m); i < m; ++i) {\n      link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);\n    }\n\n    strengths = new Array(m), initializeStrength();\n    distances = new Array(m), initializeDistance();\n  }\n\n  function initializeStrength() {\n    if (!nodes) return;\n\n    for (var i = 0, n = links.length; i < n; ++i) {\n      strengths[i] = +strength(links[i], i, links);\n    }\n  }\n\n  function initializeDistance() {\n    if (!nodes) return;\n\n    for (var i = 0, n = links.length; i < n; ++i) {\n      distances[i] = +distance(links[i], i, links);\n    }\n  }\n\n  force.initialize = function(_) {\n    nodes = _;\n    initialize();\n  };\n\n  force.links = function(_) {\n    return arguments.length ? (links = _, initialize(), force) : links;\n  };\n\n  force.id = function(_) {\n    return arguments.length ? (id = _, force) : id;\n  };\n\n  force.iterations = function(_) {\n    return arguments.length ? (iterations = +_, force) : iterations;\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initializeStrength(), force) : strength;\n  };\n\n  force.distance = function(_) {\n    return arguments.length ? (distance = typeof _ === \"function\" ? _ : constant(+_), initializeDistance(), force) : distance;\n  };\n\n  return force;\n}\n","import {dispatch} from \"d3-dispatch\";\nimport {map} from \"d3-collection\";\nimport {timer} from \"d3-timer\";\n\nexport function x(d) {\n  return d.x;\n}\n\nexport function y(d) {\n  return d.y;\n}\n\nvar initialRadius = 10,\n    initialAngle = Math.PI * (3 - Math.sqrt(5));\n\nexport default function(nodes) {\n  var simulation,\n      alpha = 1,\n      alphaMin = 0.001,\n      alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),\n      alphaTarget = 0,\n      velocityDecay = 0.6,\n      forces = map(),\n      stepper = timer(step),\n      event = dispatch(\"tick\", \"end\");\n\n  if (nodes == null) nodes = [];\n\n  function step() {\n    tick();\n    event.call(\"tick\", simulation);\n    if (alpha < alphaMin) {\n      stepper.stop();\n      event.call(\"end\", simulation);\n    }\n  }\n\n  function tick() {\n    var i, n = nodes.length, node;\n\n    alpha += (alphaTarget - alpha) * alphaDecay;\n\n    forces.each(function(force) {\n      force(alpha);\n    });\n\n    for (i = 0; i < n; ++i) {\n      node = nodes[i];\n      if (node.fx == null) node.x += node.vx *= velocityDecay;\n      else node.x = node.fx, node.vx = 0;\n      if (node.fy == null) node.y += node.vy *= velocityDecay;\n      else node.y = node.fy, node.vy = 0;\n    }\n  }\n\n  function initializeNodes() {\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\n      node = nodes[i], node.index = i;\n      if (isNaN(node.x) || isNaN(node.y)) {\n        var radius = initialRadius * Math.sqrt(i), angle = i * initialAngle;\n        node.x = radius * Math.cos(angle);\n        node.y = radius * Math.sin(angle);\n      }\n      if (isNaN(node.vx) || isNaN(node.vy)) {\n        node.vx = node.vy = 0;\n      }\n    }\n  }\n\n  function initializeForce(force) {\n    if (force.initialize) force.initialize(nodes);\n    return force;\n  }\n\n  initializeNodes();\n\n  return simulation = {\n    tick: tick,\n\n    restart: function() {\n      return stepper.restart(step), simulation;\n    },\n\n    stop: function() {\n      return stepper.stop(), simulation;\n    },\n\n    nodes: function(_) {\n      return arguments.length ? (nodes = _, initializeNodes(), forces.each(initializeForce), simulation) : nodes;\n    },\n\n    alpha: function(_) {\n      return arguments.length ? (alpha = +_, simulation) : alpha;\n    },\n\n    alphaMin: function(_) {\n      return arguments.length ? (alphaMin = +_, simulation) : alphaMin;\n    },\n\n    alphaDecay: function(_) {\n      return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;\n    },\n\n    alphaTarget: function(_) {\n      return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;\n    },\n\n    velocityDecay: function(_) {\n      return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;\n    },\n\n    force: function(name, _) {\n      return arguments.length > 1 ? ((_ == null ? forces.remove(name) : forces.set(name, initializeForce(_))), simulation) : forces.get(name);\n    },\n\n    find: function(x, y, radius) {\n      var i = 0,\n          n = nodes.length,\n          dx,\n          dy,\n          d2,\n          node,\n          closest;\n\n      if (radius == null) radius = Infinity;\n      else radius *= radius;\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        dx = x - node.x;\n        dy = y - node.y;\n        d2 = dx * dx + dy * dy;\n        if (d2 < radius) closest = node, radius = d2;\n      }\n\n      return closest;\n    },\n\n    on: function(name, _) {\n      return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);\n    }\n  };\n}\n","import constant from \"./constant\";\nimport jiggle from \"./jiggle\";\nimport {quadtree} from \"d3-quadtree\";\nimport {x, y} from \"./simulation\";\n\nexport default function() {\n  var nodes,\n      node,\n      alpha,\n      strength = constant(-30),\n      strengths,\n      distanceMin2 = 1,\n      distanceMax2 = Infinity,\n      theta2 = 0.81;\n\n  function force(_) {\n    var i, n = nodes.length, tree = quadtree(nodes, x, y).visitAfter(accumulate);\n    for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length, node;\n    strengths = new Array(n);\n    for (i = 0; i < n; ++i) node = nodes[i], strengths[node.index] = +strength(node, i, nodes);\n  }\n\n  function accumulate(quad) {\n    var strength = 0, q, c, weight = 0, x, y, i;\n\n    // For internal nodes, accumulate forces from child quadrants.\n    if (quad.length) {\n      for (x = y = i = 0; i < 4; ++i) {\n        if ((q = quad[i]) && (c = Math.abs(q.value))) {\n          strength += q.value, weight += c, x += c * q.x, y += c * q.y;\n        }\n      }\n      quad.x = x / weight;\n      quad.y = y / weight;\n    }\n\n    // For leaf nodes, accumulate forces from coincident quadrants.\n    else {\n      q = quad;\n      q.x = q.data.x;\n      q.y = q.data.y;\n      do strength += strengths[q.data.index];\n      while (q = q.next);\n    }\n\n    quad.value = strength;\n  }\n\n  function apply(quad, x1, _, x2) {\n    if (!quad.value) return true;\n\n    var x = quad.x - node.x,\n        y = quad.y - node.y,\n        w = x2 - x1,\n        l = x * x + y * y;\n\n    // Apply the Barnes-Hut approximation if possible.\n    // Limit forces for very close nodes; randomize direction if coincident.\n    if (w * w / theta2 < l) {\n      if (l < distanceMax2) {\n        if (x === 0) x = jiggle(), l += x * x;\n        if (y === 0) y = jiggle(), l += y * y;\n        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n        node.vx += x * quad.value * alpha / l;\n        node.vy += y * quad.value * alpha / l;\n      }\n      return true;\n    }\n\n    // Otherwise, process points directly.\n    else if (quad.length || l >= distanceMax2) return;\n\n    // Limit forces for very close nodes; randomize direction if coincident.\n    if (quad.data !== node || quad.next) {\n      if (x === 0) x = jiggle(), l += x * x;\n      if (y === 0) y = jiggle(), l += y * y;\n      if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n    }\n\n    do if (quad.data !== node) {\n      w = strengths[quad.data.index] * alpha / l;\n      node.vx += x * w;\n      node.vy += y * w;\n    } while (quad = quad.next);\n  }\n\n  force.initialize = function(_) {\n    nodes = _;\n    initialize();\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.distanceMin = function(_) {\n    return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);\n  };\n\n  force.distanceMax = function(_) {\n    return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);\n  };\n\n  force.theta = function(_) {\n    return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);\n  };\n\n  return force;\n}\n","import constant from \"./constant\";\n\nexport default function(radius, x, y) {\n  var nodes,\n      strength = constant(0.1),\n      strengths,\n      radiuses;\n\n  if (typeof radius !== \"function\") radius = constant(+radius);\n  if (x == null) x = 0;\n  if (y == null) y = 0;\n\n  function force(alpha) {\n    for (var i = 0, n = nodes.length; i < n; ++i) {\n      var node = nodes[i],\n          dx = node.x - x || 1e-6,\n          dy = node.y - y || 1e-6,\n          r = Math.sqrt(dx * dx + dy * dy),\n          k = (radiuses[i] - r) * strengths[i] * alpha / r;\n      node.vx += dx * k;\n      node.vy += dy * k;\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length;\n    strengths = new Array(n);\n    radiuses = new Array(n);\n    for (i = 0; i < n; ++i) {\n      radiuses[i] = +radius(nodes[i], i, nodes);\n      strengths[i] = isNaN(radiuses[i]) ? 0 : +strength(nodes[i], i, nodes);\n    }\n  }\n\n  force.initialize = function(_) {\n    nodes = _, initialize();\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.radius = function(_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : radius;\n  };\n\n  force.x = function(_) {\n    return arguments.length ? (x = +_, force) : x;\n  };\n\n  force.y = function(_) {\n    return arguments.length ? (y = +_, force) : y;\n  };\n\n  return force;\n}\n","import constant from \"./constant\";\n\nexport default function(x) {\n  var strength = constant(0.1),\n      nodes,\n      strengths,\n      xz;\n\n  if (typeof x !== \"function\") x = constant(x == null ? 0 : +x);\n\n  function force(alpha) {\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\n      node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length;\n    strengths = new Array(n);\n    xz = new Array(n);\n    for (i = 0; i < n; ++i) {\n      strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n    }\n  }\n\n  force.initialize = function(_) {\n    nodes = _;\n    initialize();\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.x = function(_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : x;\n  };\n\n  return force;\n}\n","import constant from \"./constant\";\n\nexport default function(y) {\n  var strength = constant(0.1),\n      nodes,\n      strengths,\n      yz;\n\n  if (typeof y !== \"function\") y = constant(y == null ? 0 : +y);\n\n  function force(alpha) {\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\n      node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length;\n    strengths = new Array(n);\n    yz = new Array(n);\n    for (i = 0; i < n; ++i) {\n      strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n    }\n  }\n\n  force.initialize = function(_) {\n    nodes = _;\n    initialize();\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.y = function(_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : y;\n  };\n\n  return force;\n}\n","// Computes the decimal coefficient and exponent of the specified number x with\n// significant digits p, where x is positive and p is in [1, 21] or undefined.\n// For example, formatDecimal(1.23) returns [\"123\", 0].\nexport default function(x, p) {\n  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf(\"e\")) < 0) return null; // NaN, ±Infinity\n  var i, coefficient = x.slice(0, i);\n\n  // The string returned by toExponential either has the form \\d\\.\\d+e[-+]\\d+\n  // (e.g., 1.2e+3) or the form \\de[-+]\\d+ (e.g., 1e+3).\n  return [\n    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,\n    +x.slice(i + 1)\n  ];\n}\n","import formatDecimal from \"./formatDecimal\";\n\nexport default function(x) {\n  return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN;\n}\n","// [[fill]align][sign][symbol][0][width][,][.precision][~][type]\nvar re = /^(?:(.)?([<>=^]))?([+\\-( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?(~)?([a-z%])?$/i;\n\nexport default function formatSpecifier(specifier) {\n  return new FormatSpecifier(specifier);\n}\n\nformatSpecifier.prototype = FormatSpecifier.prototype; // instanceof\n\nfunction FormatSpecifier(specifier) {\n  if (!(match = re.exec(specifier))) throw new Error(\"invalid format: \" + specifier);\n  var match;\n  this.fill = match[1] || \" \";\n  this.align = match[2] || \">\";\n  this.sign = match[3] || \"-\";\n  this.symbol = match[4] || \"\";\n  this.zero = !!match[5];\n  this.width = match[6] && +match[6];\n  this.comma = !!match[7];\n  this.precision = match[8] && +match[8].slice(1);\n  this.trim = !!match[9];\n  this.type = match[10] || \"\";\n}\n\nFormatSpecifier.prototype.toString = function() {\n  return this.fill\n      + this.align\n      + this.sign\n      + this.symbol\n      + (this.zero ? \"0\" : \"\")\n      + (this.width == null ? \"\" : Math.max(1, this.width | 0))\n      + (this.comma ? \",\" : \"\")\n      + (this.precision == null ? \"\" : \".\" + Math.max(0, this.precision | 0))\n      + (this.trim ? \"~\" : \"\")\n      + this.type;\n};\n","// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.\nexport default function(s) {\n  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {\n    switch (s[i]) {\n      case \".\": i0 = i1 = i; break;\n      case \"0\": if (i0 === 0) i0 = i; i1 = i; break;\n      default: if (i0 > 0) { if (!+s[i]) break out; i0 = 0; } break;\n    }\n  }\n  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;\n}\n","import formatDecimal from \"./formatDecimal\";\n\nexport var prefixExponent;\n\nexport default function(x, p) {\n  var d = formatDecimal(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1],\n      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,\n      n = coefficient.length;\n  return i === n ? coefficient\n      : i > n ? coefficient + new Array(i - n + 1).join(\"0\")\n      : i > 0 ? coefficient.slice(0, i) + \".\" + coefficient.slice(i)\n      : \"0.\" + new Array(1 - i).join(\"0\") + formatDecimal(x, Math.max(0, p + i - 1))[0]; // less than 1y!\n}\n","import formatLocale from \"./locale\";\n\nvar locale;\nexport var format;\nexport var formatPrefix;\n\ndefaultLocale({\n  decimal: \".\",\n  thousands: \",\",\n  grouping: [3],\n  currency: [\"$\", \"\"]\n});\n\nexport default function defaultLocale(definition) {\n  locale = formatLocale(definition);\n  format = locale.format;\n  formatPrefix = locale.formatPrefix;\n  return locale;\n}\n","import formatDecimal from \"./formatDecimal\";\n\nexport default function(x, p) {\n  var d = formatDecimal(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1];\n  return exponent < 0 ? \"0.\" + new Array(-exponent).join(\"0\") + coefficient\n      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + \".\" + coefficient.slice(exponent + 1)\n      : coefficient + new Array(exponent - coefficient.length + 2).join(\"0\");\n}\n","import formatPrefixAuto from \"./formatPrefixAuto\";\nimport formatRounded from \"./formatRounded\";\n\nexport default {\n  \"%\": function(x, p) { return (x * 100).toFixed(p); },\n  \"b\": function(x) { return Math.round(x).toString(2); },\n  \"c\": function(x) { return x + \"\"; },\n  \"d\": function(x) { return Math.round(x).toString(10); },\n  \"e\": function(x, p) { return x.toExponential(p); },\n  \"f\": function(x, p) { return x.toFixed(p); },\n  \"g\": function(x, p) { return x.toPrecision(p); },\n  \"o\": function(x) { return Math.round(x).toString(8); },\n  \"p\": function(x, p) { return formatRounded(x * 100, p); },\n  \"r\": formatRounded,\n  \"s\": formatPrefixAuto,\n  \"X\": function(x) { return Math.round(x).toString(16).toUpperCase(); },\n  \"x\": function(x) { return Math.round(x).toString(16); }\n};\n","export default function(x) {\n  return x;\n}\n","import exponent from \"./exponent\";\nimport formatGroup from \"./formatGroup\";\nimport formatNumerals from \"./formatNumerals\";\nimport formatSpecifier from \"./formatSpecifier\";\nimport formatTrim from \"./formatTrim\";\nimport formatTypes from \"./formatTypes\";\nimport {prefixExponent} from \"./formatPrefixAuto\";\nimport identity from \"./identity\";\n\nvar prefixes = [\"y\",\"z\",\"a\",\"f\",\"p\",\"n\",\"µ\",\"m\",\"\",\"k\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\nexport default function(locale) {\n  var group = locale.grouping && locale.thousands ? formatGroup(locale.grouping, locale.thousands) : identity,\n      currency = locale.currency,\n      decimal = locale.decimal,\n      numerals = locale.numerals ? formatNumerals(locale.numerals) : identity,\n      percent = locale.percent || \"%\";\n\n  function newFormat(specifier) {\n    specifier = formatSpecifier(specifier);\n\n    var fill = specifier.fill,\n        align = specifier.align,\n        sign = specifier.sign,\n        symbol = specifier.symbol,\n        zero = specifier.zero,\n        width = specifier.width,\n        comma = specifier.comma,\n        precision = specifier.precision,\n        trim = specifier.trim,\n        type = specifier.type;\n\n    // The \"n\" type is an alias for \",g\".\n    if (type === \"n\") comma = true, type = \"g\";\n\n    // The \"\" type, and any invalid type, is an alias for \".12~g\".\n    else if (!formatTypes[type]) precision == null && (precision = 12), trim = true, type = \"g\";\n\n    // If zero fill is specified, padding goes after sign and before digits.\n    if (zero || (fill === \"0\" && align === \"=\")) zero = true, fill = \"0\", align = \"=\";\n\n    // Compute the prefix and suffix.\n    // For SI-prefix, the suffix is lazily computed.\n    var prefix = symbol === \"$\" ? currency[0] : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n        suffix = symbol === \"$\" ? currency[1] : /[%p]/.test(type) ? percent : \"\";\n\n    // What format function should we use?\n    // Is this an integer type?\n    // Can this type generate exponential notation?\n    var formatType = formatTypes[type],\n        maybeSuffix = /[defgprs%]/.test(type);\n\n    // Set the default precision if not specified,\n    // or clamp the specified precision to the supported range.\n    // For significant precision, it must be in [1, 21].\n    // For fixed precision, it must be in [0, 20].\n    precision = precision == null ? 6\n        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))\n        : Math.max(0, Math.min(20, precision));\n\n    function format(value) {\n      var valuePrefix = prefix,\n          valueSuffix = suffix,\n          i, n, c;\n\n      if (type === \"c\") {\n        valueSuffix = formatType(value) + valueSuffix;\n        value = \"\";\n      } else {\n        value = +value;\n\n        // Perform the initial formatting.\n        var valueNegative = value < 0;\n        value = formatType(Math.abs(value), precision);\n\n        // Trim insignificant zeros.\n        if (trim) value = formatTrim(value);\n\n        // If a negative value rounds to zero during formatting, treat as positive.\n        if (valueNegative && +value === 0) valueNegative = false;\n\n        // Compute the prefix and suffix.\n        valuePrefix = (valueNegative ? (sign === \"(\" ? sign : \"-\") : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n        valueSuffix = (type === \"s\" ? prefixes[8 + prefixExponent / 3] : \"\") + valueSuffix + (valueNegative && sign === \"(\" ? \")\" : \"\");\n\n        // Break the formatted value into the integer “value” part that can be\n        // grouped, and fractional or exponential “suffix” part that is not.\n        if (maybeSuffix) {\n          i = -1, n = value.length;\n          while (++i < n) {\n            if (c = value.charCodeAt(i), 48 > c || c > 57) {\n              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n              value = value.slice(0, i);\n              break;\n            }\n          }\n        }\n      }\n\n      // If the fill character is not \"0\", grouping is applied before padding.\n      if (comma && !zero) value = group(value, Infinity);\n\n      // Compute the padding.\n      var length = valuePrefix.length + value.length + valueSuffix.length,\n          padding = length < width ? new Array(width - length + 1).join(fill) : \"\";\n\n      // If the fill character is \"0\", grouping is applied after padding.\n      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\";\n\n      // Reconstruct the final output based on the desired alignment.\n      switch (align) {\n        case \"<\": value = valuePrefix + value + valueSuffix + padding; break;\n        case \"=\": value = valuePrefix + padding + value + valueSuffix; break;\n        case \"^\": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;\n        default: value = padding + valuePrefix + value + valueSuffix; break;\n      }\n\n      return numerals(value);\n    }\n\n    format.toString = function() {\n      return specifier + \"\";\n    };\n\n    return format;\n  }\n\n  function formatPrefix(specifier, value) {\n    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = \"f\", specifier)),\n        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,\n        k = Math.pow(10, -e),\n        prefix = prefixes[8 + e / 3];\n    return function(value) {\n      return f(k * value) + prefix;\n    };\n  }\n\n  return {\n    format: newFormat,\n    formatPrefix: formatPrefix\n  };\n}\n","export default function(grouping, thousands) {\n  return function(value, width) {\n    var i = value.length,\n        t = [],\n        j = 0,\n        g = grouping[0],\n        length = 0;\n\n    while (i > 0 && g > 0) {\n      if (length + g + 1 > width) g = Math.max(1, width - length);\n      t.push(value.substring(i -= g, i + g));\n      if ((length += g + 1) > width) break;\n      g = grouping[j = (j + 1) % grouping.length];\n    }\n\n    return t.reverse().join(thousands);\n  };\n}\n","export default function(numerals) {\n  return function(value) {\n    return value.replace(/[0-9]/g, function(i) {\n      return numerals[+i];\n    });\n  };\n}\n","import exponent from \"./exponent\";\n\nexport default function(step) {\n  return Math.max(0, -exponent(Math.abs(step)));\n}\n","import exponent from \"./exponent\";\n\nexport default function(step, value) {\n  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));\n}\n","import exponent from \"./exponent\";\n\nexport default function(step, max) {\n  step = Math.abs(step), max = Math.abs(max) - step;\n  return Math.max(0, exponent(max) - exponent(step)) + 1;\n}\n","// Adds floating point numbers with twice the normal precision.\n// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and\n// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)\n// 305–363 (1997).\n// Code adapted from GeographicLib by Charles F. F. Karney,\n// http://geographiclib.sourceforge.net/\n\nexport default function() {\n  return new Adder;\n}\n\nfunction Adder() {\n  this.reset();\n}\n\nAdder.prototype = {\n  constructor: Adder,\n  reset: function() {\n    this.s = // rounded value\n    this.t = 0; // exact error\n  },\n  add: function(y) {\n    add(temp, y, this.t);\n    add(this, temp.s, this.s);\n    if (this.s) this.t += temp.t;\n    else this.s = temp.t;\n  },\n  valueOf: function() {\n    return this.s;\n  }\n};\n\nvar temp = new Adder;\n\nfunction add(adder, a, b) {\n  var x = adder.s = a + b,\n      bv = x - a,\n      av = x - bv;\n  adder.t = (a - av) + (b - bv);\n}\n","export var epsilon = 1e-6;\nexport var epsilon2 = 1e-12;\nexport var pi = Math.PI;\nexport var halfPi = pi / 2;\nexport var quarterPi = pi / 4;\nexport var tau = pi * 2;\n\nexport var degrees = 180 / pi;\nexport var radians = pi / 180;\n\nexport var abs = Math.abs;\nexport var atan = Math.atan;\nexport var atan2 = Math.atan2;\nexport var cos = Math.cos;\nexport var ceil = Math.ceil;\nexport var exp = Math.exp;\nexport var floor = Math.floor;\nexport var log = Math.log;\nexport var pow = Math.pow;\nexport var sin = Math.sin;\nexport var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };\nexport var sqrt = Math.sqrt;\nexport var tan = Math.tan;\n\nexport function acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\n\nexport function asin(x) {\n  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);\n}\n\nexport function haversin(x) {\n  return (x = sin(x / 2)) * x;\n}\n","export default function noop() {}\n","function streamGeometry(geometry, stream) {\n  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {\n    streamGeometryType[geometry.type](geometry, stream);\n  }\n}\n\nvar streamObjectType = {\n  Feature: function(object, stream) {\n    streamGeometry(object.geometry, stream);\n  },\n  FeatureCollection: function(object, stream) {\n    var features = object.features, i = -1, n = features.length;\n    while (++i < n) streamGeometry(features[i].geometry, stream);\n  }\n};\n\nvar streamGeometryType = {\n  Sphere: function(object, stream) {\n    stream.sphere();\n  },\n  Point: function(object, stream) {\n    object = object.coordinates;\n    stream.point(object[0], object[1], object[2]);\n  },\n  MultiPoint: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);\n  },\n  LineString: function(object, stream) {\n    streamLine(object.coordinates, stream, 0);\n  },\n  MultiLineString: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) streamLine(coordinates[i], stream, 0);\n  },\n  Polygon: function(object, stream) {\n    streamPolygon(object.coordinates, stream);\n  },\n  MultiPolygon: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) streamPolygon(coordinates[i], stream);\n  },\n  GeometryCollection: function(object, stream) {\n    var geometries = object.geometries, i = -1, n = geometries.length;\n    while (++i < n) streamGeometry(geometries[i], stream);\n  }\n};\n\nfunction streamLine(coordinates, stream, closed) {\n  var i = -1, n = coordinates.length - closed, coordinate;\n  stream.lineStart();\n  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);\n  stream.lineEnd();\n}\n\nfunction streamPolygon(coordinates, stream) {\n  var i = -1, n = coordinates.length;\n  stream.polygonStart();\n  while (++i < n) streamLine(coordinates[i], stream, 1);\n  stream.polygonEnd();\n}\n\nexport default function(object, stream) {\n  if (object && streamObjectType.hasOwnProperty(object.type)) {\n    streamObjectType[object.type](object, stream);\n  } else {\n    streamGeometry(object, stream);\n  }\n}\n","import adder from \"./adder\";\nimport {atan2, cos, quarterPi, radians, sin, tau} from \"./math\";\nimport noop from \"./noop\";\nimport stream from \"./stream\";\n\nexport var areaRingSum = adder();\n\nvar areaSum = adder(),\n    lambda00,\n    phi00,\n    lambda0,\n    cosPhi0,\n    sinPhi0;\n\nexport var areaStream = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function() {\n    areaRingSum.reset();\n    areaStream.lineStart = areaRingStart;\n    areaStream.lineEnd = areaRingEnd;\n  },\n  polygonEnd: function() {\n    var areaRing = +areaRingSum;\n    areaSum.add(areaRing < 0 ? tau + areaRing : areaRing);\n    this.lineStart = this.lineEnd = this.point = noop;\n  },\n  sphere: function() {\n    areaSum.add(tau);\n  }\n};\n\nfunction areaRingStart() {\n  areaStream.point = areaPointFirst;\n}\n\nfunction areaRingEnd() {\n  areaPoint(lambda00, phi00);\n}\n\nfunction areaPointFirst(lambda, phi) {\n  areaStream.point = areaPoint;\n  lambda00 = lambda, phi00 = phi;\n  lambda *= radians, phi *= radians;\n  lambda0 = lambda, cosPhi0 = cos(phi = phi / 2 + quarterPi), sinPhi0 = sin(phi);\n}\n\nfunction areaPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  phi = phi / 2 + quarterPi; // half the angular distance from south pole\n\n  // Spherical excess E for a spherical triangle with vertices: south pole,\n  // previous point, current point.  Uses a formula derived from Cagnoli’s\n  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\n  var dLambda = lambda - lambda0,\n      sdLambda = dLambda >= 0 ? 1 : -1,\n      adLambda = sdLambda * dLambda,\n      cosPhi = cos(phi),\n      sinPhi = sin(phi),\n      k = sinPhi0 * sinPhi,\n      u = cosPhi0 * cosPhi + k * cos(adLambda),\n      v = k * sdLambda * sin(adLambda);\n  areaRingSum.add(atan2(v, u));\n\n  // Advance the previous points.\n  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;\n}\n\nexport default function(object) {\n  areaSum.reset();\n  stream(object, areaStream);\n  return areaSum * 2;\n}\n","import {asin, atan2, cos, sin, sqrt} from \"./math\";\n\nexport function spherical(cartesian) {\n  return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];\n}\n\nexport function cartesian(spherical) {\n  var lambda = spherical[0], phi = spherical[1], cosPhi = cos(phi);\n  return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];\n}\n\nexport function cartesianDot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\nexport function cartesianCross(a, b) {\n  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];\n}\n\n// TODO return a\nexport function cartesianAddInPlace(a, b) {\n  a[0] += b[0], a[1] += b[1], a[2] += b[2];\n}\n\nexport function cartesianScale(vector, k) {\n  return [vector[0] * k, vector[1] * k, vector[2] * k];\n}\n\n// TODO return d\nexport function cartesianNormalizeInPlace(d) {\n  var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n  d[0] /= l, d[1] /= l, d[2] /= l;\n}\n","import adder from \"./adder\";\nimport {areaStream, areaRingSum} from \"./area\";\nimport {cartesian, cartesianCross, cartesianNormalizeInPlace, spherical} from \"./cartesian\";\nimport {abs, degrees, epsilon, radians} from \"./math\";\nimport stream from \"./stream\";\n\nvar lambda0, phi0, lambda1, phi1, // bounds\n    lambda2, // previous lambda-coordinate\n    lambda00, phi00, // first point\n    p0, // previous 3D point\n    deltaSum = adder(),\n    ranges,\n    range;\n\nvar boundsStream = {\n  point: boundsPoint,\n  lineStart: boundsLineStart,\n  lineEnd: boundsLineEnd,\n  polygonStart: function() {\n    boundsStream.point = boundsRingPoint;\n    boundsStream.lineStart = boundsRingStart;\n    boundsStream.lineEnd = boundsRingEnd;\n    deltaSum.reset();\n    areaStream.polygonStart();\n  },\n  polygonEnd: function() {\n    areaStream.polygonEnd();\n    boundsStream.point = boundsPoint;\n    boundsStream.lineStart = boundsLineStart;\n    boundsStream.lineEnd = boundsLineEnd;\n    if (areaRingSum < 0) lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);\n    else if (deltaSum > epsilon) phi1 = 90;\n    else if (deltaSum < -epsilon) phi0 = -90;\n    range[0] = lambda0, range[1] = lambda1;\n  }\n};\n\nfunction boundsPoint(lambda, phi) {\n  ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);\n  if (phi < phi0) phi0 = phi;\n  if (phi > phi1) phi1 = phi;\n}\n\nfunction linePoint(lambda, phi) {\n  var p = cartesian([lambda * radians, phi * radians]);\n  if (p0) {\n    var normal = cartesianCross(p0, p),\n        equatorial = [normal[1], -normal[0], 0],\n        inflection = cartesianCross(equatorial, normal);\n    cartesianNormalizeInPlace(inflection);\n    inflection = spherical(inflection);\n    var delta = lambda - lambda2,\n        sign = delta > 0 ? 1 : -1,\n        lambdai = inflection[0] * degrees * sign,\n        phii,\n        antimeridian = abs(delta) > 180;\n    if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n      phii = inflection[1] * degrees;\n      if (phii > phi1) phi1 = phii;\n    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n      phii = -inflection[1] * degrees;\n      if (phii < phi0) phi0 = phii;\n    } else {\n      if (phi < phi0) phi0 = phi;\n      if (phi > phi1) phi1 = phi;\n    }\n    if (antimeridian) {\n      if (lambda < lambda2) {\n        if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;\n      } else {\n        if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;\n      }\n    } else {\n      if (lambda1 >= lambda0) {\n        if (lambda < lambda0) lambda0 = lambda;\n        if (lambda > lambda1) lambda1 = lambda;\n      } else {\n        if (lambda > lambda2) {\n          if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;\n        } else {\n          if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;\n        }\n      }\n    }\n  } else {\n    ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);\n  }\n  if (phi < phi0) phi0 = phi;\n  if (phi > phi1) phi1 = phi;\n  p0 = p, lambda2 = lambda;\n}\n\nfunction boundsLineStart() {\n  boundsStream.point = linePoint;\n}\n\nfunction boundsLineEnd() {\n  range[0] = lambda0, range[1] = lambda1;\n  boundsStream.point = boundsPoint;\n  p0 = null;\n}\n\nfunction boundsRingPoint(lambda, phi) {\n  if (p0) {\n    var delta = lambda - lambda2;\n    deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);\n  } else {\n    lambda00 = lambda, phi00 = phi;\n  }\n  areaStream.point(lambda, phi);\n  linePoint(lambda, phi);\n}\n\nfunction boundsRingStart() {\n  areaStream.lineStart();\n}\n\nfunction boundsRingEnd() {\n  boundsRingPoint(lambda00, phi00);\n  areaStream.lineEnd();\n  if (abs(deltaSum) > epsilon) lambda0 = -(lambda1 = 180);\n  range[0] = lambda0, range[1] = lambda1;\n  p0 = null;\n}\n\n// Finds the left-right distance between two longitudes.\n// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want\n// the distance between ±180° to be 360°.\nfunction angle(lambda0, lambda1) {\n  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;\n}\n\nfunction rangeCompare(a, b) {\n  return a[0] - b[0];\n}\n\nfunction rangeContains(range, x) {\n  return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\n}\n\nexport default function(feature) {\n  var i, n, a, b, merged, deltaMax, delta;\n\n  phi1 = lambda1 = -(lambda0 = phi0 = Infinity);\n  ranges = [];\n  stream(feature, boundsStream);\n\n  // First, sort ranges by their minimum longitudes.\n  if (n = ranges.length) {\n    ranges.sort(rangeCompare);\n\n    // Then, merge any ranges that overlap.\n    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {\n      b = ranges[i];\n      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {\n        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\n        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\n      } else {\n        merged.push(a = b);\n      }\n    }\n\n    // Finally, find the largest gap between the merged ranges.\n    // The final bounding box will be the inverse of this gap.\n    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {\n      b = merged[i];\n      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0 = b[0], lambda1 = a[1];\n    }\n  }\n\n  ranges = range = null;\n\n  return lambda0 === Infinity || phi0 === Infinity\n      ? [[NaN, NaN], [NaN, NaN]]\n      : [[lambda0, phi0], [lambda1, phi1]];\n}\n","import {asin, atan2, cos, degrees, epsilon, epsilon2, radians, sin, sqrt} from \"./math\";\nimport noop from \"./noop\";\nimport stream from \"./stream\";\n\nvar W0, W1,\n    X0, Y0, Z0,\n    X1, Y1, Z1,\n    X2, Y2, Z2,\n    lambda00, phi00, // first point\n    x0, y0, z0; // previous point\n\nvar centroidStream = {\n  sphere: noop,\n  point: centroidPoint,\n  lineStart: centroidLineStart,\n  lineEnd: centroidLineEnd,\n  polygonStart: function() {\n    centroidStream.lineStart = centroidRingStart;\n    centroidStream.lineEnd = centroidRingEnd;\n  },\n  polygonEnd: function() {\n    centroidStream.lineStart = centroidLineStart;\n    centroidStream.lineEnd = centroidLineEnd;\n  }\n};\n\n// Arithmetic mean of Cartesian vectors.\nfunction centroidPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi);\n  centroidPointCartesian(cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi));\n}\n\nfunction centroidPointCartesian(x, y, z) {\n  ++W0;\n  X0 += (x - X0) / W0;\n  Y0 += (y - Y0) / W0;\n  Z0 += (z - Z0) / W0;\n}\n\nfunction centroidLineStart() {\n  centroidStream.point = centroidLinePointFirst;\n}\n\nfunction centroidLinePointFirst(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi);\n  x0 = cosPhi * cos(lambda);\n  y0 = cosPhi * sin(lambda);\n  z0 = sin(phi);\n  centroidStream.point = centroidLinePoint;\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidLinePoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi),\n      x = cosPhi * cos(lambda),\n      y = cosPhi * sin(lambda),\n      z = sin(phi),\n      w = atan2(sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n  W1 += w;\n  X1 += w * (x0 + (x0 = x));\n  Y1 += w * (y0 + (y0 = y));\n  Z1 += w * (z0 + (z0 = z));\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidLineEnd() {\n  centroidStream.point = centroidPoint;\n}\n\n// See J. E. Brock, The Inertia Tensor for a Spherical Triangle,\n// J. Applied Mechanics 42, 239 (1975).\nfunction centroidRingStart() {\n  centroidStream.point = centroidRingPointFirst;\n}\n\nfunction centroidRingEnd() {\n  centroidRingPoint(lambda00, phi00);\n  centroidStream.point = centroidPoint;\n}\n\nfunction centroidRingPointFirst(lambda, phi) {\n  lambda00 = lambda, phi00 = phi;\n  lambda *= radians, phi *= radians;\n  centroidStream.point = centroidRingPoint;\n  var cosPhi = cos(phi);\n  x0 = cosPhi * cos(lambda);\n  y0 = cosPhi * sin(lambda);\n  z0 = sin(phi);\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidRingPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi),\n      x = cosPhi * cos(lambda),\n      y = cosPhi * sin(lambda),\n      z = sin(phi),\n      cx = y0 * z - z0 * y,\n      cy = z0 * x - x0 * z,\n      cz = x0 * y - y0 * x,\n      m = sqrt(cx * cx + cy * cy + cz * cz),\n      w = asin(m), // line weight = angle\n      v = m && -w / m; // area weight multiplier\n  X2 += v * cx;\n  Y2 += v * cy;\n  Z2 += v * cz;\n  W1 += w;\n  X1 += w * (x0 + (x0 = x));\n  Y1 += w * (y0 + (y0 = y));\n  Z1 += w * (z0 + (z0 = z));\n  centroidPointCartesian(x0, y0, z0);\n}\n\nexport default function(object) {\n  W0 = W1 =\n  X0 = Y0 = Z0 =\n  X1 = Y1 = Z1 =\n  X2 = Y2 = Z2 = 0;\n  stream(object, centroidStream);\n\n  var x = X2,\n      y = Y2,\n      z = Z2,\n      m = x * x + y * y + z * z;\n\n  // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.\n  if (m < epsilon2) {\n    x = X1, y = Y1, z = Z1;\n    // If the feature has zero length, fall back to arithmetic mean of point vectors.\n    if (W1 < epsilon) x = X0, y = Y0, z = Z0;\n    m = x * x + y * y + z * z;\n    // If the feature still has an undefined ccentroid, then return.\n    if (m < epsilon2) return [NaN, NaN];\n  }\n\n  return [atan2(y, x) * degrees, asin(z / sqrt(m)) * degrees];\n}\n","export default function(x) {\n  return function() {\n    return x;\n  };\n}\n","export default function(a, b) {\n\n  function compose(x, y) {\n    return x = a(x, y), b(x[0], x[1]);\n  }\n\n  if (a.invert && b.invert) compose.invert = function(x, y) {\n    return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n  };\n\n  return compose;\n}\n","import compose from \"./compose\";\nimport {abs, asin, atan2, cos, degrees, pi, radians, sin, tau} from \"./math\";\n\nfunction rotationIdentity(lambda, phi) {\n  return [abs(lambda) > pi ? lambda + Math.round(-lambda / tau) * tau : lambda, phi];\n}\n\nrotationIdentity.invert = rotationIdentity;\n\nexport function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {\n  return (deltaLambda %= tau) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))\n    : rotationLambda(deltaLambda))\n    : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)\n    : rotationIdentity);\n}\n\nfunction forwardRotationLambda(deltaLambda) {\n  return function(lambda, phi) {\n    return lambda += deltaLambda, [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];\n  };\n}\n\nfunction rotationLambda(deltaLambda) {\n  var rotation = forwardRotationLambda(deltaLambda);\n  rotation.invert = forwardRotationLambda(-deltaLambda);\n  return rotation;\n}\n\nfunction rotationPhiGamma(deltaPhi, deltaGamma) {\n  var cosDeltaPhi = cos(deltaPhi),\n      sinDeltaPhi = sin(deltaPhi),\n      cosDeltaGamma = cos(deltaGamma),\n      sinDeltaGamma = sin(deltaGamma);\n\n  function rotation(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaPhi + x * sinDeltaPhi;\n    return [\n      atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),\n      asin(k * cosDeltaGamma + y * sinDeltaGamma)\n    ];\n  }\n\n  rotation.invert = function(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaGamma - y * sinDeltaGamma;\n    return [\n      atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),\n      asin(k * cosDeltaPhi - x * sinDeltaPhi)\n    ];\n  };\n\n  return rotation;\n}\n\nexport default function(rotate) {\n  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);\n\n  function forward(coordinates) {\n    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  }\n\n  forward.invert = function(coordinates) {\n    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  };\n\n  return forward;\n}\n","import {cartesian, cartesianNormalizeInPlace, spherical} from \"./cartesian\";\nimport constant from \"./constant\";\nimport {acos, cos, degrees, epsilon, radians, sin, tau} from \"./math\";\nimport {rotateRadians} from \"./rotation\";\n\n// Generates a circle centered at [0°, 0°], with a given radius and precision.\nexport function circleStream(stream, radius, delta, direction, t0, t1) {\n  if (!delta) return;\n  var cosRadius = cos(radius),\n      sinRadius = sin(radius),\n      step = direction * delta;\n  if (t0 == null) {\n    t0 = radius + direction * tau;\n    t1 = radius - step / 2;\n  } else {\n    t0 = circleRadius(cosRadius, t0);\n    t1 = circleRadius(cosRadius, t1);\n    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau;\n  }\n  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {\n    point = spherical([cosRadius, -sinRadius * cos(t), -sinRadius * sin(t)]);\n    stream.point(point[0], point[1]);\n  }\n}\n\n// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].\nfunction circleRadius(cosRadius, point) {\n  point = cartesian(point), point[0] -= cosRadius;\n  cartesianNormalizeInPlace(point);\n  var radius = acos(-point[1]);\n  return ((-point[2] < 0 ? -radius : radius) + tau - epsilon) % tau;\n}\n\nexport default function() {\n  var center = constant([0, 0]),\n      radius = constant(90),\n      precision = constant(6),\n      ring,\n      rotate,\n      stream = {point: point};\n\n  function point(x, y) {\n    ring.push(x = rotate(x, y));\n    x[0] *= degrees, x[1] *= degrees;\n  }\n\n  function circle() {\n    var c = center.apply(this, arguments),\n        r = radius.apply(this, arguments) * radians,\n        p = precision.apply(this, arguments) * radians;\n    ring = [];\n    rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;\n    circleStream(stream, r, p, 1);\n    c = {type: \"Polygon\", coordinates: [ring]};\n    ring = rotate = null;\n    return c;\n  }\n\n  circle.center = function(_) {\n    return arguments.length ? (center = typeof _ === \"function\" ? _ : constant([+_[0], +_[1]]), circle) : center;\n  };\n\n  circle.radius = function(_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), circle) : radius;\n  };\n\n  circle.precision = function(_) {\n    return arguments.length ? (precision = typeof _ === \"function\" ? _ : constant(+_), circle) : precision;\n  };\n\n  return circle;\n}\n","import noop from \"../noop\";\n\nexport default function() {\n  var lines = [],\n      line;\n  return {\n    point: function(x, y) {\n      line.push([x, y]);\n    },\n    lineStart: function() {\n      lines.push(line = []);\n    },\n    lineEnd: noop,\n    rejoin: function() {\n      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n    },\n    result: function() {\n      var result = lines;\n      lines = [];\n      line = null;\n      return result;\n    }\n  };\n}\n","import {abs, epsilon} from \"./math\";\n\nexport default function(a, b) {\n  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;\n}\n","import pointEqual from \"../pointEqual\";\n\nfunction Intersection(point, points, other, entry) {\n  this.x = point;\n  this.z = points;\n  this.o = other; // another intersection\n  this.e = entry; // is an entry?\n  this.v = false; // visited\n  this.n = this.p = null; // next & previous\n}\n\n// A generalized polygon clipping algorithm: given a polygon that has been cut\n// into its visible line segments, and rejoins the segments by interpolating\n// along the clip edge.\nexport default function(segments, compareIntersection, startInside, interpolate, stream) {\n  var subject = [],\n      clip = [],\n      i,\n      n;\n\n  segments.forEach(function(segment) {\n    if ((n = segment.length - 1) <= 0) return;\n    var n, p0 = segment[0], p1 = segment[n], x;\n\n    // If the first and last points of a segment are coincident, then treat as a\n    // closed ring. TODO if all rings are closed, then the winding order of the\n    // exterior ring should be checked.\n    if (pointEqual(p0, p1)) {\n      stream.lineStart();\n      for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);\n      stream.lineEnd();\n      return;\n    }\n\n    subject.push(x = new Intersection(p0, segment, null, true));\n    clip.push(x.o = new Intersection(p0, null, x, false));\n    subject.push(x = new Intersection(p1, segment, null, false));\n    clip.push(x.o = new Intersection(p1, null, x, true));\n  });\n\n  if (!subject.length) return;\n\n  clip.sort(compareIntersection);\n  link(subject);\n  link(clip);\n\n  for (i = 0, n = clip.length; i < n; ++i) {\n    clip[i].e = startInside = !startInside;\n  }\n\n  var start = subject[0],\n      points,\n      point;\n\n  while (1) {\n    // Find first unvisited intersection.\n    var current = start,\n        isSubject = true;\n    while (current.v) if ((current = current.n) === start) return;\n    points = current.z;\n    stream.lineStart();\n    do {\n      current.v = current.o.v = true;\n      if (current.e) {\n        if (isSubject) {\n          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);\n        } else {\n          interpolate(current.x, current.n.x, 1, stream);\n        }\n        current = current.n;\n      } else {\n        if (isSubject) {\n          points = current.p.z;\n          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);\n        } else {\n          interpolate(current.x, current.p.x, -1, stream);\n        }\n        current = current.p;\n      }\n      current = current.o;\n      points = current.z;\n      isSubject = !isSubject;\n    } while (!current.v);\n    stream.lineEnd();\n  }\n}\n\nfunction link(array) {\n  if (!(n = array.length)) return;\n  var n,\n      i = 0,\n      a = array[0],\n      b;\n  while (++i < n) {\n    a.n = b = array[i];\n    b.p = a;\n    a = b;\n  }\n  a.n = b = array[0];\n  b.p = a;\n}\n","import adder from \"./adder\";\nimport {cartesian, cartesianCross, cartesianNormalizeInPlace} from \"./cartesian\";\nimport {asin, atan2, cos, epsilon, halfPi, pi, quarterPi, sin, tau} from \"./math\";\n\nvar sum = adder();\n\nexport default function(polygon, point) {\n  var lambda = point[0],\n      phi = point[1],\n      sinPhi = sin(phi),\n      normal = [sin(lambda), -cos(lambda), 0],\n      angle = 0,\n      winding = 0;\n\n  sum.reset();\n\n  if (sinPhi === 1) phi = halfPi + epsilon;\n  else if (sinPhi === -1) phi = -halfPi - epsilon;\n\n  for (var i = 0, n = polygon.length; i < n; ++i) {\n    if (!(m = (ring = polygon[i]).length)) continue;\n    var ring,\n        m,\n        point0 = ring[m - 1],\n        lambda0 = point0[0],\n        phi0 = point0[1] / 2 + quarterPi,\n        sinPhi0 = sin(phi0),\n        cosPhi0 = cos(phi0);\n\n    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {\n      var point1 = ring[j],\n          lambda1 = point1[0],\n          phi1 = point1[1] / 2 + quarterPi,\n          sinPhi1 = sin(phi1),\n          cosPhi1 = cos(phi1),\n          delta = lambda1 - lambda0,\n          sign = delta >= 0 ? 1 : -1,\n          absDelta = sign * delta,\n          antimeridian = absDelta > pi,\n          k = sinPhi0 * sinPhi1;\n\n      sum.add(atan2(k * sign * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));\n      angle += antimeridian ? delta + sign * tau : delta;\n\n      // Are the longitudes either side of the point’s meridian (lambda),\n      // and are the latitudes smaller than the parallel (phi)?\n      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {\n        var arc = cartesianCross(cartesian(point0), cartesian(point1));\n        cartesianNormalizeInPlace(arc);\n        var intersection = cartesianCross(normal, arc);\n        cartesianNormalizeInPlace(intersection);\n        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);\n        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {\n          winding += antimeridian ^ delta >= 0 ? 1 : -1;\n        }\n      }\n    }\n  }\n\n  // First, determine whether the South pole is inside or outside:\n  //\n  // It is inside if:\n  // * the polygon winds around it in a clockwise direction.\n  // * the polygon does not (cumulatively) wind around it, but has a negative\n  //   (counter-clockwise) area.\n  //\n  // Second, count the (signed) number of times a segment crosses a lambda\n  // from the point to the South pole.  If it is zero, then the point is the\n  // same side as the South pole.\n\n  return (angle < -epsilon || angle < epsilon && sum < -epsilon) ^ (winding & 1);\n}\n","import clipBuffer from \"./buffer\";\nimport clipRejoin from \"./rejoin\";\nimport {epsilon, halfPi} from \"../math\";\nimport polygonContains from \"../polygonContains\";\nimport {merge} from \"d3-array\";\n\nexport default function(pointVisible, clipLine, interpolate, start) {\n  return function(sink) {\n    var line = clipLine(sink),\n        ringBuffer = clipBuffer(),\n        ringSink = clipLine(ringBuffer),\n        polygonStarted = false,\n        polygon,\n        segments,\n        ring;\n\n    var clip = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        clip.point = pointRing;\n        clip.lineStart = ringStart;\n        clip.lineEnd = ringEnd;\n        segments = [];\n        polygon = [];\n      },\n      polygonEnd: function() {\n        clip.point = point;\n        clip.lineStart = lineStart;\n        clip.lineEnd = lineEnd;\n        segments = merge(segments);\n        var startInside = polygonContains(polygon, start);\n        if (segments.length) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          clipRejoin(segments, compareIntersection, startInside, interpolate, sink);\n        } else if (startInside) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n          interpolate(null, null, 1, sink);\n          sink.lineEnd();\n        }\n        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;\n        segments = polygon = null;\n      },\n      sphere: function() {\n        sink.polygonStart();\n        sink.lineStart();\n        interpolate(null, null, 1, sink);\n        sink.lineEnd();\n        sink.polygonEnd();\n      }\n    };\n\n    function point(lambda, phi) {\n      if (pointVisible(lambda, phi)) sink.point(lambda, phi);\n    }\n\n    function pointLine(lambda, phi) {\n      line.point(lambda, phi);\n    }\n\n    function lineStart() {\n      clip.point = pointLine;\n      line.lineStart();\n    }\n\n    function lineEnd() {\n      clip.point = point;\n      line.lineEnd();\n    }\n\n    function pointRing(lambda, phi) {\n      ring.push([lambda, phi]);\n      ringSink.point(lambda, phi);\n    }\n\n    function ringStart() {\n      ringSink.lineStart();\n      ring = [];\n    }\n\n    function ringEnd() {\n      pointRing(ring[0][0], ring[0][1]);\n      ringSink.lineEnd();\n\n      var clean = ringSink.clean(),\n          ringSegments = ringBuffer.result(),\n          i, n = ringSegments.length, m,\n          segment,\n          point;\n\n      ring.pop();\n      polygon.push(ring);\n      ring = null;\n\n      if (!n) return;\n\n      // No intersections.\n      if (clean & 1) {\n        segment = ringSegments[0];\n        if ((m = segment.length - 1) > 0) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n          for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);\n          sink.lineEnd();\n        }\n        return;\n      }\n\n      // Rejoin connected segments.\n      // TODO reuse ringBuffer.rejoin()?\n      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n\n      segments.push(ringSegments.filter(validSegment));\n    }\n\n    return clip;\n  };\n}\n\nfunction validSegment(segment) {\n  return segment.length > 1;\n}\n\n// Intersections are sorted along the clip edge. For both antimeridian cutting\n// and circle clipping, the same comparison is used.\nfunction compareIntersection(a, b) {\n  return ((a = a.x)[0] < 0 ? a[1] - halfPi - epsilon : halfPi - a[1])\n       - ((b = b.x)[0] < 0 ? b[1] - halfPi - epsilon : halfPi - b[1]);\n}\n","import clip from \"./index\";\nimport {abs, atan, cos, epsilon, halfPi, pi, sin} from \"../math\";\n\nexport default clip(\n  function() { return true; },\n  clipAntimeridianLine,\n  clipAntimeridianInterpolate,\n  [-pi, -halfPi]\n);\n\n// Takes a line and cuts into visible segments. Return values: 0 - there were\n// intersections or the line was empty; 1 - no intersections; 2 - there were\n// intersections, and the first and last segments should be rejoined.\nfunction clipAntimeridianLine(stream) {\n  var lambda0 = NaN,\n      phi0 = NaN,\n      sign0 = NaN,\n      clean; // no intersections\n\n  return {\n    lineStart: function() {\n      stream.lineStart();\n      clean = 1;\n    },\n    point: function(lambda1, phi1) {\n      var sign1 = lambda1 > 0 ? pi : -pi,\n          delta = abs(lambda1 - lambda0);\n      if (abs(delta - pi) < epsilon) { // line crosses a pole\n        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi : -halfPi);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        stream.point(lambda1, phi0);\n        clean = 0;\n      } else if (sign0 !== sign1 && delta >= pi) { // line crosses antimeridian\n        if (abs(lambda0 - sign0) < epsilon) lambda0 -= sign0 * epsilon; // handle degeneracies\n        if (abs(lambda1 - sign1) < epsilon) lambda1 -= sign1 * epsilon;\n        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        clean = 0;\n      }\n      stream.point(lambda0 = lambda1, phi0 = phi1);\n      sign0 = sign1;\n    },\n    lineEnd: function() {\n      stream.lineEnd();\n      lambda0 = phi0 = NaN;\n    },\n    clean: function() {\n      return 2 - clean; // if intersections, rejoin first and last segments\n    }\n  };\n}\n\nfunction clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {\n  var cosPhi0,\n      cosPhi1,\n      sinLambda0Lambda1 = sin(lambda0 - lambda1);\n  return abs(sinLambda0Lambda1) > epsilon\n      ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1)\n          - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0))\n          / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))\n      : (phi0 + phi1) / 2;\n}\n\nfunction clipAntimeridianInterpolate(from, to, direction, stream) {\n  var phi;\n  if (from == null) {\n    phi = direction * halfPi;\n    stream.point(-pi, phi);\n    stream.point(0, phi);\n    stream.point(pi, phi);\n    stream.point(pi, 0);\n    stream.point(pi, -phi);\n    stream.point(0, -phi);\n    stream.point(-pi, -phi);\n    stream.point(-pi, 0);\n    stream.point(-pi, phi);\n  } else if (abs(from[0] - to[0]) > epsilon) {\n    var lambda = from[0] < to[0] ? pi : -pi;\n    phi = direction * lambda / 2;\n    stream.point(-lambda, phi);\n    stream.point(0, phi);\n    stream.point(lambda, phi);\n  } else {\n    stream.point(to[0], to[1]);\n  }\n}\n","import {cartesian, cartesianAddInPlace, cartesianCross, cartesianDot, cartesianScale, spherical} from \"../cartesian\";\nimport {circleStream} from \"../circle\";\nimport {abs, cos, epsilon, pi, radians, sqrt} from \"../math\";\nimport pointEqual from \"../pointEqual\";\nimport clip from \"./index\";\n\nexport default function(radius) {\n  var cr = cos(radius),\n      delta = 6 * radians,\n      smallRadius = cr > 0,\n      notHemisphere = abs(cr) > epsilon; // TODO optimise for this common case\n\n  function interpolate(from, to, direction, stream) {\n    circleStream(stream, radius, delta, direction, from, to);\n  }\n\n  function visible(lambda, phi) {\n    return cos(lambda) * cos(phi) > cr;\n  }\n\n  // Takes a line and cuts into visible segments. Return values used for polygon\n  // clipping: 0 - there were intersections or the line was empty; 1 - no\n  // intersections 2 - there were intersections, and the first and last segments\n  // should be rejoined.\n  function clipLine(stream) {\n    var point0, // previous point\n        c0, // code for previous point\n        v0, // visibility of previous point\n        v00, // visibility of first point\n        clean; // no intersections\n    return {\n      lineStart: function() {\n        v00 = v0 = false;\n        clean = 1;\n      },\n      point: function(lambda, phi) {\n        var point1 = [lambda, phi],\n            point2,\n            v = visible(lambda, phi),\n            c = smallRadius\n              ? v ? 0 : code(lambda, phi)\n              : v ? code(lambda + (lambda < 0 ? pi : -pi), phi) : 0;\n        if (!point0 && (v00 = v0 = v)) stream.lineStart();\n        // Handle degeneracies.\n        // TODO ignore if not clipping polygons.\n        if (v !== v0) {\n          point2 = intersect(point0, point1);\n          if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2)) {\n            point1[0] += epsilon;\n            point1[1] += epsilon;\n            v = visible(point1[0], point1[1]);\n          }\n        }\n        if (v !== v0) {\n          clean = 0;\n          if (v) {\n            // outside going in\n            stream.lineStart();\n            point2 = intersect(point1, point0);\n            stream.point(point2[0], point2[1]);\n          } else {\n            // inside going out\n            point2 = intersect(point0, point1);\n            stream.point(point2[0], point2[1]);\n            stream.lineEnd();\n          }\n          point0 = point2;\n        } else if (notHemisphere && point0 && smallRadius ^ v) {\n          var t;\n          // If the codes for two points are different, or are both zero,\n          // and there this segment intersects with the small circle.\n          if (!(c & c0) && (t = intersect(point1, point0, true))) {\n            clean = 0;\n            if (smallRadius) {\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1]);\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n            } else {\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1]);\n            }\n          }\n        }\n        if (v && (!point0 || !pointEqual(point0, point1))) {\n          stream.point(point1[0], point1[1]);\n        }\n        point0 = point1, v0 = v, c0 = c;\n      },\n      lineEnd: function() {\n        if (v0) stream.lineEnd();\n        point0 = null;\n      },\n      // Rejoin first and last segments if there were intersections and the first\n      // and last points were visible.\n      clean: function() {\n        return clean | ((v00 && v0) << 1);\n      }\n    };\n  }\n\n  // Intersects the great circle between a and b with the clip circle.\n  function intersect(a, b, two) {\n    var pa = cartesian(a),\n        pb = cartesian(b);\n\n    // We have two planes, n1.p = d1 and n2.p = d2.\n    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).\n    var n1 = [1, 0, 0], // normal\n        n2 = cartesianCross(pa, pb),\n        n2n2 = cartesianDot(n2, n2),\n        n1n2 = n2[0], // cartesianDot(n1, n2),\n        determinant = n2n2 - n1n2 * n1n2;\n\n    // Two polar points.\n    if (!determinant) return !two && a;\n\n    var c1 =  cr * n2n2 / determinant,\n        c2 = -cr * n1n2 / determinant,\n        n1xn2 = cartesianCross(n1, n2),\n        A = cartesianScale(n1, c1),\n        B = cartesianScale(n2, c2);\n    cartesianAddInPlace(A, B);\n\n    // Solve |p(t)|^2 = 1.\n    var u = n1xn2,\n        w = cartesianDot(A, u),\n        uu = cartesianDot(u, u),\n        t2 = w * w - uu * (cartesianDot(A, A) - 1);\n\n    if (t2 < 0) return;\n\n    var t = sqrt(t2),\n        q = cartesianScale(u, (-w - t) / uu);\n    cartesianAddInPlace(q, A);\n    q = spherical(q);\n\n    if (!two) return q;\n\n    // Two intersection points.\n    var lambda0 = a[0],\n        lambda1 = b[0],\n        phi0 = a[1],\n        phi1 = b[1],\n        z;\n\n    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;\n\n    var delta = lambda1 - lambda0,\n        polar = abs(delta - pi) < epsilon,\n        meridian = polar || delta < epsilon;\n\n    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;\n\n    // Check that the first point is between a and b.\n    if (meridian\n        ? polar\n          ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon ? phi0 : phi1)\n          : phi0 <= q[1] && q[1] <= phi1\n        : delta > pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {\n      var q1 = cartesianScale(u, (-w + t) / uu);\n      cartesianAddInPlace(q1, A);\n      return [q, spherical(q1)];\n    }\n  }\n\n  // Generates a 4-bit vector representing the location of a point relative to\n  // the small circle's bounding box.\n  function code(lambda, phi) {\n    var r = smallRadius ? radius : pi - radius,\n        code = 0;\n    if (lambda < -r) code |= 1; // left\n    else if (lambda > r) code |= 2; // right\n    if (phi < -r) code |= 4; // below\n    else if (phi > r) code |= 8; // above\n    return code;\n  }\n\n  return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi, radius - pi]);\n}\n","export default function(a, b, x0, y0, x1, y1) {\n  var ax = a[0],\n      ay = a[1],\n      bx = b[0],\n      by = b[1],\n      t0 = 0,\n      t1 = 1,\n      dx = bx - ax,\n      dy = by - ay,\n      r;\n\n  r = x0 - ax;\n  if (!dx && r > 0) return;\n  r /= dx;\n  if (dx < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dx > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = x1 - ax;\n  if (!dx && r < 0) return;\n  r /= dx;\n  if (dx < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dx > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  r = y0 - ay;\n  if (!dy && r > 0) return;\n  r /= dy;\n  if (dy < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dy > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = y1 - ay;\n  if (!dy && r < 0) return;\n  r /= dy;\n  if (dy < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dy > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;\n  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;\n  return true;\n}\n","import {abs, epsilon} from \"../math\";\nimport clipBuffer from \"./buffer\";\nimport clipLine from \"./line\";\nimport clipRejoin from \"./rejoin\";\nimport {merge} from \"d3-array\";\n\nvar clipMax = 1e9, clipMin = -clipMax;\n\n// TODO Use d3-polygon’s polygonContains here for the ring check?\n// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?\n\nexport default function clipRectangle(x0, y0, x1, y1) {\n\n  function visible(x, y) {\n    return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n  }\n\n  function interpolate(from, to, direction, stream) {\n    var a = 0, a1 = 0;\n    if (from == null\n        || (a = corner(from, direction)) !== (a1 = corner(to, direction))\n        || comparePoint(from, to) < 0 ^ direction > 0) {\n      do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\n      while ((a = (a + direction + 4) % 4) !== a1);\n    } else {\n      stream.point(to[0], to[1]);\n    }\n  }\n\n  function corner(p, direction) {\n    return abs(p[0] - x0) < epsilon ? direction > 0 ? 0 : 3\n        : abs(p[0] - x1) < epsilon ? direction > 0 ? 2 : 1\n        : abs(p[1] - y0) < epsilon ? direction > 0 ? 1 : 0\n        : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon\n  }\n\n  function compareIntersection(a, b) {\n    return comparePoint(a.x, b.x);\n  }\n\n  function comparePoint(a, b) {\n    var ca = corner(a, 1),\n        cb = corner(b, 1);\n    return ca !== cb ? ca - cb\n        : ca === 0 ? b[1] - a[1]\n        : ca === 1 ? a[0] - b[0]\n        : ca === 2 ? a[1] - b[1]\n        : b[0] - a[0];\n  }\n\n  return function(stream) {\n    var activeStream = stream,\n        bufferStream = clipBuffer(),\n        segments,\n        polygon,\n        ring,\n        x__, y__, v__, // first point\n        x_, y_, v_, // previous point\n        first,\n        clean;\n\n    var clipStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: polygonStart,\n      polygonEnd: polygonEnd\n    };\n\n    function point(x, y) {\n      if (visible(x, y)) activeStream.point(x, y);\n    }\n\n    function polygonInside() {\n      var winding = 0;\n\n      for (var i = 0, n = polygon.length; i < n; ++i) {\n        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {\n          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];\n          if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }\n          else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }\n        }\n      }\n\n      return winding;\n    }\n\n    // Buffer geometry within a polygon and then clip it en masse.\n    function polygonStart() {\n      activeStream = bufferStream, segments = [], polygon = [], clean = true;\n    }\n\n    function polygonEnd() {\n      var startInside = polygonInside(),\n          cleanInside = clean && startInside,\n          visible = (segments = merge(segments)).length;\n      if (cleanInside || visible) {\n        stream.polygonStart();\n        if (cleanInside) {\n          stream.lineStart();\n          interpolate(null, null, 1, stream);\n          stream.lineEnd();\n        }\n        if (visible) {\n          clipRejoin(segments, compareIntersection, startInside, interpolate, stream);\n        }\n        stream.polygonEnd();\n      }\n      activeStream = stream, segments = polygon = ring = null;\n    }\n\n    function lineStart() {\n      clipStream.point = linePoint;\n      if (polygon) polygon.push(ring = []);\n      first = true;\n      v_ = false;\n      x_ = y_ = NaN;\n    }\n\n    // TODO rather than special-case polygons, simply handle them separately.\n    // Ideally, coincident intersection points should be jittered to avoid\n    // clipping issues.\n    function lineEnd() {\n      if (segments) {\n        linePoint(x__, y__);\n        if (v__ && v_) bufferStream.rejoin();\n        segments.push(bufferStream.result());\n      }\n      clipStream.point = point;\n      if (v_) activeStream.lineEnd();\n    }\n\n    function linePoint(x, y) {\n      var v = visible(x, y);\n      if (polygon) ring.push([x, y]);\n      if (first) {\n        x__ = x, y__ = y, v__ = v;\n        first = false;\n        if (v) {\n          activeStream.lineStart();\n          activeStream.point(x, y);\n        }\n      } else {\n        if (v && v_) activeStream.point(x, y);\n        else {\n          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],\n              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];\n          if (clipLine(a, b, x0, y0, x1, y1)) {\n            if (!v_) {\n              activeStream.lineStart();\n              activeStream.point(a[0], a[1]);\n            }\n            activeStream.point(b[0], b[1]);\n            if (!v) activeStream.lineEnd();\n            clean = false;\n          } else if (v) {\n            activeStream.lineStart();\n            activeStream.point(x, y);\n            clean = false;\n          }\n        }\n      }\n      x_ = x, y_ = y, v_ = v;\n    }\n\n    return clipStream;\n  };\n}\n","import clipRectangle from \"./rectangle\";\n\nexport default function() {\n  var x0 = 0,\n      y0 = 0,\n      x1 = 960,\n      y1 = 500,\n      cache,\n      cacheStream,\n      clip;\n\n  return clip = {\n    stream: function(stream) {\n      return cache && cacheStream === stream ? cache : cache = clipRectangle(x0, y0, x1, y1)(cacheStream = stream);\n    },\n    extent: function(_) {\n      return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];\n    }\n  };\n}\n","import adder from \"./adder\";\nimport {abs, atan2, cos, radians, sin, sqrt} from \"./math\";\nimport noop from \"./noop\";\nimport stream from \"./stream\";\n\nvar lengthSum = adder(),\n    lambda0,\n    sinPhi0,\n    cosPhi0;\n\nvar lengthStream = {\n  sphere: noop,\n  point: noop,\n  lineStart: lengthLineStart,\n  lineEnd: noop,\n  polygonStart: noop,\n  polygonEnd: noop\n};\n\nfunction lengthLineStart() {\n  lengthStream.point = lengthPointFirst;\n  lengthStream.lineEnd = lengthLineEnd;\n}\n\nfunction lengthLineEnd() {\n  lengthStream.point = lengthStream.lineEnd = noop;\n}\n\nfunction lengthPointFirst(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  lambda0 = lambda, sinPhi0 = sin(phi), cosPhi0 = cos(phi);\n  lengthStream.point = lengthPoint;\n}\n\nfunction lengthPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var sinPhi = sin(phi),\n      cosPhi = cos(phi),\n      delta = abs(lambda - lambda0),\n      cosDelta = cos(delta),\n      sinDelta = sin(delta),\n      x = cosPhi * sinDelta,\n      y = cosPhi0 * sinPhi - sinPhi0 * cosPhi * cosDelta,\n      z = sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosDelta;\n  lengthSum.add(atan2(sqrt(x * x + y * y), z));\n  lambda0 = lambda, sinPhi0 = sinPhi, cosPhi0 = cosPhi;\n}\n\nexport default function(object) {\n  lengthSum.reset();\n  stream(object, lengthStream);\n  return +lengthSum;\n}\n","import length from \"./length\";\n\nvar coordinates = [null, null],\n    object = {type: \"LineString\", coordinates: coordinates};\n\nexport default function(a, b) {\n  coordinates[0] = a;\n  coordinates[1] = b;\n  return length(object);\n}\n","import {default as polygonContains} from \"./polygonContains\";\nimport {default as distance} from \"./distance\";\nimport {epsilon, radians} from \"./math\";\n\nvar containsObjectType = {\n  Feature: function(object, point) {\n    return containsGeometry(object.geometry, point);\n  },\n  FeatureCollection: function(object, point) {\n    var features = object.features, i = -1, n = features.length;\n    while (++i < n) if (containsGeometry(features[i].geometry, point)) return true;\n    return false;\n  }\n};\n\nvar containsGeometryType = {\n  Sphere: function() {\n    return true;\n  },\n  Point: function(object, point) {\n    return containsPoint(object.coordinates, point);\n  },\n  MultiPoint: function(object, point) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) if (containsPoint(coordinates[i], point)) return true;\n    return false;\n  },\n  LineString: function(object, point) {\n    return containsLine(object.coordinates, point);\n  },\n  MultiLineString: function(object, point) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) if (containsLine(coordinates[i], point)) return true;\n    return false;\n  },\n  Polygon: function(object, point) {\n    return containsPolygon(object.coordinates, point);\n  },\n  MultiPolygon: function(object, point) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) if (containsPolygon(coordinates[i], point)) return true;\n    return false;\n  },\n  GeometryCollection: function(object, point) {\n    var geometries = object.geometries, i = -1, n = geometries.length;\n    while (++i < n) if (containsGeometry(geometries[i], point)) return true;\n    return false;\n  }\n};\n\nfunction containsGeometry(geometry, point) {\n  return geometry && containsGeometryType.hasOwnProperty(geometry.type)\n      ? containsGeometryType[geometry.type](geometry, point)\n      : false;\n}\n\nfunction containsPoint(coordinates, point) {\n  return distance(coordinates, point) === 0;\n}\n\nfunction containsLine(coordinates, point) {\n  var ab = distance(coordinates[0], coordinates[1]),\n      ao = distance(coordinates[0], point),\n      ob = distance(point, coordinates[1]);\n  return ao + ob <= ab + epsilon;\n}\n\nfunction containsPolygon(coordinates, point) {\n  return !!polygonContains(coordinates.map(ringRadians), pointRadians(point));\n}\n\nfunction ringRadians(ring) {\n  return ring = ring.map(pointRadians), ring.pop(), ring;\n}\n\nfunction pointRadians(point) {\n  return [point[0] * radians, point[1] * radians];\n}\n\nexport default function(object, point) {\n  return (object && containsObjectType.hasOwnProperty(object.type)\n      ? containsObjectType[object.type]\n      : containsGeometry)(object, point);\n}\n","import {range} from \"d3-array\";\nimport {abs, ceil, epsilon} from \"./math\";\n\nfunction graticuleX(y0, y1, dy) {\n  var y = range(y0, y1 - epsilon, dy).concat(y1);\n  return function(x) { return y.map(function(y) { return [x, y]; }); };\n}\n\nfunction graticuleY(x0, x1, dx) {\n  var x = range(x0, x1 - epsilon, dx).concat(x1);\n  return function(y) { return x.map(function(x) { return [x, y]; }); };\n}\n\nexport default function graticule() {\n  var x1, x0, X1, X0,\n      y1, y0, Y1, Y0,\n      dx = 10, dy = dx, DX = 90, DY = 360,\n      x, y, X, Y,\n      precision = 2.5;\n\n  function graticule() {\n    return {type: \"MultiLineString\", coordinates: lines()};\n  }\n\n  function lines() {\n    return range(ceil(X0 / DX) * DX, X1, DX).map(X)\n        .concat(range(ceil(Y0 / DY) * DY, Y1, DY).map(Y))\n        .concat(range(ceil(x0 / dx) * dx, x1, dx).filter(function(x) { return abs(x % DX) > epsilon; }).map(x))\n        .concat(range(ceil(y0 / dy) * dy, y1, dy).filter(function(y) { return abs(y % DY) > epsilon; }).map(y));\n  }\n\n  graticule.lines = function() {\n    return lines().map(function(coordinates) { return {type: \"LineString\", coordinates: coordinates}; });\n  };\n\n  graticule.outline = function() {\n    return {\n      type: \"Polygon\",\n      coordinates: [\n        X(X0).concat(\n        Y(Y1).slice(1),\n        X(X1).reverse().slice(1),\n        Y(Y0).reverse().slice(1))\n      ]\n    };\n  };\n\n  graticule.extent = function(_) {\n    if (!arguments.length) return graticule.extentMinor();\n    return graticule.extentMajor(_).extentMinor(_);\n  };\n\n  graticule.extentMajor = function(_) {\n    if (!arguments.length) return [[X0, Y0], [X1, Y1]];\n    X0 = +_[0][0], X1 = +_[1][0];\n    Y0 = +_[0][1], Y1 = +_[1][1];\n    if (X0 > X1) _ = X0, X0 = X1, X1 = _;\n    if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;\n    return graticule.precision(precision);\n  };\n\n  graticule.extentMinor = function(_) {\n    if (!arguments.length) return [[x0, y0], [x1, y1]];\n    x0 = +_[0][0], x1 = +_[1][0];\n    y0 = +_[0][1], y1 = +_[1][1];\n    if (x0 > x1) _ = x0, x0 = x1, x1 = _;\n    if (y0 > y1) _ = y0, y0 = y1, y1 = _;\n    return graticule.precision(precision);\n  };\n\n  graticule.step = function(_) {\n    if (!arguments.length) return graticule.stepMinor();\n    return graticule.stepMajor(_).stepMinor(_);\n  };\n\n  graticule.stepMajor = function(_) {\n    if (!arguments.length) return [DX, DY];\n    DX = +_[0], DY = +_[1];\n    return graticule;\n  };\n\n  graticule.stepMinor = function(_) {\n    if (!arguments.length) return [dx, dy];\n    dx = +_[0], dy = +_[1];\n    return graticule;\n  };\n\n  graticule.precision = function(_) {\n    if (!arguments.length) return precision;\n    precision = +_;\n    x = graticuleX(y0, y1, 90);\n    y = graticuleY(x0, x1, precision);\n    X = graticuleX(Y0, Y1, 90);\n    Y = graticuleY(X0, X1, precision);\n    return graticule;\n  };\n\n  return graticule\n      .extentMajor([[-180, -90 + epsilon], [180, 90 - epsilon]])\n      .extentMinor([[-180, -80 - epsilon], [180, 80 + epsilon]]);\n}\n\nexport function graticule10() {\n  return graticule()();\n}\n","import {asin, atan2, cos, degrees, haversin, radians, sin, sqrt} from \"./math\";\n\nexport default function(a, b) {\n  var x0 = a[0] * radians,\n      y0 = a[1] * radians,\n      x1 = b[0] * radians,\n      y1 = b[1] * radians,\n      cy0 = cos(y0),\n      sy0 = sin(y0),\n      cy1 = cos(y1),\n      sy1 = sin(y1),\n      kx0 = cy0 * cos(x0),\n      ky0 = cy0 * sin(x0),\n      kx1 = cy1 * cos(x1),\n      ky1 = cy1 * sin(x1),\n      d = 2 * asin(sqrt(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),\n      k = sin(d);\n\n  var interpolate = d ? function(t) {\n    var B = sin(t *= d) / k,\n        A = sin(d - t) / k,\n        x = A * kx0 + B * kx1,\n        y = A * ky0 + B * ky1,\n        z = A * sy0 + B * sy1;\n    return [\n      atan2(y, x) * degrees,\n      atan2(z, sqrt(x * x + y * y)) * degrees\n    ];\n  } : function() {\n    return [x0 * degrees, y0 * degrees];\n  };\n\n  interpolate.distance = d;\n\n  return interpolate;\n}\n","import adder from \"../adder\";\nimport {abs} from \"../math\";\nimport noop from \"../noop\";\n\nvar areaSum = adder(),\n    areaRingSum = adder(),\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar areaStream = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function() {\n    areaStream.lineStart = areaRingStart;\n    areaStream.lineEnd = areaRingEnd;\n  },\n  polygonEnd: function() {\n    areaStream.lineStart = areaStream.lineEnd = areaStream.point = noop;\n    areaSum.add(abs(areaRingSum));\n    areaRingSum.reset();\n  },\n  result: function() {\n    var area = areaSum / 2;\n    areaSum.reset();\n    return area;\n  }\n};\n\nfunction areaRingStart() {\n  areaStream.point = areaPointFirst;\n}\n\nfunction areaPointFirst(x, y) {\n  areaStream.point = areaPoint;\n  x00 = x0 = x, y00 = y0 = y;\n}\n\nfunction areaPoint(x, y) {\n  areaRingSum.add(y0 * x - x0 * y);\n  x0 = x, y0 = y;\n}\n\nfunction areaRingEnd() {\n  areaPoint(x00, y00);\n}\n\nexport default areaStream;\n","export default function(x) {\n  return x;\n}\n","import noop from \"../noop\";\n\nvar x0 = Infinity,\n    y0 = x0,\n    x1 = -x0,\n    y1 = x1;\n\nvar boundsStream = {\n  point: boundsPoint,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: noop,\n  polygonEnd: noop,\n  result: function() {\n    var bounds = [[x0, y0], [x1, y1]];\n    x1 = y1 = -(y0 = x0 = Infinity);\n    return bounds;\n  }\n};\n\nfunction boundsPoint(x, y) {\n  if (x < x0) x0 = x;\n  if (x > x1) x1 = x;\n  if (y < y0) y0 = y;\n  if (y > y1) y1 = y;\n}\n\nexport default boundsStream;\n","import {sqrt} from \"../math\";\n\n// TODO Enforce positive area for exterior, negative area for interior?\n\nvar X0 = 0,\n    Y0 = 0,\n    Z0 = 0,\n    X1 = 0,\n    Y1 = 0,\n    Z1 = 0,\n    X2 = 0,\n    Y2 = 0,\n    Z2 = 0,\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar centroidStream = {\n  point: centroidPoint,\n  lineStart: centroidLineStart,\n  lineEnd: centroidLineEnd,\n  polygonStart: function() {\n    centroidStream.lineStart = centroidRingStart;\n    centroidStream.lineEnd = centroidRingEnd;\n  },\n  polygonEnd: function() {\n    centroidStream.point = centroidPoint;\n    centroidStream.lineStart = centroidLineStart;\n    centroidStream.lineEnd = centroidLineEnd;\n  },\n  result: function() {\n    var centroid = Z2 ? [X2 / Z2, Y2 / Z2]\n        : Z1 ? [X1 / Z1, Y1 / Z1]\n        : Z0 ? [X0 / Z0, Y0 / Z0]\n        : [NaN, NaN];\n    X0 = Y0 = Z0 =\n    X1 = Y1 = Z1 =\n    X2 = Y2 = Z2 = 0;\n    return centroid;\n  }\n};\n\nfunction centroidPoint(x, y) {\n  X0 += x;\n  Y0 += y;\n  ++Z0;\n}\n\nfunction centroidLineStart() {\n  centroidStream.point = centroidPointFirstLine;\n}\n\nfunction centroidPointFirstLine(x, y) {\n  centroidStream.point = centroidPointLine;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nfunction centroidPointLine(x, y) {\n  var dx = x - x0, dy = y - y0, z = sqrt(dx * dx + dy * dy);\n  X1 += z * (x0 + x) / 2;\n  Y1 += z * (y0 + y) / 2;\n  Z1 += z;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nfunction centroidLineEnd() {\n  centroidStream.point = centroidPoint;\n}\n\nfunction centroidRingStart() {\n  centroidStream.point = centroidPointFirstRing;\n}\n\nfunction centroidRingEnd() {\n  centroidPointRing(x00, y00);\n}\n\nfunction centroidPointFirstRing(x, y) {\n  centroidStream.point = centroidPointRing;\n  centroidPoint(x00 = x0 = x, y00 = y0 = y);\n}\n\nfunction centroidPointRing(x, y) {\n  var dx = x - x0,\n      dy = y - y0,\n      z = sqrt(dx * dx + dy * dy);\n\n  X1 += z * (x0 + x) / 2;\n  Y1 += z * (y0 + y) / 2;\n  Z1 += z;\n\n  z = y0 * x - x0 * y;\n  X2 += z * (x0 + x);\n  Y2 += z * (y0 + y);\n  Z2 += z * 3;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nexport default centroidStream;\n","import {tau} from \"../math\";\nimport noop from \"../noop\";\n\nexport default function PathContext(context) {\n  this._context = context;\n}\n\nPathContext.prototype = {\n  _radius: 4.5,\n  pointRadius: function(_) {\n    return this._radius = _, this;\n  },\n  polygonStart: function() {\n    this._line = 0;\n  },\n  polygonEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line === 0) this._context.closePath();\n    this._point = NaN;\n  },\n  point: function(x, y) {\n    switch (this._point) {\n      case 0: {\n        this._context.moveTo(x, y);\n        this._point = 1;\n        break;\n      }\n      case 1: {\n        this._context.lineTo(x, y);\n        break;\n      }\n      default: {\n        this._context.moveTo(x + this._radius, y);\n        this._context.arc(x, y, this._radius, 0, tau);\n        break;\n      }\n    }\n  },\n  result: noop\n};\n","import adder from \"../adder\";\nimport {sqrt} from \"../math\";\nimport noop from \"../noop\";\n\nvar lengthSum = adder(),\n    lengthRing,\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar lengthStream = {\n  point: noop,\n  lineStart: function() {\n    lengthStream.point = lengthPointFirst;\n  },\n  lineEnd: function() {\n    if (lengthRing) lengthPoint(x00, y00);\n    lengthStream.point = noop;\n  },\n  polygonStart: function() {\n    lengthRing = true;\n  },\n  polygonEnd: function() {\n    lengthRing = null;\n  },\n  result: function() {\n    var length = +lengthSum;\n    lengthSum.reset();\n    return length;\n  }\n};\n\nfunction lengthPointFirst(x, y) {\n  lengthStream.point = lengthPoint;\n  x00 = x0 = x, y00 = y0 = y;\n}\n\nfunction lengthPoint(x, y) {\n  x0 -= x, y0 -= y;\n  lengthSum.add(sqrt(x0 * x0 + y0 * y0));\n  x0 = x, y0 = y;\n}\n\nexport default lengthStream;\n","export default function PathString() {\n  this._string = [];\n}\n\nPathString.prototype = {\n  _radius: 4.5,\n  _circle: circle(4.5),\n  pointRadius: function(_) {\n    if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;\n    return this;\n  },\n  polygonStart: function() {\n    this._line = 0;\n  },\n  polygonEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line === 0) this._string.push(\"Z\");\n    this._point = NaN;\n  },\n  point: function(x, y) {\n    switch (this._point) {\n      case 0: {\n        this._string.push(\"M\", x, \",\", y);\n        this._point = 1;\n        break;\n      }\n      case 1: {\n        this._string.push(\"L\", x, \",\", y);\n        break;\n      }\n      default: {\n        if (this._circle == null) this._circle = circle(this._radius);\n        this._string.push(\"M\", x, \",\", y, this._circle);\n        break;\n      }\n    }\n  },\n  result: function() {\n    if (this._string.length) {\n      var result = this._string.join(\"\");\n      this._string = [];\n      return result;\n    } else {\n      return null;\n    }\n  }\n};\n\nfunction circle(radius) {\n  return \"m0,\" + radius\n      + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius\n      + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + 2 * radius\n      + \"z\";\n}\n","import identity from \"../identity\";\nimport stream from \"../stream\";\nimport pathArea from \"./area\";\nimport pathBounds from \"./bounds\";\nimport pathCentroid from \"./centroid\";\nimport PathContext from \"./context\";\nimport pathMeasure from \"./measure\";\nimport PathString from \"./string\";\n\nexport default function(projection, context) {\n  var pointRadius = 4.5,\n      projectionStream,\n      contextStream;\n\n  function path(object) {\n    if (object) {\n      if (typeof pointRadius === \"function\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\n      stream(object, projectionStream(contextStream));\n    }\n    return contextStream.result();\n  }\n\n  path.area = function(object) {\n    stream(object, projectionStream(pathArea));\n    return pathArea.result();\n  };\n\n  path.measure = function(object) {\n    stream(object, projectionStream(pathMeasure));\n    return pathMeasure.result();\n  };\n\n  path.bounds = function(object) {\n    stream(object, projectionStream(pathBounds));\n    return pathBounds.result();\n  };\n\n  path.centroid = function(object) {\n    stream(object, projectionStream(pathCentroid));\n    return pathCentroid.result();\n  };\n\n  path.projection = function(_) {\n    return arguments.length ? (projectionStream = _ == null ? (projection = null, identity) : (projection = _).stream, path) : projection;\n  };\n\n  path.context = function(_) {\n    if (!arguments.length) return context;\n    contextStream = _ == null ? (context = null, new PathString) : new PathContext(context = _);\n    if (typeof pointRadius !== \"function\") contextStream.pointRadius(pointRadius);\n    return path;\n  };\n\n  path.pointRadius = function(_) {\n    if (!arguments.length) return pointRadius;\n    pointRadius = typeof _ === \"function\" ? _ : (contextStream.pointRadius(+_), +_);\n    return path;\n  };\n\n  return path.projection(projection).context(context);\n}\n","export default function(methods) {\n  return {\n    stream: transformer(methods)\n  };\n}\n\nexport function transformer(methods) {\n  return function(stream) {\n    var s = new TransformStream;\n    for (var key in methods) s[key] = methods[key];\n    s.stream = stream;\n    return s;\n  };\n}\n\nfunction TransformStream() {}\n\nTransformStream.prototype = {\n  constructor: TransformStream,\n  point: function(x, y) { this.stream.point(x, y); },\n  sphere: function() { this.stream.sphere(); },\n  lineStart: function() { this.stream.lineStart(); },\n  lineEnd: function() { this.stream.lineEnd(); },\n  polygonStart: function() { this.stream.polygonStart(); },\n  polygonEnd: function() { this.stream.polygonEnd(); }\n};\n","import {default as geoStream} from \"../stream\";\nimport boundsStream from \"../path/bounds\";\n\nfunction fit(projection, fitBounds, object) {\n  var clip = projection.clipExtent && projection.clipExtent();\n  projection.scale(150).translate([0, 0]);\n  if (clip != null) projection.clipExtent(null);\n  geoStream(object, projection.stream(boundsStream));\n  fitBounds(boundsStream.result());\n  if (clip != null) projection.clipExtent(clip);\n  return projection;\n}\n\nexport function fitExtent(projection, extent, object) {\n  return fit(projection, function(b) {\n    var w = extent[1][0] - extent[0][0],\n        h = extent[1][1] - extent[0][1],\n        k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),\n        x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,\n        y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\n\nexport function fitSize(projection, size, object) {\n  return fitExtent(projection, [[0, 0], size], object);\n}\n\nexport function fitWidth(projection, width, object) {\n  return fit(projection, function(b) {\n    var w = +width,\n        k = w / (b[1][0] - b[0][0]),\n        x = (w - k * (b[1][0] + b[0][0])) / 2,\n        y = -k * b[0][1];\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\n\nexport function fitHeight(projection, height, object) {\n  return fit(projection, function(b) {\n    var h = +height,\n        k = h / (b[1][1] - b[0][1]),\n        x = -k * b[0][0],\n        y = (h - k * (b[1][1] + b[0][1])) / 2;\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\n","import {cartesian} from \"../cartesian\";\nimport {abs, asin, atan2, cos, epsilon, radians, sqrt} from \"../math\";\nimport {transformer} from \"../transform\";\n\nvar maxDepth = 16, // maximum depth of subdivision\n    cosMinDistance = cos(30 * radians); // cos(minimum angular distance)\n\nexport default function(project, delta2) {\n  return +delta2 ? resample(project, delta2) : resampleNone(project);\n}\n\nfunction resampleNone(project) {\n  return transformer({\n    point: function(x, y) {\n      x = project(x, y);\n      this.stream.point(x[0], x[1]);\n    }\n  });\n}\n\nfunction resample(project, delta2) {\n\n  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {\n    var dx = x1 - x0,\n        dy = y1 - y0,\n        d2 = dx * dx + dy * dy;\n    if (d2 > 4 * delta2 && depth--) {\n      var a = a0 + a1,\n          b = b0 + b1,\n          c = c0 + c1,\n          m = sqrt(a * a + b * b + c * c),\n          phi2 = asin(c /= m),\n          lambda2 = abs(abs(c) - 1) < epsilon || abs(lambda0 - lambda1) < epsilon ? (lambda0 + lambda1) / 2 : atan2(b, a),\n          p = project(lambda2, phi2),\n          x2 = p[0],\n          y2 = p[1],\n          dx2 = x2 - x0,\n          dy2 = y2 - y0,\n          dz = dy * dx2 - dx * dy2;\n      if (dz * dz / d2 > delta2 // perpendicular projected distance\n          || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end\n          || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance\n        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);\n        stream.point(x2, y2);\n        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);\n      }\n    }\n  }\n  return function(stream) {\n    var lambda00, x00, y00, a00, b00, c00, // first point\n        lambda0, x0, y0, a0, b0, c0; // previous point\n\n    var resampleStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },\n      polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }\n    };\n\n    function point(x, y) {\n      x = project(x, y);\n      stream.point(x[0], x[1]);\n    }\n\n    function lineStart() {\n      x0 = NaN;\n      resampleStream.point = linePoint;\n      stream.lineStart();\n    }\n\n    function linePoint(lambda, phi) {\n      var c = cartesian([lambda, phi]), p = project(lambda, phi);\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n      stream.point(x0, y0);\n    }\n\n    function lineEnd() {\n      resampleStream.point = point;\n      stream.lineEnd();\n    }\n\n    function ringStart() {\n      lineStart();\n      resampleStream.point = ringPoint;\n      resampleStream.lineEnd = ringEnd;\n    }\n\n    function ringPoint(lambda, phi) {\n      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n      resampleStream.point = linePoint;\n    }\n\n    function ringEnd() {\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);\n      resampleStream.lineEnd = lineEnd;\n      lineEnd();\n    }\n\n    return resampleStream;\n  };\n}\n","import clipAntimeridian from \"../clip/antimeridian\";\nimport clipCircle from \"../clip/circle\";\nimport clipRectangle from \"../clip/rectangle\";\nimport compose from \"../compose\";\nimport identity from \"../identity\";\nimport {cos, degrees, radians, sin, sqrt} from \"../math\";\nimport {rotateRadians} from \"../rotation\";\nimport {transformer} from \"../transform\";\nimport {fitExtent, fitSize, fitWidth, fitHeight} from \"./fit\";\nimport resample from \"./resample\";\n\nvar transformRadians = transformer({\n  point: function(x, y) {\n    this.stream.point(x * radians, y * radians);\n  }\n});\n\nfunction transformRotate(rotate) {\n  return transformer({\n    point: function(x, y) {\n      var r = rotate(x, y);\n      return this.stream.point(r[0], r[1]);\n    }\n  });\n}\n\nfunction scaleTranslate(k, dx, dy) {\n  function transform(x, y) {\n    return [dx + k * x, dy - k * y];\n  }\n  transform.invert = function(x, y) {\n    return [(x - dx) / k, (dy - y) / k];\n  };\n  return transform;\n}\n\nfunction scaleTranslateRotate(k, dx, dy, alpha) {\n  var cosAlpha = cos(alpha),\n      sinAlpha = sin(alpha),\n      a = cosAlpha * k,\n      b = sinAlpha * k,\n      ai = cosAlpha / k,\n      bi = sinAlpha / k,\n      ci = (sinAlpha * dy - cosAlpha * dx) / k,\n      fi = (sinAlpha * dx + cosAlpha * dy) / k;\n  function transform(x, y) {\n    return [a * x - b * y + dx, dy - b * x - a * y];\n  }\n  transform.invert = function(x, y) {\n    return [ai * x - bi * y + ci, fi - bi * x - ai * y];\n  };\n  return transform;\n}\n\nexport default function projection(project) {\n  return projectionMutator(function() { return project; })();\n}\n\nexport function projectionMutator(projectAt) {\n  var project,\n      k = 150, // scale\n      x = 480, y = 250, // translate\n      lambda = 0, phi = 0, // center\n      deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, // pre-rotate\n      alpha = 0, // post-rotate\n      theta = null, preclip = clipAntimeridian, // pre-clip angle\n      x0 = null, y0, x1, y1, postclip = identity, // post-clip extent\n      delta2 = 0.5, // precision\n      projectResample,\n      projectTransform,\n      projectRotateTransform,\n      cache,\n      cacheStream;\n\n  function projection(point) {\n    return projectRotateTransform(point[0] * radians, point[1] * radians);\n  }\n\n  function invert(point) {\n    point = projectRotateTransform.invert(point[0], point[1]);\n    return point && [point[0] * degrees, point[1] * degrees];\n  }\n\n  projection.stream = function(stream) {\n    return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));\n  };\n\n  projection.preclip = function(_) {\n    return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;\n  };\n\n  projection.postclip = function(_) {\n    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;\n  };\n\n  projection.clipAngle = function(_) {\n    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees;\n  };\n\n  projection.clipExtent = function(_) {\n    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  projection.scale = function(_) {\n    return arguments.length ? (k = +_, recenter()) : k;\n  };\n\n  projection.translate = function(_) {\n    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];\n  };\n\n  projection.center = function(_) {\n    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];\n  };\n\n  projection.rotate = function(_) {\n    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];\n  };\n\n  projection.angle = function(_) {\n    return arguments.length ? (alpha = _ % 360 * radians, recenter()) : alpha * degrees;\n  };\n\n  projection.precision = function(_) {\n    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);\n  };\n\n  projection.fitExtent = function(extent, object) {\n    return fitExtent(projection, extent, object);\n  };\n\n  projection.fitSize = function(size, object) {\n    return fitSize(projection, size, object);\n  };\n\n  projection.fitWidth = function(width, object) {\n    return fitWidth(projection, width, object);\n  };\n\n  projection.fitHeight = function(height, object) {\n    return fitHeight(projection, height, object);\n  };\n\n  function recenter() {\n    var center = scaleTranslateRotate(k, 0, 0, alpha).apply(null, project(lambda, phi)),\n        transform = (alpha ? scaleTranslateRotate : scaleTranslate)(k, x - center[0], y - center[1], alpha);\n    rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma);\n    projectTransform = compose(project, transform);\n    projectRotateTransform = compose(rotate, projectTransform);\n    projectResample = resample(projectTransform, delta2);\n    return reset();\n  }\n\n  function reset() {\n    cache = cacheStream = null;\n    return projection;\n  }\n\n  return function() {\n    project = projectAt.apply(this, arguments);\n    projection.invert = project.invert && invert;\n    return recenter();\n  };\n}\n","import {degrees, pi, radians} from \"../math\";\nimport {projectionMutator} from \"./index\";\n\nexport function conicProjection(projectAt) {\n  var phi0 = 0,\n      phi1 = pi / 3,\n      m = projectionMutator(projectAt),\n      p = m(phi0, phi1);\n\n  p.parallels = function(_) {\n    return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees, phi1 * degrees];\n  };\n\n  return p;\n}\n","import {abs, asin, atan2, cos, epsilon, sign, sin, sqrt} from \"../math\";\nimport {conicProjection} from \"./conic\";\nimport {cylindricalEqualAreaRaw} from \"./cylindricalEqualArea\";\n\nexport function conicEqualAreaRaw(y0, y1) {\n  var sy0 = sin(y0), n = (sy0 + sin(y1)) / 2;\n\n  // Are the parallels symmetrical around the Equator?\n  if (abs(n) < epsilon) return cylindricalEqualAreaRaw(y0);\n\n  var c = 1 + sy0 * (2 * n - sy0), r0 = sqrt(c) / n;\n\n  function project(x, y) {\n    var r = sqrt(c - 2 * n * sin(y)) / n;\n    return [r * sin(x *= n), r0 - r * cos(x)];\n  }\n\n  project.invert = function(x, y) {\n    var r0y = r0 - y;\n    return [atan2(x, abs(r0y)) / n * sign(r0y), asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))];\n  };\n\n  return project;\n}\n\nexport default function() {\n  return conicProjection(conicEqualAreaRaw)\n      .scale(155.424)\n      .center([0, 33.6442]);\n}\n","import {asin, cos, sin} from \"../math\";\n\nexport function cylindricalEqualAreaRaw(phi0) {\n  var cosPhi0 = cos(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda * cosPhi0, sin(phi) / cosPhi0];\n  }\n\n  forward.invert = function(x, y) {\n    return [x / cosPhi0, asin(y * cosPhi0)];\n  };\n\n  return forward;\n}\n","import conicEqualArea from \"./conicEqualArea\";\n\nexport default function() {\n  return conicEqualArea()\n      .parallels([29.5, 45.5])\n      .scale(1070)\n      .translate([480, 250])\n      .rotate([96, 0])\n      .center([-0.6, 38.7]);\n}\n","import {epsilon} from \"../math\";\nimport albers from \"./albers\";\nimport conicEqualArea from \"./conicEqualArea\";\nimport {fitExtent, fitSize, fitWidth, fitHeight} from \"./fit\";\n\n// The projections must have mutually exclusive clip regions on the sphere,\n// as this will avoid emitting interleaving lines and polygons.\nfunction multiplex(streams) {\n  var n = streams.length;\n  return {\n    point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },\n    sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },\n    lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },\n    lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },\n    polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },\n    polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }\n  };\n}\n\n// A composite projection for the United States, configured by default for\n// 960×500. The projection also works quite well at 960×600 if you change the\n// scale to 1285 and adjust the translate accordingly. The set of standard\n// parallels for each region comes from USGS, which is published here:\n// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers\nexport default function() {\n  var cache,\n      cacheStream,\n      lower48 = albers(), lower48Point,\n      alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338\n      hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007\n      point, pointStream = {point: function(x, y) { point = [x, y]; }};\n\n  function albersUsa(coordinates) {\n    var x = coordinates[0], y = coordinates[1];\n    return point = null,\n        (lower48Point.point(x, y), point)\n        || (alaskaPoint.point(x, y), point)\n        || (hawaiiPoint.point(x, y), point);\n  }\n\n  albersUsa.invert = function(coordinates) {\n    var k = lower48.scale(),\n        t = lower48.translate(),\n        x = (coordinates[0] - t[0]) / k,\n        y = (coordinates[1] - t[1]) / k;\n    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska\n        : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii\n        : lower48).invert(coordinates);\n  };\n\n  albersUsa.stream = function(stream) {\n    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);\n  };\n\n  albersUsa.precision = function(_) {\n    if (!arguments.length) return lower48.precision();\n    lower48.precision(_), alaska.precision(_), hawaii.precision(_);\n    return reset();\n  };\n\n  albersUsa.scale = function(_) {\n    if (!arguments.length) return lower48.scale();\n    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);\n    return albersUsa.translate(lower48.translate());\n  };\n\n  albersUsa.translate = function(_) {\n    if (!arguments.length) return lower48.translate();\n    var k = lower48.scale(), x = +_[0], y = +_[1];\n\n    lower48Point = lower48\n        .translate(_)\n        .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])\n        .stream(pointStream);\n\n    alaskaPoint = alaska\n        .translate([x - 0.307 * k, y + 0.201 * k])\n        .clipExtent([[x - 0.425 * k + epsilon, y + 0.120 * k + epsilon], [x - 0.214 * k - epsilon, y + 0.234 * k - epsilon]])\n        .stream(pointStream);\n\n    hawaiiPoint = hawaii\n        .translate([x - 0.205 * k, y + 0.212 * k])\n        .clipExtent([[x - 0.214 * k + epsilon, y + 0.166 * k + epsilon], [x - 0.115 * k - epsilon, y + 0.234 * k - epsilon]])\n        .stream(pointStream);\n\n    return reset();\n  };\n\n  albersUsa.fitExtent = function(extent, object) {\n    return fitExtent(albersUsa, extent, object);\n  };\n\n  albersUsa.fitSize = function(size, object) {\n    return fitSize(albersUsa, size, object);\n  };\n\n  albersUsa.fitWidth = function(width, object) {\n    return fitWidth(albersUsa, width, object);\n  };\n\n  albersUsa.fitHeight = function(height, object) {\n    return fitHeight(albersUsa, height, object);\n  };\n\n  function reset() {\n    cache = cacheStream = null;\n    return albersUsa;\n  }\n\n  return albersUsa.scale(1070);\n}\n","import {asin, atan2, cos, sin, sqrt} from \"../math\";\n\nexport function azimuthalRaw(scale) {\n  return function(x, y) {\n    var cx = cos(x),\n        cy = cos(y),\n        k = scale(cx * cy);\n    return [\n      k * cy * sin(x),\n      k * sin(y)\n    ];\n  }\n}\n\nexport function azimuthalInvert(angle) {\n  return function(x, y) {\n    var z = sqrt(x * x + y * y),\n        c = angle(z),\n        sc = sin(c),\n        cc = cos(c);\n    return [\n      atan2(x * sc, z * cc),\n      asin(z && y * sc / z)\n    ];\n  }\n}\n","import {asin, sqrt} from \"../math\";\nimport {azimuthalRaw, azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {\n  return sqrt(2 / (1 + cxcy));\n});\n\nazimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {\n  return 2 * asin(z / 2);\n});\n\nexport default function() {\n  return projection(azimuthalEqualAreaRaw)\n      .scale(124.75)\n      .clipAngle(180 - 1e-3);\n}\n","import {acos, sin} from \"../math\";\nimport {azimuthalRaw, azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport var azimuthalEquidistantRaw = azimuthalRaw(function(c) {\n  return (c = acos(c)) && c / sin(c);\n});\n\nazimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {\n  return z;\n});\n\nexport default function() {\n  return projection(azimuthalEquidistantRaw)\n      .scale(79.4188)\n      .clipAngle(180 - 1e-3);\n}\n","import {atan, exp, halfPi, log, pi, tan, tau} from \"../math\";\nimport rotation from \"../rotation\";\nimport projection from \"./index\";\n\nexport function mercatorRaw(lambda, phi) {\n  return [lambda, log(tan((halfPi + phi) / 2))];\n}\n\nmercatorRaw.invert = function(x, y) {\n  return [x, 2 * atan(exp(y)) - halfPi];\n};\n\nexport default function() {\n  return mercatorProjection(mercatorRaw)\n      .scale(961 / tau);\n}\n\nexport function mercatorProjection(project) {\n  var m = projection(project),\n      center = m.center,\n      scale = m.scale,\n      translate = m.translate,\n      clipExtent = m.clipExtent,\n      x0 = null, y0, x1, y1; // clip extent\n\n  m.scale = function(_) {\n    return arguments.length ? (scale(_), reclip()) : scale();\n  };\n\n  m.translate = function(_) {\n    return arguments.length ? (translate(_), reclip()) : translate();\n  };\n\n  m.center = function(_) {\n    return arguments.length ? (center(_), reclip()) : center();\n  };\n\n  m.clipExtent = function(_) {\n    return arguments.length ? ((_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1])), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  function reclip() {\n    var k = pi * scale(),\n        t = m(rotation(m.rotate()).invert([0, 0]));\n    return clipExtent(x0 == null\n        ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw\n        ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]]\n        : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);\n  }\n\n  return reclip();\n}\n","import {abs, atan, atan2, cos, epsilon, halfPi, log, pow, sign, sin, sqrt, tan} from \"../math\";\nimport {conicProjection} from \"./conic\";\nimport {mercatorRaw} from \"./mercator\";\n\nfunction tany(y) {\n  return tan((halfPi + y) / 2);\n}\n\nexport function conicConformalRaw(y0, y1) {\n  var cy0 = cos(y0),\n      n = y0 === y1 ? sin(y0) : log(cy0 / cos(y1)) / log(tany(y1) / tany(y0)),\n      f = cy0 * pow(tany(y0), n) / n;\n\n  if (!n) return mercatorRaw;\n\n  function project(x, y) {\n    if (f > 0) { if (y < -halfPi + epsilon) y = -halfPi + epsilon; }\n    else { if (y > halfPi - epsilon) y = halfPi - epsilon; }\n    var r = f / pow(tany(y), n);\n    return [r * sin(n * x), f - r * cos(n * x)];\n  }\n\n  project.invert = function(x, y) {\n    var fy = f - y, r = sign(n) * sqrt(x * x + fy * fy);\n    return [atan2(x, abs(fy)) / n * sign(fy), 2 * atan(pow(f / r, 1 / n)) - halfPi];\n  };\n\n  return project;\n}\n\nexport default function() {\n  return conicProjection(conicConformalRaw)\n      .scale(109.5)\n      .parallels([30, 30]);\n}\n","import projection from \"./index\";\n\nexport function equirectangularRaw(lambda, phi) {\n  return [lambda, phi];\n}\n\nequirectangularRaw.invert = equirectangularRaw;\n\nexport default function() {\n  return projection(equirectangularRaw)\n      .scale(152.63);\n}\n","import {abs, atan2, cos, epsilon, sign, sin, sqrt} from \"../math\";\nimport {conicProjection} from \"./conic\";\nimport {equirectangularRaw} from \"./equirectangular\";\n\nexport function conicEquidistantRaw(y0, y1) {\n  var cy0 = cos(y0),\n      n = y0 === y1 ? sin(y0) : (cy0 - cos(y1)) / (y1 - y0),\n      g = cy0 / n + y0;\n\n  if (abs(n) < epsilon) return equirectangularRaw;\n\n  function project(x, y) {\n    var gy = g - y, nx = n * x;\n    return [gy * sin(nx), g - gy * cos(nx)];\n  }\n\n  project.invert = function(x, y) {\n    var gy = g - y;\n    return [atan2(x, abs(gy)) / n * sign(gy), g - sign(n) * sqrt(x * x + gy * gy)];\n  };\n\n  return project;\n}\n\nexport default function() {\n  return conicProjection(conicEquidistantRaw)\n      .scale(131.154)\n      .center([0, 13.9389]);\n}\n","import projection from \"./index.js\";\nimport {abs, asin, cos, epsilon2, sin, sqrt} from \"../math.js\";\n\nvar A1 = 1.340264,\n    A2 = -0.081106,\n    A3 = 0.000893,\n    A4 = 0.003796,\n    M = sqrt(3) / 2,\n    iterations = 12;\n\nexport function equalEarthRaw(lambda, phi) {\n  var l = asin(M * sin(phi)), l2 = l * l, l6 = l2 * l2 * l2;\n  return [\n    lambda * cos(l) / (M * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2))),\n    l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2))\n  ];\n}\n\nequalEarthRaw.invert = function(x, y) {\n  var l = y, l2 = l * l, l6 = l2 * l2 * l2;\n  for (var i = 0, delta, fy, fpy; i < iterations; ++i) {\n    fy = l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2)) - y;\n    fpy = A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2);\n    l -= delta = fy / fpy, l2 = l * l, l6 = l2 * l2 * l2;\n    if (abs(delta) < epsilon2) break;\n  }\n  return [\n    M * x * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2)) / cos(l),\n    asin(sin(l) / M)\n  ];\n};\n\nexport default function() {\n  return projection(equalEarthRaw)\n      .scale(177.158);\n}\n","import {atan, cos, sin} from \"../math\";\nimport {azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport function gnomonicRaw(x, y) {\n  var cy = cos(y), k = cos(x) * cy;\n  return [cy * sin(x) / k, sin(y) / k];\n}\n\ngnomonicRaw.invert = azimuthalInvert(atan);\n\nexport default function() {\n  return projection(gnomonicRaw)\n      .scale(144.049)\n      .clipAngle(60);\n}\n","import clipRectangle from \"../clip/rectangle\";\nimport identity from \"../identity\";\nimport {transformer} from \"../transform\";\nimport {fitExtent, fitSize, fitWidth, fitHeight} from \"./fit\";\n\nfunction scaleTranslate(kx, ky, tx, ty) {\n  return kx === 1 && ky === 1 && tx === 0 && ty === 0 ? identity : transformer({\n    point: function(x, y) {\n      this.stream.point(x * kx + tx, y * ky + ty);\n    }\n  });\n}\n\nexport default function() {\n  var k = 1, tx = 0, ty = 0, sx = 1, sy = 1, transform = identity, // scale, translate and reflect\n      x0 = null, y0, x1, y1, // clip extent\n      postclip = identity,\n      cache,\n      cacheStream,\n      projection;\n\n  function reset() {\n    cache = cacheStream = null;\n    return projection;\n  }\n\n  return projection = {\n    stream: function(stream) {\n      return cache && cacheStream === stream ? cache : cache = transform(postclip(cacheStream = stream));\n    },\n    postclip: function(_) {\n      return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;\n    },\n    clipExtent: function(_) {\n      return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n    },\n    scale: function(_) {\n      return arguments.length ? (transform = scaleTranslate((k = +_) * sx, k * sy, tx, ty), reset()) : k;\n    },\n    translate: function(_) {\n      return arguments.length ? (transform = scaleTranslate(k * sx, k * sy, tx = +_[0], ty = +_[1]), reset()) : [tx, ty];\n    },\n    reflectX: function(_) {\n      return arguments.length ? (transform = scaleTranslate(k * (sx = _ ? -1 : 1), k * sy, tx, ty), reset()) : sx < 0;\n    },\n    reflectY: function(_) {\n      return arguments.length ? (transform = scaleTranslate(k * sx, k * (sy = _ ? -1 : 1), tx, ty), reset()) : sy < 0;\n    },\n    fitExtent: function(extent, object) {\n      return fitExtent(projection, extent, object);\n    },\n    fitSize: function(size, object) {\n      return fitSize(projection, size, object);\n    },\n    fitWidth: function(width, object) {\n      return fitWidth(projection, width, object);\n    },\n    fitHeight: function(height, object) {\n      return fitHeight(projection, height, object);\n    }\n  };\n}\n","import projection from \"./index\";\nimport {abs, epsilon} from \"../math\";\n\nexport function naturalEarth1Raw(lambda, phi) {\n  var phi2 = phi * phi, phi4 = phi2 * phi2;\n  return [\n    lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))),\n    phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))\n  ];\n}\n\nnaturalEarth1Raw.invert = function(x, y) {\n  var phi = y, i = 25, delta;\n  do {\n    var phi2 = phi * phi, phi4 = phi2 * phi2;\n    phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) /\n        (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));\n  } while (abs(delta) > epsilon && --i > 0);\n  return [\n    x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(naturalEarth1Raw)\n      .scale(175.295);\n}\n","import {asin, cos, epsilon, sin} from \"../math\";\nimport {azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport function orthographicRaw(x, y) {\n  return [cos(y) * sin(x), sin(y)];\n}\n\northographicRaw.invert = azimuthalInvert(asin);\n\nexport default function() {\n  return projection(orthographicRaw)\n      .scale(249.5)\n      .clipAngle(90 + epsilon);\n}\n","import {atan, cos, sin} from \"../math\";\nimport {azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport function stereographicRaw(x, y) {\n  var cy = cos(y), k = 1 + cos(x) * cy;\n  return [cy * sin(x) / k, sin(y) / k];\n}\n\nstereographicRaw.invert = azimuthalInvert(function(z) {\n  return 2 * atan(z);\n});\n\nexport default function() {\n  return projection(stereographicRaw)\n      .scale(250)\n      .clipAngle(142);\n}\n","import {atan, exp, halfPi, log, tan} from \"../math\";\nimport {mercatorProjection} from \"./mercator\";\n\nexport function transverseMercatorRaw(lambda, phi) {\n  return [log(tan((halfPi + phi) / 2)), -lambda];\n}\n\ntransverseMercatorRaw.invert = function(x, y) {\n  return [-y, 2 * atan(exp(x)) - halfPi];\n};\n\nexport default function() {\n  var m = mercatorProjection(transverseMercatorRaw),\n      center = m.center,\n      rotate = m.rotate;\n\n  m.center = function(_) {\n    return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);\n  };\n\n  m.rotate = function(_) {\n    return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);\n  };\n\n  return rotate([0, 0, 90])\n      .scale(159.155);\n}\n","function defaultSeparation(a, b) {\n  return a.parent === b.parent ? 1 : 2;\n}\n\nfunction meanX(children) {\n  return children.reduce(meanXReduce, 0) / children.length;\n}\n\nfunction meanXReduce(x, c) {\n  return x + c.x;\n}\n\nfunction maxY(children) {\n  return 1 + children.reduce(maxYReduce, 0);\n}\n\nfunction maxYReduce(y, c) {\n  return Math.max(y, c.y);\n}\n\nfunction leafLeft(node) {\n  var children;\n  while (children = node.children) node = children[0];\n  return node;\n}\n\nfunction leafRight(node) {\n  var children;\n  while (children = node.children) node = children[children.length - 1];\n  return node;\n}\n\nexport default function() {\n  var separation = defaultSeparation,\n      dx = 1,\n      dy = 1,\n      nodeSize = false;\n\n  function cluster(root) {\n    var previousNode,\n        x = 0;\n\n    // First walk, computing the initial x & y values.\n    root.eachAfter(function(node) {\n      var children = node.children;\n      if (children) {\n        node.x = meanX(children);\n        node.y = maxY(children);\n      } else {\n        node.x = previousNode ? x += separation(node, previousNode) : 0;\n        node.y = 0;\n        previousNode = node;\n      }\n    });\n\n    var left = leafLeft(root),\n        right = leafRight(root),\n        x0 = left.x - separation(left, right) / 2,\n        x1 = right.x + separation(right, left) / 2;\n\n    // Second walk, normalizing x & y to the desired size.\n    return root.eachAfter(nodeSize ? function(node) {\n      node.x = (node.x - root.x) * dx;\n      node.y = (root.y - node.y) * dy;\n    } : function(node) {\n      node.x = (node.x - x0) / (x1 - x0) * dx;\n      node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;\n    });\n  }\n\n  cluster.separation = function(x) {\n    return arguments.length ? (separation = x, cluster) : separation;\n  };\n\n  cluster.size = function(x) {\n    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? null : [dx, dy]);\n  };\n\n  cluster.nodeSize = function(x) {\n    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? [dx, dy] : null);\n  };\n\n  return cluster;\n}\n","function count(node) {\n  var sum = 0,\n      children = node.children,\n      i = children && children.length;\n  if (!i) sum = 1;\n  else while (--i >= 0) sum += children[i].value;\n  node.value = sum;\n}\n\nexport default function() {\n  return this.eachAfter(count);\n}\n","import node_count from \"./count\";\nimport node_each from \"./each\";\nimport node_eachBefore from \"./eachBefore\";\nimport node_eachAfter from \"./eachAfter\";\nimport node_sum from \"./sum\";\nimport node_sort from \"./sort\";\nimport node_path from \"./path\";\nimport node_ancestors from \"./ancestors\";\nimport node_descendants from \"./descendants\";\nimport node_leaves from \"./leaves\";\nimport node_links from \"./links\";\n\nexport default function hierarchy(data, children) {\n  var root = new Node(data),\n      valued = +data.value && (root.value = data.value),\n      node,\n      nodes = [root],\n      child,\n      childs,\n      i,\n      n;\n\n  if (children == null) children = defaultChildren;\n\n  while (node = nodes.pop()) {\n    if (valued) node.value = +node.data.value;\n    if ((childs = children(node.data)) && (n = childs.length)) {\n      node.children = new Array(n);\n      for (i = n - 1; i >= 0; --i) {\n        nodes.push(child = node.children[i] = new Node(childs[i]));\n        child.parent = node;\n        child.depth = node.depth + 1;\n      }\n    }\n  }\n\n  return root.eachBefore(computeHeight);\n}\n\nfunction node_copy() {\n  return hierarchy(this).eachBefore(copyData);\n}\n\nfunction defaultChildren(d) {\n  return d.children;\n}\n\nfunction copyData(node) {\n  node.data = node.data.data;\n}\n\nexport function computeHeight(node) {\n  var height = 0;\n  do node.height = height;\n  while ((node = node.parent) && (node.height < ++height));\n}\n\nexport function Node(data) {\n  this.data = data;\n  this.depth =\n  this.height = 0;\n  this.parent = null;\n}\n\nNode.prototype = hierarchy.prototype = {\n  constructor: Node,\n  count: node_count,\n  each: node_each,\n  eachAfter: node_eachAfter,\n  eachBefore: node_eachBefore,\n  sum: node_sum,\n  sort: node_sort,\n  path: node_path,\n  ancestors: node_ancestors,\n  descendants: node_descendants,\n  leaves: node_leaves,\n  links: node_links,\n  copy: node_copy\n};\n","export default function(callback) {\n  var node = this, current, next = [node], children, i, n;\n  do {\n    current = next.reverse(), next = [];\n    while (node = current.pop()) {\n      callback(node), children = node.children;\n      if (children) for (i = 0, n = children.length; i < n; ++i) {\n        next.push(children[i]);\n      }\n    }\n  } while (next.length);\n  return this;\n}\n","export default function(callback) {\n  var node = this, nodes = [node], next = [], children, i, n;\n  while (node = nodes.pop()) {\n    next.push(node), children = node.children;\n    if (children) for (i = 0, n = children.length; i < n; ++i) {\n      nodes.push(children[i]);\n    }\n  }\n  while (node = next.pop()) {\n    callback(node);\n  }\n  return this;\n}\n","export default function(callback) {\n  var node = this, nodes = [node], children, i;\n  while (node = nodes.pop()) {\n    callback(node), children = node.children;\n    if (children) for (i = children.length - 1; i >= 0; --i) {\n      nodes.push(children[i]);\n    }\n  }\n  return this;\n}\n","export default function(value) {\n  return this.eachAfter(function(node) {\n    var sum = +value(node.data) || 0,\n        children = node.children,\n        i = children && children.length;\n    while (--i >= 0) sum += children[i].value;\n    node.value = sum;\n  });\n}\n","export default function(compare) {\n  return this.eachBefore(function(node) {\n    if (node.children) {\n      node.children.sort(compare);\n    }\n  });\n}\n","export default function(end) {\n  var start = this,\n      ancestor = leastCommonAncestor(start, end),\n      nodes = [start];\n  while (start !== ancestor) {\n    start = start.parent;\n    nodes.push(start);\n  }\n  var k = nodes.length;\n  while (end !== ancestor) {\n    nodes.splice(k, 0, end);\n    end = end.parent;\n  }\n  return nodes;\n}\n\nfunction leastCommonAncestor(a, b) {\n  if (a === b) return a;\n  var aNodes = a.ancestors(),\n      bNodes = b.ancestors(),\n      c = null;\n  a = aNodes.pop();\n  b = bNodes.pop();\n  while (a === b) {\n    c = a;\n    a = aNodes.pop();\n    b = bNodes.pop();\n  }\n  return c;\n}\n","export default function() {\n  var node = this, nodes = [node];\n  while (node = node.parent) {\n    nodes.push(node);\n  }\n  return nodes;\n}\n","export default function() {\n  var nodes = [];\n  this.each(function(node) {\n    nodes.push(node);\n  });\n  return nodes;\n}\n","export default function() {\n  var leaves = [];\n  this.eachBefore(function(node) {\n    if (!node.children) {\n      leaves.push(node);\n    }\n  });\n  return leaves;\n}\n","export default function() {\n  var root = this, links = [];\n  root.each(function(node) {\n    if (node !== root) { // Don’t include the root’s parent, if any.\n      links.push({source: node.parent, target: node});\n    }\n  });\n  return links;\n}\n","export var slice = Array.prototype.slice;\n\nexport function shuffle(array) {\n  var m = array.length,\n      t,\n      i;\n\n  while (m) {\n    i = Math.random() * m-- | 0;\n    t = array[m];\n    array[m] = array[i];\n    array[i] = t;\n  }\n\n  return array;\n}\n","import {shuffle, slice} from \"../array\";\n\nexport default function(circles) {\n  var i = 0, n = (circles = shuffle(slice.call(circles))).length, B = [], p, e;\n\n  while (i < n) {\n    p = circles[i];\n    if (e && enclosesWeak(e, p)) ++i;\n    else e = encloseBasis(B = extendBasis(B, p)), i = 0;\n  }\n\n  return e;\n}\n\nfunction extendBasis(B, p) {\n  var i, j;\n\n  if (enclosesWeakAll(p, B)) return [p];\n\n  // If we get here then B must have at least one element.\n  for (i = 0; i < B.length; ++i) {\n    if (enclosesNot(p, B[i])\n        && enclosesWeakAll(encloseBasis2(B[i], p), B)) {\n      return [B[i], p];\n    }\n  }\n\n  // If we get here then B must have at least two elements.\n  for (i = 0; i < B.length - 1; ++i) {\n    for (j = i + 1; j < B.length; ++j) {\n      if (enclosesNot(encloseBasis2(B[i], B[j]), p)\n          && enclosesNot(encloseBasis2(B[i], p), B[j])\n          && enclosesNot(encloseBasis2(B[j], p), B[i])\n          && enclosesWeakAll(encloseBasis3(B[i], B[j], p), B)) {\n        return [B[i], B[j], p];\n      }\n    }\n  }\n\n  // If we get here then something is very wrong.\n  throw new Error;\n}\n\nfunction enclosesNot(a, b) {\n  var dr = a.r - b.r, dx = b.x - a.x, dy = b.y - a.y;\n  return dr < 0 || dr * dr < dx * dx + dy * dy;\n}\n\nfunction enclosesWeak(a, b) {\n  var dr = a.r - b.r + 1e-6, dx = b.x - a.x, dy = b.y - a.y;\n  return dr > 0 && dr * dr > dx * dx + dy * dy;\n}\n\nfunction enclosesWeakAll(a, B) {\n  for (var i = 0; i < B.length; ++i) {\n    if (!enclosesWeak(a, B[i])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction encloseBasis(B) {\n  switch (B.length) {\n    case 1: return encloseBasis1(B[0]);\n    case 2: return encloseBasis2(B[0], B[1]);\n    case 3: return encloseBasis3(B[0], B[1], B[2]);\n  }\n}\n\nfunction encloseBasis1(a) {\n  return {\n    x: a.x,\n    y: a.y,\n    r: a.r\n  };\n}\n\nfunction encloseBasis2(a, b) {\n  var x1 = a.x, y1 = a.y, r1 = a.r,\n      x2 = b.x, y2 = b.y, r2 = b.r,\n      x21 = x2 - x1, y21 = y2 - y1, r21 = r2 - r1,\n      l = Math.sqrt(x21 * x21 + y21 * y21);\n  return {\n    x: (x1 + x2 + x21 / l * r21) / 2,\n    y: (y1 + y2 + y21 / l * r21) / 2,\n    r: (l + r1 + r2) / 2\n  };\n}\n\nfunction encloseBasis3(a, b, c) {\n  var x1 = a.x, y1 = a.y, r1 = a.r,\n      x2 = b.x, y2 = b.y, r2 = b.r,\n      x3 = c.x, y3 = c.y, r3 = c.r,\n      a2 = x1 - x2,\n      a3 = x1 - x3,\n      b2 = y1 - y2,\n      b3 = y1 - y3,\n      c2 = r2 - r1,\n      c3 = r3 - r1,\n      d1 = x1 * x1 + y1 * y1 - r1 * r1,\n      d2 = d1 - x2 * x2 - y2 * y2 + r2 * r2,\n      d3 = d1 - x3 * x3 - y3 * y3 + r3 * r3,\n      ab = a3 * b2 - a2 * b3,\n      xa = (b2 * d3 - b3 * d2) / (ab * 2) - x1,\n      xb = (b3 * c2 - b2 * c3) / ab,\n      ya = (a3 * d2 - a2 * d3) / (ab * 2) - y1,\n      yb = (a2 * c3 - a3 * c2) / ab,\n      A = xb * xb + yb * yb - 1,\n      B = 2 * (r1 + xa * xb + ya * yb),\n      C = xa * xa + ya * ya - r1 * r1,\n      r = -(A ? (B + Math.sqrt(B * B - 4 * A * C)) / (2 * A) : C / B);\n  return {\n    x: x1 + xa + xb * r,\n    y: y1 + ya + yb * r,\n    r: r\n  };\n}\n","import enclose from \"./enclose\";\n\nfunction place(b, a, c) {\n  var dx = b.x - a.x, x, a2,\n      dy = b.y - a.y, y, b2,\n      d2 = dx * dx + dy * dy;\n  if (d2) {\n    a2 = a.r + c.r, a2 *= a2;\n    b2 = b.r + c.r, b2 *= b2;\n    if (a2 > b2) {\n      x = (d2 + b2 - a2) / (2 * d2);\n      y = Math.sqrt(Math.max(0, b2 / d2 - x * x));\n      c.x = b.x - x * dx - y * dy;\n      c.y = b.y - x * dy + y * dx;\n    } else {\n      x = (d2 + a2 - b2) / (2 * d2);\n      y = Math.sqrt(Math.max(0, a2 / d2 - x * x));\n      c.x = a.x + x * dx - y * dy;\n      c.y = a.y + x * dy + y * dx;\n    }\n  } else {\n    c.x = a.x + c.r;\n    c.y = a.y;\n  }\n}\n\nfunction intersects(a, b) {\n  var dr = a.r + b.r - 1e-6, dx = b.x - a.x, dy = b.y - a.y;\n  return dr > 0 && dr * dr > dx * dx + dy * dy;\n}\n\nfunction score(node) {\n  var a = node._,\n      b = node.next._,\n      ab = a.r + b.r,\n      dx = (a.x * b.r + b.x * a.r) / ab,\n      dy = (a.y * b.r + b.y * a.r) / ab;\n  return dx * dx + dy * dy;\n}\n\nfunction Node(circle) {\n  this._ = circle;\n  this.next = null;\n  this.previous = null;\n}\n\nexport function packEnclose(circles) {\n  if (!(n = circles.length)) return 0;\n\n  var a, b, c, n, aa, ca, i, j, k, sj, sk;\n\n  // Place the first circle.\n  a = circles[0], a.x = 0, a.y = 0;\n  if (!(n > 1)) return a.r;\n\n  // Place the second circle.\n  b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;\n  if (!(n > 2)) return a.r + b.r;\n\n  // Place the third circle.\n  place(b, a, c = circles[2]);\n\n  // Initialize the front-chain using the first three circles a, b and c.\n  a = new Node(a), b = new Node(b), c = new Node(c);\n  a.next = c.previous = b;\n  b.next = a.previous = c;\n  c.next = b.previous = a;\n\n  // Attempt to place each remaining circle…\n  pack: for (i = 3; i < n; ++i) {\n    place(a._, b._, c = circles[i]), c = new Node(c);\n\n    // Find the closest intersecting circle on the front-chain, if any.\n    // “Closeness” is determined by linear distance along the front-chain.\n    // “Ahead” or “behind” is likewise determined by linear distance.\n    j = b.next, k = a.previous, sj = b._.r, sk = a._.r;\n    do {\n      if (sj <= sk) {\n        if (intersects(j._, c._)) {\n          b = j, a.next = b, b.previous = a, --i;\n          continue pack;\n        }\n        sj += j._.r, j = j.next;\n      } else {\n        if (intersects(k._, c._)) {\n          a = k, a.next = b, b.previous = a, --i;\n          continue pack;\n        }\n        sk += k._.r, k = k.previous;\n      }\n    } while (j !== k.next);\n\n    // Success! Insert the new circle c between a and b.\n    c.previous = a, c.next = b, a.next = b.previous = b = c;\n\n    // Compute the new closest circle pair to the centroid.\n    aa = score(a);\n    while ((c = c.next) !== b) {\n      if ((ca = score(c)) < aa) {\n        a = c, aa = ca;\n      }\n    }\n    b = a.next;\n  }\n\n  // Compute the enclosing circle of the front chain.\n  a = [b._], c = b; while ((c = c.next) !== b) a.push(c._); c = enclose(a);\n\n  // Translate the circles to put the enclosing circle around the origin.\n  for (i = 0; i < n; ++i) a = circles[i], a.x -= c.x, a.y -= c.y;\n\n  return c.r;\n}\n\nexport default function(circles) {\n  packEnclose(circles);\n  return circles;\n}\n","export function optional(f) {\n  return f == null ? null : required(f);\n}\n\nexport function required(f) {\n  if (typeof f !== \"function\") throw new Error;\n  return f;\n}\n","export function constantZero() {\n  return 0;\n}\n\nexport default function(x) {\n  return function() {\n    return x;\n  };\n}\n","import {packEnclose} from \"./siblings\";\nimport {optional} from \"../accessors\";\nimport constant, {constantZero} from \"../constant\";\n\nfunction defaultRadius(d) {\n  return Math.sqrt(d.value);\n}\n\nexport default function() {\n  var radius = null,\n      dx = 1,\n      dy = 1,\n      padding = constantZero;\n\n  function pack(root) {\n    root.x = dx / 2, root.y = dy / 2;\n    if (radius) {\n      root.eachBefore(radiusLeaf(radius))\n          .eachAfter(packChildren(padding, 0.5))\n          .eachBefore(translateChild(1));\n    } else {\n      root.eachBefore(radiusLeaf(defaultRadius))\n          .eachAfter(packChildren(constantZero, 1))\n          .eachAfter(packChildren(padding, root.r / Math.min(dx, dy)))\n          .eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));\n    }\n    return root;\n  }\n\n  pack.radius = function(x) {\n    return arguments.length ? (radius = optional(x), pack) : radius;\n  };\n\n  pack.size = function(x) {\n    return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];\n  };\n\n  pack.padding = function(x) {\n    return arguments.length ? (padding = typeof x === \"function\" ? x : constant(+x), pack) : padding;\n  };\n\n  return pack;\n}\n\nfunction radiusLeaf(radius) {\n  return function(node) {\n    if (!node.children) {\n      node.r = Math.max(0, +radius(node) || 0);\n    }\n  };\n}\n\nfunction packChildren(padding, k) {\n  return function(node) {\n    if (children = node.children) {\n      var children,\n          i,\n          n = children.length,\n          r = padding(node) * k || 0,\n          e;\n\n      if (r) for (i = 0; i < n; ++i) children[i].r += r;\n      e = packEnclose(children);\n      if (r) for (i = 0; i < n; ++i) children[i].r -= r;\n      node.r = e + r;\n    }\n  };\n}\n\nfunction translateChild(k) {\n  return function(node) {\n    var parent = node.parent;\n    node.r *= k;\n    if (parent) {\n      node.x = parent.x + k * node.x;\n      node.y = parent.y + k * node.y;\n    }\n  };\n}\n","export default function(node) {\n  node.x0 = Math.round(node.x0);\n  node.y0 = Math.round(node.y0);\n  node.x1 = Math.round(node.x1);\n  node.y1 = Math.round(node.y1);\n}\n","export default function(parent, x0, y0, x1, y1) {\n  var nodes = parent.children,\n      node,\n      i = -1,\n      n = nodes.length,\n      k = parent.value && (x1 - x0) / parent.value;\n\n  while (++i < n) {\n    node = nodes[i], node.y0 = y0, node.y1 = y1;\n    node.x0 = x0, node.x1 = x0 += node.value * k;\n  }\n}\n","import roundNode from \"./treemap/round\";\nimport treemapDice from \"./treemap/dice\";\n\nexport default function() {\n  var dx = 1,\n      dy = 1,\n      padding = 0,\n      round = false;\n\n  function partition(root) {\n    var n = root.height + 1;\n    root.x0 =\n    root.y0 = padding;\n    root.x1 = dx;\n    root.y1 = dy / n;\n    root.eachBefore(positionNode(dy, n));\n    if (round) root.eachBefore(roundNode);\n    return root;\n  }\n\n  function positionNode(dy, n) {\n    return function(node) {\n      if (node.children) {\n        treemapDice(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);\n      }\n      var x0 = node.x0,\n          y0 = node.y0,\n          x1 = node.x1 - padding,\n          y1 = node.y1 - padding;\n      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n      node.x0 = x0;\n      node.y0 = y0;\n      node.x1 = x1;\n      node.y1 = y1;\n    };\n  }\n\n  partition.round = function(x) {\n    return arguments.length ? (round = !!x, partition) : round;\n  };\n\n  partition.size = function(x) {\n    return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];\n  };\n\n  partition.padding = function(x) {\n    return arguments.length ? (padding = +x, partition) : padding;\n  };\n\n  return partition;\n}\n","import {required} from \"./accessors\";\nimport {Node, computeHeight} from \"./hierarchy/index\";\n\nvar keyPrefix = \"$\", // Protect against keys like “__proto__”.\n    preroot = {depth: -1},\n    ambiguous = {};\n\nfunction defaultId(d) {\n  return d.id;\n}\n\nfunction defaultParentId(d) {\n  return d.parentId;\n}\n\nexport default function() {\n  var id = defaultId,\n      parentId = defaultParentId;\n\n  function stratify(data) {\n    var d,\n        i,\n        n = data.length,\n        root,\n        parent,\n        node,\n        nodes = new Array(n),\n        nodeId,\n        nodeKey,\n        nodeByKey = {};\n\n    for (i = 0; i < n; ++i) {\n      d = data[i], node = nodes[i] = new Node(d);\n      if ((nodeId = id(d, i, data)) != null && (nodeId += \"\")) {\n        nodeKey = keyPrefix + (node.id = nodeId);\n        nodeByKey[nodeKey] = nodeKey in nodeByKey ? ambiguous : node;\n      }\n    }\n\n    for (i = 0; i < n; ++i) {\n      node = nodes[i], nodeId = parentId(data[i], i, data);\n      if (nodeId == null || !(nodeId += \"\")) {\n        if (root) throw new Error(\"multiple roots\");\n        root = node;\n      } else {\n        parent = nodeByKey[keyPrefix + nodeId];\n        if (!parent) throw new Error(\"missing: \" + nodeId);\n        if (parent === ambiguous) throw new Error(\"ambiguous: \" + nodeId);\n        if (parent.children) parent.children.push(node);\n        else parent.children = [node];\n        node.parent = parent;\n      }\n    }\n\n    if (!root) throw new Error(\"no root\");\n    root.parent = preroot;\n    root.eachBefore(function(node) { node.depth = node.parent.depth + 1; --n; }).eachBefore(computeHeight);\n    root.parent = null;\n    if (n > 0) throw new Error(\"cycle\");\n\n    return root;\n  }\n\n  stratify.id = function(x) {\n    return arguments.length ? (id = required(x), stratify) : id;\n  };\n\n  stratify.parentId = function(x) {\n    return arguments.length ? (parentId = required(x), stratify) : parentId;\n  };\n\n  return stratify;\n}\n","import {Node} from \"./hierarchy/index\";\n\nfunction defaultSeparation(a, b) {\n  return a.parent === b.parent ? 1 : 2;\n}\n\n// function radialSeparation(a, b) {\n//   return (a.parent === b.parent ? 1 : 2) / a.depth;\n// }\n\n// This function is used to traverse the left contour of a subtree (or\n// subforest). It returns the successor of v on this contour. This successor is\n// either given by the leftmost child of v or by the thread of v. The function\n// returns null if and only if v is on the highest level of its subtree.\nfunction nextLeft(v) {\n  var children = v.children;\n  return children ? children[0] : v.t;\n}\n\n// This function works analogously to nextLeft.\nfunction nextRight(v) {\n  var children = v.children;\n  return children ? children[children.length - 1] : v.t;\n}\n\n// Shifts the current subtree rooted at w+. This is done by increasing\n// prelim(w+) and mod(w+) by shift.\nfunction moveSubtree(wm, wp, shift) {\n  var change = shift / (wp.i - wm.i);\n  wp.c -= change;\n  wp.s += shift;\n  wm.c += change;\n  wp.z += shift;\n  wp.m += shift;\n}\n\n// All other shifts, applied to the smaller subtrees between w- and w+, are\n// performed by this function. To prepare the shifts, we have to adjust\n// change(w+), shift(w+), and change(w-).\nfunction executeShifts(v) {\n  var shift = 0,\n      change = 0,\n      children = v.children,\n      i = children.length,\n      w;\n  while (--i >= 0) {\n    w = children[i];\n    w.z += shift;\n    w.m += shift;\n    shift += w.s + (change += w.c);\n  }\n}\n\n// If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,\n// returns the specified (default) ancestor.\nfunction nextAncestor(vim, v, ancestor) {\n  return vim.a.parent === v.parent ? vim.a : ancestor;\n}\n\nfunction TreeNode(node, i) {\n  this._ = node;\n  this.parent = null;\n  this.children = null;\n  this.A = null; // default ancestor\n  this.a = this; // ancestor\n  this.z = 0; // prelim\n  this.m = 0; // mod\n  this.c = 0; // change\n  this.s = 0; // shift\n  this.t = null; // thread\n  this.i = i; // number\n}\n\nTreeNode.prototype = Object.create(Node.prototype);\n\nfunction treeRoot(root) {\n  var tree = new TreeNode(root, 0),\n      node,\n      nodes = [tree],\n      child,\n      children,\n      i,\n      n;\n\n  while (node = nodes.pop()) {\n    if (children = node._.children) {\n      node.children = new Array(n = children.length);\n      for (i = n - 1; i >= 0; --i) {\n        nodes.push(child = node.children[i] = new TreeNode(children[i], i));\n        child.parent = node;\n      }\n    }\n  }\n\n  (tree.parent = new TreeNode(null, 0)).children = [tree];\n  return tree;\n}\n\n// Node-link tree diagram using the Reingold-Tilford \"tidy\" algorithm\nexport default function() {\n  var separation = defaultSeparation,\n      dx = 1,\n      dy = 1,\n      nodeSize = null;\n\n  function tree(root) {\n    var t = treeRoot(root);\n\n    // Compute the layout using Buchheim et al.’s algorithm.\n    t.eachAfter(firstWalk), t.parent.m = -t.z;\n    t.eachBefore(secondWalk);\n\n    // If a fixed node size is specified, scale x and y.\n    if (nodeSize) root.eachBefore(sizeNode);\n\n    // If a fixed tree size is specified, scale x and y based on the extent.\n    // Compute the left-most, right-most, and depth-most nodes for extents.\n    else {\n      var left = root,\n          right = root,\n          bottom = root;\n      root.eachBefore(function(node) {\n        if (node.x < left.x) left = node;\n        if (node.x > right.x) right = node;\n        if (node.depth > bottom.depth) bottom = node;\n      });\n      var s = left === right ? 1 : separation(left, right) / 2,\n          tx = s - left.x,\n          kx = dx / (right.x + s + tx),\n          ky = dy / (bottom.depth || 1);\n      root.eachBefore(function(node) {\n        node.x = (node.x + tx) * kx;\n        node.y = node.depth * ky;\n      });\n    }\n\n    return root;\n  }\n\n  // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is\n  // applied recursively to the children of v, as well as the function\n  // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the\n  // node v is placed to the midpoint of its outermost children.\n  function firstWalk(v) {\n    var children = v.children,\n        siblings = v.parent.children,\n        w = v.i ? siblings[v.i - 1] : null;\n    if (children) {\n      executeShifts(v);\n      var midpoint = (children[0].z + children[children.length - 1].z) / 2;\n      if (w) {\n        v.z = w.z + separation(v._, w._);\n        v.m = v.z - midpoint;\n      } else {\n        v.z = midpoint;\n      }\n    } else if (w) {\n      v.z = w.z + separation(v._, w._);\n    }\n    v.parent.A = apportion(v, w, v.parent.A || siblings[0]);\n  }\n\n  // Computes all real x-coordinates by summing up the modifiers recursively.\n  function secondWalk(v) {\n    v._.x = v.z + v.parent.m;\n    v.m += v.parent.m;\n  }\n\n  // The core of the algorithm. Here, a new subtree is combined with the\n  // previous subtrees. Threads are used to traverse the inside and outside\n  // contours of the left and right subtree up to the highest common level. The\n  // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the\n  // superscript o means outside and i means inside, the subscript - means left\n  // subtree and + means right subtree. For summing up the modifiers along the\n  // contour, we use respective variables si+, si-, so-, and so+. Whenever two\n  // nodes of the inside contours conflict, we compute the left one of the\n  // greatest uncommon ancestors using the function ANCESTOR and call MOVE\n  // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.\n  // Finally, we add a new thread (if necessary).\n  function apportion(v, w, ancestor) {\n    if (w) {\n      var vip = v,\n          vop = v,\n          vim = w,\n          vom = vip.parent.children[0],\n          sip = vip.m,\n          sop = vop.m,\n          sim = vim.m,\n          som = vom.m,\n          shift;\n      while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {\n        vom = nextLeft(vom);\n        vop = nextRight(vop);\n        vop.a = v;\n        shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);\n        if (shift > 0) {\n          moveSubtree(nextAncestor(vim, v, ancestor), v, shift);\n          sip += shift;\n          sop += shift;\n        }\n        sim += vim.m;\n        sip += vip.m;\n        som += vom.m;\n        sop += vop.m;\n      }\n      if (vim && !nextRight(vop)) {\n        vop.t = vim;\n        vop.m += sim - sop;\n      }\n      if (vip && !nextLeft(vom)) {\n        vom.t = vip;\n        vom.m += sip - som;\n        ancestor = v;\n      }\n    }\n    return ancestor;\n  }\n\n  function sizeNode(node) {\n    node.x *= dx;\n    node.y = node.depth * dy;\n  }\n\n  tree.separation = function(x) {\n    return arguments.length ? (separation = x, tree) : separation;\n  };\n\n  tree.size = function(x) {\n    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : (nodeSize ? null : [dx, dy]);\n  };\n\n  tree.nodeSize = function(x) {\n    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : (nodeSize ? [dx, dy] : null);\n  };\n\n  return tree;\n}\n","export default function(parent, x0, y0, x1, y1) {\n  var nodes = parent.children,\n      node,\n      i = -1,\n      n = nodes.length,\n      k = parent.value && (y1 - y0) / parent.value;\n\n  while (++i < n) {\n    node = nodes[i], node.x0 = x0, node.x1 = x1;\n    node.y0 = y0, node.y1 = y0 += node.value * k;\n  }\n}\n","import treemapDice from \"./dice\";\nimport treemapSlice from \"./slice\";\n\nexport var phi = (1 + Math.sqrt(5)) / 2;\n\nexport function squarifyRatio(ratio, parent, x0, y0, x1, y1) {\n  var rows = [],\n      nodes = parent.children,\n      row,\n      nodeValue,\n      i0 = 0,\n      i1 = 0,\n      n = nodes.length,\n      dx, dy,\n      value = parent.value,\n      sumValue,\n      minValue,\n      maxValue,\n      newRatio,\n      minRatio,\n      alpha,\n      beta;\n\n  while (i0 < n) {\n    dx = x1 - x0, dy = y1 - y0;\n\n    // Find the next non-empty node.\n    do sumValue = nodes[i1++].value; while (!sumValue && i1 < n);\n    minValue = maxValue = sumValue;\n    alpha = Math.max(dy / dx, dx / dy) / (value * ratio);\n    beta = sumValue * sumValue * alpha;\n    minRatio = Math.max(maxValue / beta, beta / minValue);\n\n    // Keep adding nodes while the aspect ratio maintains or improves.\n    for (; i1 < n; ++i1) {\n      sumValue += nodeValue = nodes[i1].value;\n      if (nodeValue < minValue) minValue = nodeValue;\n      if (nodeValue > maxValue) maxValue = nodeValue;\n      beta = sumValue * sumValue * alpha;\n      newRatio = Math.max(maxValue / beta, beta / minValue);\n      if (newRatio > minRatio) { sumValue -= nodeValue; break; }\n      minRatio = newRatio;\n    }\n\n    // Position and record the row orientation.\n    rows.push(row = {value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1)});\n    if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);\n    else treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);\n    value -= sumValue, i0 = i1;\n  }\n\n  return rows;\n}\n\nexport default (function custom(ratio) {\n\n  function squarify(parent, x0, y0, x1, y1) {\n    squarifyRatio(ratio, parent, x0, y0, x1, y1);\n  }\n\n  squarify.ratio = function(x) {\n    return custom((x = +x) > 1 ? x : 1);\n  };\n\n  return squarify;\n})(phi);\n","import roundNode from \"./round\";\nimport squarify from \"./squarify\";\nimport {required} from \"../accessors\";\nimport constant, {constantZero} from \"../constant\";\n\nexport default function() {\n  var tile = squarify,\n      round = false,\n      dx = 1,\n      dy = 1,\n      paddingStack = [0],\n      paddingInner = constantZero,\n      paddingTop = constantZero,\n      paddingRight = constantZero,\n      paddingBottom = constantZero,\n      paddingLeft = constantZero;\n\n  function treemap(root) {\n    root.x0 =\n    root.y0 = 0;\n    root.x1 = dx;\n    root.y1 = dy;\n    root.eachBefore(positionNode);\n    paddingStack = [0];\n    if (round) root.eachBefore(roundNode);\n    return root;\n  }\n\n  function positionNode(node) {\n    var p = paddingStack[node.depth],\n        x0 = node.x0 + p,\n        y0 = node.y0 + p,\n        x1 = node.x1 - p,\n        y1 = node.y1 - p;\n    if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n    if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n    node.x0 = x0;\n    node.y0 = y0;\n    node.x1 = x1;\n    node.y1 = y1;\n    if (node.children) {\n      p = paddingStack[node.depth + 1] = paddingInner(node) / 2;\n      x0 += paddingLeft(node) - p;\n      y0 += paddingTop(node) - p;\n      x1 -= paddingRight(node) - p;\n      y1 -= paddingBottom(node) - p;\n      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n      tile(node, x0, y0, x1, y1);\n    }\n  }\n\n  treemap.round = function(x) {\n    return arguments.length ? (round = !!x, treemap) : round;\n  };\n\n  treemap.size = function(x) {\n    return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];\n  };\n\n  treemap.tile = function(x) {\n    return arguments.length ? (tile = required(x), treemap) : tile;\n  };\n\n  treemap.padding = function(x) {\n    return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();\n  };\n\n  treemap.paddingInner = function(x) {\n    return arguments.length ? (paddingInner = typeof x === \"function\" ? x : constant(+x), treemap) : paddingInner;\n  };\n\n  treemap.paddingOuter = function(x) {\n    return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();\n  };\n\n  treemap.paddingTop = function(x) {\n    return arguments.length ? (paddingTop = typeof x === \"function\" ? x : constant(+x), treemap) : paddingTop;\n  };\n\n  treemap.paddingRight = function(x) {\n    return arguments.length ? (paddingRight = typeof x === \"function\" ? x : constant(+x), treemap) : paddingRight;\n  };\n\n  treemap.paddingBottom = function(x) {\n    return arguments.length ? (paddingBottom = typeof x === \"function\" ? x : constant(+x), treemap) : paddingBottom;\n  };\n\n  treemap.paddingLeft = function(x) {\n    return arguments.length ? (paddingLeft = typeof x === \"function\" ? x : constant(+x), treemap) : paddingLeft;\n  };\n\n  return treemap;\n}\n","export default function(parent, x0, y0, x1, y1) {\n  var nodes = parent.children,\n      i, n = nodes.length,\n      sum, sums = new Array(n + 1);\n\n  for (sums[0] = sum = i = 0; i < n; ++i) {\n    sums[i + 1] = sum += nodes[i].value;\n  }\n\n  partition(0, n, parent.value, x0, y0, x1, y1);\n\n  function partition(i, j, value, x0, y0, x1, y1) {\n    if (i >= j - 1) {\n      var node = nodes[i];\n      node.x0 = x0, node.y0 = y0;\n      node.x1 = x1, node.y1 = y1;\n      return;\n    }\n\n    var valueOffset = sums[i],\n        valueTarget = (value / 2) + valueOffset,\n        k = i + 1,\n        hi = j - 1;\n\n    while (k < hi) {\n      var mid = k + hi >>> 1;\n      if (sums[mid] < valueTarget) k = mid + 1;\n      else hi = mid;\n    }\n\n    if ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k) --k;\n\n    var valueLeft = sums[k] - valueOffset,\n        valueRight = value - valueLeft;\n\n    if ((x1 - x0) > (y1 - y0)) {\n      var xk = (x0 * valueRight + x1 * valueLeft) / value;\n      partition(i, k, valueLeft, x0, y0, xk, y1);\n      partition(k, j, valueRight, xk, y0, x1, y1);\n    } else {\n      var yk = (y0 * valueRight + y1 * valueLeft) / value;\n      partition(i, k, valueLeft, x0, y0, x1, yk);\n      partition(k, j, valueRight, x0, yk, x1, y1);\n    }\n  }\n}\n","import dice from \"./dice\";\nimport slice from \"./slice\";\n\nexport default function(parent, x0, y0, x1, y1) {\n  (parent.depth & 1 ? slice : dice)(parent, x0, y0, x1, y1);\n}\n","import treemapDice from \"./dice\";\nimport treemapSlice from \"./slice\";\nimport {phi, squarifyRatio} from \"./squarify\";\n\nexport default (function custom(ratio) {\n\n  function resquarify(parent, x0, y0, x1, y1) {\n    if ((rows = parent._squarify) && (rows.ratio === ratio)) {\n      var rows,\n          row,\n          nodes,\n          i,\n          j = -1,\n          n,\n          m = rows.length,\n          value = parent.value;\n\n      while (++j < m) {\n        row = rows[j], nodes = row.children;\n        for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;\n        if (row.dice) treemapDice(row, x0, y0, x1, y0 += (y1 - y0) * row.value / value);\n        else treemapSlice(row, x0, y0, x0 += (x1 - x0) * row.value / value, y1);\n        value -= row.value;\n      }\n    } else {\n      parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);\n      rows.ratio = ratio;\n    }\n  }\n\n  resquarify.ratio = function(x) {\n    return custom((x = +x) > 1 ? x : 1);\n  };\n\n  return resquarify;\n})(phi);\n","export default function(polygon) {\n  var i = -1,\n      n = polygon.length,\n      a,\n      b = polygon[n - 1],\n      area = 0;\n\n  while (++i < n) {\n    a = b;\n    b = polygon[i];\n    area += a[1] * b[0] - a[0] * b[1];\n  }\n\n  return area / 2;\n}\n","export default function(polygon) {\n  var i = -1,\n      n = polygon.length,\n      x = 0,\n      y = 0,\n      a,\n      b = polygon[n - 1],\n      c,\n      k = 0;\n\n  while (++i < n) {\n    a = b;\n    b = polygon[i];\n    k += c = a[0] * b[1] - b[0] * a[1];\n    x += (a[0] + b[0]) * c;\n    y += (a[1] + b[1]) * c;\n  }\n\n  return k *= 3, [x / k, y / k];\n}\n","// Returns the 2D cross product of AB and AC vectors, i.e., the z-component of\n// the 3D cross product in a quadrant I Cartesian coordinate system (+x is\n// right, +y is up). Returns a positive value if ABC is counter-clockwise,\n// negative if clockwise, and zero if the points are collinear.\nexport default function(a, b, c) {\n  return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);\n}\n","import cross from \"./cross\";\n\nfunction lexicographicOrder(a, b) {\n  return a[0] - b[0] || a[1] - b[1];\n}\n\n// Computes the upper convex hull per the monotone chain algorithm.\n// Assumes points.length >= 3, is sorted by x, unique in y.\n// Returns an array of indices into points in left-to-right order.\nfunction computeUpperHullIndexes(points) {\n  var n = points.length,\n      indexes = [0, 1],\n      size = 2;\n\n  for (var i = 2; i < n; ++i) {\n    while (size > 1 && cross(points[indexes[size - 2]], points[indexes[size - 1]], points[i]) <= 0) --size;\n    indexes[size++] = i;\n  }\n\n  return indexes.slice(0, size); // remove popped points\n}\n\nexport default function(points) {\n  if ((n = points.length) < 3) return null;\n\n  var i,\n      n,\n      sortedPoints = new Array(n),\n      flippedPoints = new Array(n);\n\n  for (i = 0; i < n; ++i) sortedPoints[i] = [+points[i][0], +points[i][1], i];\n  sortedPoints.sort(lexicographicOrder);\n  for (i = 0; i < n; ++i) flippedPoints[i] = [sortedPoints[i][0], -sortedPoints[i][1]];\n\n  var upperIndexes = computeUpperHullIndexes(sortedPoints),\n      lowerIndexes = computeUpperHullIndexes(flippedPoints);\n\n  // Construct the hull polygon, removing possible duplicate endpoints.\n  var skipLeft = lowerIndexes[0] === upperIndexes[0],\n      skipRight = lowerIndexes[lowerIndexes.length - 1] === upperIndexes[upperIndexes.length - 1],\n      hull = [];\n\n  // Add upper hull in right-to-l order.\n  // Then add lower hull in left-to-right order.\n  for (i = upperIndexes.length - 1; i >= 0; --i) hull.push(points[sortedPoints[upperIndexes[i]][2]]);\n  for (i = +skipLeft; i < lowerIndexes.length - skipRight; ++i) hull.push(points[sortedPoints[lowerIndexes[i]][2]]);\n\n  return hull;\n}\n","export default function(polygon, point) {\n  var n = polygon.length,\n      p = polygon[n - 1],\n      x = point[0], y = point[1],\n      x0 = p[0], y0 = p[1],\n      x1, y1,\n      inside = false;\n\n  for (var i = 0; i < n; ++i) {\n    p = polygon[i], x1 = p[0], y1 = p[1];\n    if (((y1 > y) !== (y0 > y)) && (x < (x0 - x1) * (y - y1) / (y0 - y1) + x1)) inside = !inside;\n    x0 = x1, y0 = y1;\n  }\n\n  return inside;\n}\n","export default function(polygon) {\n  var i = -1,\n      n = polygon.length,\n      b = polygon[n - 1],\n      xa,\n      ya,\n      xb = b[0],\n      yb = b[1],\n      perimeter = 0;\n\n  while (++i < n) {\n    xa = xb;\n    ya = yb;\n    b = polygon[i];\n    xb = b[0];\n    yb = b[1];\n    xa -= xb;\n    ya -= yb;\n    perimeter += Math.sqrt(xa * xa + ya * ya);\n  }\n\n  return perimeter;\n}\n","export default function() {\n  return Math.random();\n}\n","import defaultSource from \"./defaultSource\";\n\nexport default (function sourceRandomUniform(source) {\n  function randomUniform(min, max) {\n    min = min == null ? 0 : +min;\n    max = max == null ? 1 : +max;\n    if (arguments.length === 1) max = min, min = 0;\n    else max -= min;\n    return function() {\n      return source() * max + min;\n    };\n  }\n\n  randomUniform.source = sourceRandomUniform;\n\n  return randomUniform;\n})(defaultSource);\n","import defaultSource from \"./defaultSource\";\n\nexport default (function sourceRandomNormal(source) {\n  function randomNormal(mu, sigma) {\n    var x, r;\n    mu = mu == null ? 0 : +mu;\n    sigma = sigma == null ? 1 : +sigma;\n    return function() {\n      var y;\n\n      // If available, use the second previously-generated uniform random.\n      if (x != null) y = x, x = null;\n\n      // Otherwise, generate a new x and y.\n      else do {\n        x = source() * 2 - 1;\n        y = source() * 2 - 1;\n        r = x * x + y * y;\n      } while (!r || r > 1);\n\n      return mu + sigma * y * Math.sqrt(-2 * Math.log(r) / r);\n    };\n  }\n\n  randomNormal.source = sourceRandomNormal;\n\n  return randomNormal;\n})(defaultSource);\n","import defaultSource from \"./defaultSource\";\nimport normal from \"./normal\";\n\nexport default (function sourceRandomLogNormal(source) {\n  function randomLogNormal() {\n    var randomNormal = normal.source(source).apply(this, arguments);\n    return function() {\n      return Math.exp(randomNormal());\n    };\n  }\n\n  randomLogNormal.source = sourceRandomLogNormal;\n\n  return randomLogNormal;\n})(defaultSource);\n","import defaultSource from \"./defaultSource\";\n\nexport default (function sourceRandomIrwinHall(source) {\n  function randomIrwinHall(n) {\n    return function() {\n      for (var sum = 0, i = 0; i < n; ++i) sum += source();\n      return sum;\n    };\n  }\n\n  randomIrwinHall.source = sourceRandomIrwinHall;\n\n  return randomIrwinHall;\n})(defaultSource);\n","import defaultSource from \"./defaultSource\";\nimport irwinHall from \"./irwinHall\";\n\nexport default (function sourceRandomBates(source) {\n  function randomBates(n) {\n    var randomIrwinHall = irwinHall.source(source)(n);\n    return function() {\n      return randomIrwinHall() / n;\n    };\n  }\n\n  randomBates.source = sourceRandomBates;\n\n  return randomBates;\n})(defaultSource);\n","import defaultSource from \"./defaultSource\";\n\nexport default (function sourceRandomExponential(source) {\n  function randomExponential(lambda) {\n    return function() {\n      return -Math.log(1 - source()) / lambda;\n    };\n  }\n\n  randomExponential.source = sourceRandomExponential;\n\n  return randomExponential;\n})(defaultSource);\n","var array = Array.prototype;\n\nexport var map = array.map;\nexport var slice = array.slice;\n","import {map} from \"d3-collection\";\nimport {slice} from \"./array\";\n\nexport var implicit = {name: \"implicit\"};\n\nexport default function ordinal(range) {\n  var index = map(),\n      domain = [],\n      unknown = implicit;\n\n  range = range == null ? [] : slice.call(range);\n\n  function scale(d) {\n    var key = d + \"\", i = index.get(key);\n    if (!i) {\n      if (unknown !== implicit) return unknown;\n      index.set(key, i = domain.push(d));\n    }\n    return range[(i - 1) % range.length];\n  }\n\n  scale.domain = function(_) {\n    if (!arguments.length) return domain.slice();\n    domain = [], index = map();\n    var i = -1, n = _.length, d, key;\n    while (++i < n) if (!index.has(key = (d = _[i]) + \"\")) index.set(key, domain.push(d));\n    return scale;\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = slice.call(_), scale) : range.slice();\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.copy = function() {\n    return ordinal()\n        .domain(domain)\n        .range(range)\n        .unknown(unknown);\n  };\n\n  return scale;\n}\n","import {range as sequence} from \"d3-array\";\nimport ordinal from \"./ordinal\";\n\nexport default function band() {\n  var scale = ordinal().unknown(undefined),\n      domain = scale.domain,\n      ordinalRange = scale.range,\n      range = [0, 1],\n      step,\n      bandwidth,\n      round = false,\n      paddingInner = 0,\n      paddingOuter = 0,\n      align = 0.5;\n\n  delete scale.unknown;\n\n  function rescale() {\n    var n = domain().length,\n        reverse = range[1] < range[0],\n        start = range[reverse - 0],\n        stop = range[1 - reverse];\n    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);\n    if (round) step = Math.floor(step);\n    start += (stop - start - step * (n - paddingInner)) * align;\n    bandwidth = step * (1 - paddingInner);\n    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);\n    var values = sequence(n).map(function(i) { return start + step * i; });\n    return ordinalRange(reverse ? values.reverse() : values);\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain(_), rescale()) : domain();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = [+_[0], +_[1]], rescale()) : range.slice();\n  };\n\n  scale.rangeRound = function(_) {\n    return range = [+_[0], +_[1]], round = true, rescale();\n  };\n\n  scale.bandwidth = function() {\n    return bandwidth;\n  };\n\n  scale.step = function() {\n    return step;\n  };\n\n  scale.round = function(_) {\n    return arguments.length ? (round = !!_, rescale()) : round;\n  };\n\n  scale.padding = function(_) {\n    return arguments.length ? (paddingInner = paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;\n  };\n\n  scale.paddingInner = function(_) {\n    return arguments.length ? (paddingInner = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;\n  };\n\n  scale.paddingOuter = function(_) {\n    return arguments.length ? (paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingOuter;\n  };\n\n  scale.align = function(_) {\n    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;\n  };\n\n  scale.copy = function() {\n    return band()\n        .domain(domain())\n        .range(range)\n        .round(round)\n        .paddingInner(paddingInner)\n        .paddingOuter(paddingOuter)\n        .align(align);\n  };\n\n  return rescale();\n}\n\nfunction pointish(scale) {\n  var copy = scale.copy;\n\n  scale.padding = scale.paddingOuter;\n  delete scale.paddingInner;\n  delete scale.paddingOuter;\n\n  scale.copy = function() {\n    return pointish(copy());\n  };\n\n  return scale;\n}\n\nexport function point() {\n  return pointish(band().paddingInner(1));\n}\n","export default function(x) {\n  return function() {\n    return x;\n  };\n}\n","export default function(x) {\n  return +x;\n}\n","import {bisect} from \"d3-array\";\nimport {interpolate as interpolateValue, interpolateRound} from \"d3-interpolate\";\nimport {map, slice} from \"./array\";\nimport constant from \"./constant\";\nimport number from \"./number\";\n\nvar unit = [0, 1];\n\nexport function deinterpolateLinear(a, b) {\n  return (b -= (a = +a))\n      ? function(x) { return (x - a) / b; }\n      : constant(b);\n}\n\nfunction deinterpolateClamp(deinterpolate) {\n  return function(a, b) {\n    var d = deinterpolate(a = +a, b = +b);\n    return function(x) { return x <= a ? 0 : x >= b ? 1 : d(x); };\n  };\n}\n\nfunction reinterpolateClamp(reinterpolate) {\n  return function(a, b) {\n    var r = reinterpolate(a = +a, b = +b);\n    return function(t) { return t <= 0 ? a : t >= 1 ? b : r(t); };\n  };\n}\n\nfunction bimap(domain, range, deinterpolate, reinterpolate) {\n  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];\n  if (d1 < d0) d0 = deinterpolate(d1, d0), r0 = reinterpolate(r1, r0);\n  else d0 = deinterpolate(d0, d1), r0 = reinterpolate(r0, r1);\n  return function(x) { return r0(d0(x)); };\n}\n\nfunction polymap(domain, range, deinterpolate, reinterpolate) {\n  var j = Math.min(domain.length, range.length) - 1,\n      d = new Array(j),\n      r = new Array(j),\n      i = -1;\n\n  // Reverse descending domains.\n  if (domain[j] < domain[0]) {\n    domain = domain.slice().reverse();\n    range = range.slice().reverse();\n  }\n\n  while (++i < j) {\n    d[i] = deinterpolate(domain[i], domain[i + 1]);\n    r[i] = reinterpolate(range[i], range[i + 1]);\n  }\n\n  return function(x) {\n    var i = bisect(domain, x, 1, j) - 1;\n    return r[i](d[i](x));\n  };\n}\n\nexport function copy(source, target) {\n  return target\n      .domain(source.domain())\n      .range(source.range())\n      .interpolate(source.interpolate())\n      .clamp(source.clamp());\n}\n\n// deinterpolate(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].\n// reinterpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding domain value x in [a,b].\nexport default function continuous(deinterpolate, reinterpolate) {\n  var domain = unit,\n      range = unit,\n      interpolate = interpolateValue,\n      clamp = false,\n      piecewise,\n      output,\n      input;\n\n  function rescale() {\n    piecewise = Math.min(domain.length, range.length) > 2 ? polymap : bimap;\n    output = input = null;\n    return scale;\n  }\n\n  function scale(x) {\n    return (output || (output = piecewise(domain, range, clamp ? deinterpolateClamp(deinterpolate) : deinterpolate, interpolate)))(+x);\n  }\n\n  scale.invert = function(y) {\n    return (input || (input = piecewise(range, domain, deinterpolateLinear, clamp ? reinterpolateClamp(reinterpolate) : reinterpolate)))(+y);\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain = map.call(_, number), rescale()) : domain.slice();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = slice.call(_), rescale()) : range.slice();\n  };\n\n  scale.rangeRound = function(_) {\n    return range = slice.call(_), interpolate = interpolateRound, rescale();\n  };\n\n  scale.clamp = function(_) {\n    return arguments.length ? (clamp = !!_, rescale()) : clamp;\n  };\n\n  scale.interpolate = function(_) {\n    return arguments.length ? (interpolate = _, rescale()) : interpolate;\n  };\n\n  return rescale();\n}\n","import {tickStep} from \"d3-array\";\nimport {format, formatPrefix, formatSpecifier, precisionFixed, precisionPrefix, precisionRound} from \"d3-format\";\n\nexport default function(domain, count, specifier) {\n  var start = domain[0],\n      stop = domain[domain.length - 1],\n      step = tickStep(start, stop, count == null ? 10 : count),\n      precision;\n  specifier = formatSpecifier(specifier == null ? \",f\" : specifier);\n  switch (specifier.type) {\n    case \"s\": {\n      var value = Math.max(Math.abs(start), Math.abs(stop));\n      if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;\n      return formatPrefix(specifier, value);\n    }\n    case \"\":\n    case \"e\":\n    case \"g\":\n    case \"p\":\n    case \"r\": {\n      if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === \"e\");\n      break;\n    }\n    case \"f\":\n    case \"%\": {\n      if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === \"%\") * 2;\n      break;\n    }\n  }\n  return format(specifier);\n}\n","import {ticks, tickIncrement} from \"d3-array\";\nimport {interpolateNumber as reinterpolate} from \"d3-interpolate\";\nimport {default as continuous, copy, deinterpolateLinear as deinterpolate} from \"./continuous\";\nimport tickFormat from \"./tickFormat\";\n\nexport function linearish(scale) {\n  var domain = scale.domain;\n\n  scale.ticks = function(count) {\n    var d = domain();\n    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);\n  };\n\n  scale.tickFormat = function(count, specifier) {\n    return tickFormat(domain(), count, specifier);\n  };\n\n  scale.nice = function(count) {\n    if (count == null) count = 10;\n\n    var d = domain(),\n        i0 = 0,\n        i1 = d.length - 1,\n        start = d[i0],\n        stop = d[i1],\n        step;\n\n    if (stop < start) {\n      step = start, start = stop, stop = step;\n      step = i0, i0 = i1, i1 = step;\n    }\n\n    step = tickIncrement(start, stop, count);\n\n    if (step > 0) {\n      start = Math.floor(start / step) * step;\n      stop = Math.ceil(stop / step) * step;\n      step = tickIncrement(start, stop, count);\n    } else if (step < 0) {\n      start = Math.ceil(start * step) / step;\n      stop = Math.floor(stop * step) / step;\n      step = tickIncrement(start, stop, count);\n    }\n\n    if (step > 0) {\n      d[i0] = Math.floor(start / step) * step;\n      d[i1] = Math.ceil(stop / step) * step;\n      domain(d);\n    } else if (step < 0) {\n      d[i0] = Math.ceil(start * step) / step;\n      d[i1] = Math.floor(stop * step) / step;\n      domain(d);\n    }\n\n    return scale;\n  };\n\n  return scale;\n}\n\nexport default function linear() {\n  var scale = continuous(deinterpolate, reinterpolate);\n\n  scale.copy = function() {\n    return copy(scale, linear());\n  };\n\n  return linearish(scale);\n}\n","import {map} from \"./array\";\nimport {linearish} from \"./linear\";\nimport number from \"./number\";\n\nexport default function identity() {\n  var domain = [0, 1];\n\n  function scale(x) {\n    return +x;\n  }\n\n  scale.invert = scale;\n\n  scale.domain = scale.range = function(_) {\n    return arguments.length ? (domain = map.call(_, number), scale) : domain.slice();\n  };\n\n  scale.copy = function() {\n    return identity().domain(domain);\n  };\n\n  return linearish(scale);\n}\n","export default function(domain, interval) {\n  domain = domain.slice();\n\n  var i0 = 0,\n      i1 = domain.length - 1,\n      x0 = domain[i0],\n      x1 = domain[i1],\n      t;\n\n  if (x1 < x0) {\n    t = i0, i0 = i1, i1 = t;\n    t = x0, x0 = x1, x1 = t;\n  }\n\n  domain[i0] = interval.floor(x0);\n  domain[i1] = interval.ceil(x1);\n  return domain;\n}\n","import {ticks} from \"d3-array\";\nimport {format} from \"d3-format\";\nimport constant from \"./constant\";\nimport nice from \"./nice\";\nimport {default as continuous, copy} from \"./continuous\";\n\nfunction deinterpolate(a, b) {\n  return (b = Math.log(b / a))\n      ? function(x) { return Math.log(x / a) / b; }\n      : constant(b);\n}\n\nfunction reinterpolate(a, b) {\n  return a < 0\n      ? function(t) { return -Math.pow(-b, t) * Math.pow(-a, 1 - t); }\n      : function(t) { return Math.pow(b, t) * Math.pow(a, 1 - t); };\n}\n\nfunction pow10(x) {\n  return isFinite(x) ? +(\"1e\" + x) : x < 0 ? 0 : x;\n}\n\nfunction powp(base) {\n  return base === 10 ? pow10\n      : base === Math.E ? Math.exp\n      : function(x) { return Math.pow(base, x); };\n}\n\nfunction logp(base) {\n  return base === Math.E ? Math.log\n      : base === 10 && Math.log10\n      || base === 2 && Math.log2\n      || (base = Math.log(base), function(x) { return Math.log(x) / base; });\n}\n\nfunction reflect(f) {\n  return function(x) {\n    return -f(-x);\n  };\n}\n\nexport default function log() {\n  var scale = continuous(deinterpolate, reinterpolate).domain([1, 10]),\n      domain = scale.domain,\n      base = 10,\n      logs = logp(10),\n      pows = powp(10);\n\n  function rescale() {\n    logs = logp(base), pows = powp(base);\n    if (domain()[0] < 0) logs = reflect(logs), pows = reflect(pows);\n    return scale;\n  }\n\n  scale.base = function(_) {\n    return arguments.length ? (base = +_, rescale()) : base;\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain(_), rescale()) : domain();\n  };\n\n  scale.ticks = function(count) {\n    var d = domain(),\n        u = d[0],\n        v = d[d.length - 1],\n        r;\n\n    if (r = v < u) i = u, u = v, v = i;\n\n    var i = logs(u),\n        j = logs(v),\n        p,\n        k,\n        t,\n        n = count == null ? 10 : +count,\n        z = [];\n\n    if (!(base % 1) && j - i < n) {\n      i = Math.round(i) - 1, j = Math.round(j) + 1;\n      if (u > 0) for (; i < j; ++i) {\n        for (k = 1, p = pows(i); k < base; ++k) {\n          t = p * k;\n          if (t < u) continue;\n          if (t > v) break;\n          z.push(t);\n        }\n      } else for (; i < j; ++i) {\n        for (k = base - 1, p = pows(i); k >= 1; --k) {\n          t = p * k;\n          if (t < u) continue;\n          if (t > v) break;\n          z.push(t);\n        }\n      }\n    } else {\n      z = ticks(i, j, Math.min(j - i, n)).map(pows);\n    }\n\n    return r ? z.reverse() : z;\n  };\n\n  scale.tickFormat = function(count, specifier) {\n    if (specifier == null) specifier = base === 10 ? \".0e\" : \",\";\n    if (typeof specifier !== \"function\") specifier = format(specifier);\n    if (count === Infinity) return specifier;\n    if (count == null) count = 10;\n    var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?\n    return function(d) {\n      var i = d / pows(Math.round(logs(d)));\n      if (i * base < base - 0.5) i *= base;\n      return i <= k ? specifier(d) : \"\";\n    };\n  };\n\n  scale.nice = function() {\n    return domain(nice(domain(), {\n      floor: function(x) { return pows(Math.floor(logs(x))); },\n      ceil: function(x) { return pows(Math.ceil(logs(x))); }\n    }));\n  };\n\n  scale.copy = function() {\n    return copy(scale, log().base(base));\n  };\n\n  return scale;\n}\n","import constant from \"./constant\";\nimport {linearish} from \"./linear\";\nimport {default as continuous, copy} from \"./continuous\";\n\nfunction raise(x, exponent) {\n  return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);\n}\n\nexport default function pow() {\n  var exponent = 1,\n      scale = continuous(deinterpolate, reinterpolate),\n      domain = scale.domain;\n\n  function deinterpolate(a, b) {\n    return (b = raise(b, exponent) - (a = raise(a, exponent)))\n        ? function(x) { return (raise(x, exponent) - a) / b; }\n        : constant(b);\n  }\n\n  function reinterpolate(a, b) {\n    b = raise(b, exponent) - (a = raise(a, exponent));\n    return function(t) { return raise(a + b * t, 1 / exponent); };\n  }\n\n  scale.exponent = function(_) {\n    return arguments.length ? (exponent = +_, domain(domain())) : exponent;\n  };\n\n  scale.copy = function() {\n    return copy(scale, pow().exponent(exponent));\n  };\n\n  return linearish(scale);\n}\n\nexport function sqrt() {\n  return pow().exponent(0.5);\n}\n","import {ascending, bisect, quantile as threshold} from \"d3-array\";\nimport {slice} from \"./array\";\n\nexport default function quantile() {\n  var domain = [],\n      range = [],\n      thresholds = [];\n\n  function rescale() {\n    var i = 0, n = Math.max(1, range.length);\n    thresholds = new Array(n - 1);\n    while (++i < n) thresholds[i - 1] = threshold(domain, i / n);\n    return scale;\n  }\n\n  function scale(x) {\n    if (!isNaN(x = +x)) return range[bisect(thresholds, x)];\n  }\n\n  scale.invertExtent = function(y) {\n    var i = range.indexOf(y);\n    return i < 0 ? [NaN, NaN] : [\n      i > 0 ? thresholds[i - 1] : domain[0],\n      i < thresholds.length ? thresholds[i] : domain[domain.length - 1]\n    ];\n  };\n\n  scale.domain = function(_) {\n    if (!arguments.length) return domain.slice();\n    domain = [];\n    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);\n    domain.sort(ascending);\n    return rescale();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = slice.call(_), rescale()) : range.slice();\n  };\n\n  scale.quantiles = function() {\n    return thresholds.slice();\n  };\n\n  scale.copy = function() {\n    return quantile()\n        .domain(domain)\n        .range(range);\n  };\n\n  return scale;\n}\n","import {bisect} from \"d3-array\";\nimport {slice} from \"./array\";\nimport {linearish} from \"./linear\";\n\nexport default function quantize() {\n  var x0 = 0,\n      x1 = 1,\n      n = 1,\n      domain = [0.5],\n      range = [0, 1];\n\n  function scale(x) {\n    if (x <= x) return range[bisect(domain, x, 0, n)];\n  }\n\n  function rescale() {\n    var i = -1;\n    domain = new Array(n);\n    while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);\n    return scale;\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? (x0 = +_[0], x1 = +_[1], rescale()) : [x0, x1];\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (n = (range = slice.call(_)).length - 1, rescale()) : range.slice();\n  };\n\n  scale.invertExtent = function(y) {\n    var i = range.indexOf(y);\n    return i < 0 ? [NaN, NaN]\n        : i < 1 ? [x0, domain[0]]\n        : i >= n ? [domain[n - 1], x1]\n        : [domain[i - 1], domain[i]];\n  };\n\n  scale.copy = function() {\n    return quantize()\n        .domain([x0, x1])\n        .range(range);\n  };\n\n  return linearish(scale);\n}\n","import {bisect} from \"d3-array\";\nimport {slice} from \"./array\";\n\nexport default function threshold() {\n  var domain = [0.5],\n      range = [0, 1],\n      n = 1;\n\n  function scale(x) {\n    if (x <= x) return range[bisect(domain, x, 0, n)];\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain = slice.call(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = slice.call(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();\n  };\n\n  scale.invertExtent = function(y) {\n    var i = range.indexOf(y);\n    return [domain[i - 1], domain[i]];\n  };\n\n  scale.copy = function() {\n    return threshold()\n        .domain(domain)\n        .range(range);\n  };\n\n  return scale;\n}\n","var t0 = new Date,\n    t1 = new Date;\n\nexport default function newInterval(floori, offseti, count, field) {\n\n  function interval(date) {\n    return floori(date = new Date(+date)), date;\n  }\n\n  interval.floor = interval;\n\n  interval.ceil = function(date) {\n    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;\n  };\n\n  interval.round = function(date) {\n    var d0 = interval(date),\n        d1 = interval.ceil(date);\n    return date - d0 < d1 - date ? d0 : d1;\n  };\n\n  interval.offset = function(date, step) {\n    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;\n  };\n\n  interval.range = function(start, stop, step) {\n    var range = [], previous;\n    start = interval.ceil(start);\n    step = step == null ? 1 : Math.floor(step);\n    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date\n    do range.push(previous = new Date(+start)), offseti(start, step), floori(start);\n    while (previous < start && start < stop);\n    return range;\n  };\n\n  interval.filter = function(test) {\n    return newInterval(function(date) {\n      if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);\n    }, function(date, step) {\n      if (date >= date) {\n        if (step < 0) while (++step <= 0) {\n          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty\n        } else while (--step >= 0) {\n          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty\n        }\n      }\n    });\n  };\n\n  if (count) {\n    interval.count = function(start, end) {\n      t0.setTime(+start), t1.setTime(+end);\n      floori(t0), floori(t1);\n      return Math.floor(count(t0, t1));\n    };\n\n    interval.every = function(step) {\n      step = Math.floor(step);\n      return !isFinite(step) || !(step > 0) ? null\n          : !(step > 1) ? interval\n          : interval.filter(field\n              ? function(d) { return field(d) % step === 0; }\n              : function(d) { return interval.count(0, d) % step === 0; });\n    };\n  }\n\n  return interval;\n}\n","import interval from \"./interval\";\n\nvar millisecond = interval(function() {\n  // noop\n}, function(date, step) {\n  date.setTime(+date + step);\n}, function(start, end) {\n  return end - start;\n});\n\n// An optimized implementation for this simple case.\nmillisecond.every = function(k) {\n  k = Math.floor(k);\n  if (!isFinite(k) || !(k > 0)) return null;\n  if (!(k > 1)) return millisecond;\n  return interval(function(date) {\n    date.setTime(Math.floor(date / k) * k);\n  }, function(date, step) {\n    date.setTime(+date + step * k);\n  }, function(start, end) {\n    return (end - start) / k;\n  });\n};\n\nexport default millisecond;\nexport var milliseconds = millisecond.range;\n","export var durationSecond = 1e3;\nexport var durationMinute = 6e4;\nexport var durationHour = 36e5;\nexport var durationDay = 864e5;\nexport var durationWeek = 6048e5;\n","import interval from \"./interval\";\nimport {durationSecond} from \"./duration\";\n\nvar second = interval(function(date) {\n  date.setTime(Math.floor(date / durationSecond) * durationSecond);\n}, function(date, step) {\n  date.setTime(+date + step * durationSecond);\n}, function(start, end) {\n  return (end - start) / durationSecond;\n}, function(date) {\n  return date.getUTCSeconds();\n});\n\nexport default second;\nexport var seconds = second.range;\n","import interval from \"./interval\";\nimport {durationMinute} from \"./duration\";\n\nvar minute = interval(function(date) {\n  date.setTime(Math.floor(date / durationMinute) * durationMinute);\n}, function(date, step) {\n  date.setTime(+date + step * durationMinute);\n}, function(start, end) {\n  return (end - start) / durationMinute;\n}, function(date) {\n  return date.getMinutes();\n});\n\nexport default minute;\nexport var minutes = minute.range;\n","import interval from \"./interval\";\nimport {durationHour, durationMinute} from \"./duration\";\n\nvar hour = interval(function(date) {\n  var offset = date.getTimezoneOffset() * durationMinute % durationHour;\n  if (offset < 0) offset += durationHour;\n  date.setTime(Math.floor((+date - offset) / durationHour) * durationHour + offset);\n}, function(date, step) {\n  date.setTime(+date + step * durationHour);\n}, function(start, end) {\n  return (end - start) / durationHour;\n}, function(date) {\n  return date.getHours();\n});\n\nexport default hour;\nexport var hours = hour.range;\n","import interval from \"./interval\";\nimport {durationDay, durationMinute} from \"./duration\";\n\nvar day = interval(function(date) {\n  date.setHours(0, 0, 0, 0);\n}, function(date, step) {\n  date.setDate(date.getDate() + step);\n}, function(start, end) {\n  return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay;\n}, function(date) {\n  return date.getDate() - 1;\n});\n\nexport default day;\nexport var days = day.range;\n","import interval from \"./interval\";\nimport {durationMinute, durationWeek} from \"./duration\";\n\nfunction weekday(i) {\n  return interval(function(date) {\n    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);\n    date.setHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setDate(date.getDate() + step * 7);\n  }, function(start, end) {\n    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;\n  });\n}\n\nexport var sunday = weekday(0);\nexport var monday = weekday(1);\nexport var tuesday = weekday(2);\nexport var wednesday = weekday(3);\nexport var thursday = weekday(4);\nexport var friday = weekday(5);\nexport var saturday = weekday(6);\n\nexport var sundays = sunday.range;\nexport var mondays = monday.range;\nexport var tuesdays = tuesday.range;\nexport var wednesdays = wednesday.range;\nexport var thursdays = thursday.range;\nexport var fridays = friday.range;\nexport var saturdays = saturday.range;\n","import interval from \"./interval\";\n\nvar month = interval(function(date) {\n  date.setDate(1);\n  date.setHours(0, 0, 0, 0);\n}, function(date, step) {\n  date.setMonth(date.getMonth() + step);\n}, function(start, end) {\n  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;\n}, function(date) {\n  return date.getMonth();\n});\n\nexport default month;\nexport var months = month.range;\n","import interval from \"./interval\";\n\nvar year = interval(function(date) {\n  date.setMonth(0, 1);\n  date.setHours(0, 0, 0, 0);\n}, function(date, step) {\n  date.setFullYear(date.getFullYear() + step);\n}, function(start, end) {\n  return end.getFullYear() - start.getFullYear();\n}, function(date) {\n  return date.getFullYear();\n});\n\n// An optimized implementation for this simple case.\nyear.every = function(k) {\n  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : interval(function(date) {\n    date.setFullYear(Math.floor(date.getFullYear() / k) * k);\n    date.setMonth(0, 1);\n    date.setHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setFullYear(date.getFullYear() + step * k);\n  });\n};\n\nexport default year;\nexport var years = year.range;\n","import interval from \"./interval\";\nimport {durationMinute} from \"./duration\";\n\nvar utcMinute = interval(function(date) {\n  date.setUTCSeconds(0, 0);\n}, function(date, step) {\n  date.setTime(+date + step * durationMinute);\n}, function(start, end) {\n  return (end - start) / durationMinute;\n}, function(date) {\n  return date.getUTCMinutes();\n});\n\nexport default utcMinute;\nexport var utcMinutes = utcMinute.range;\n","import interval from \"./interval\";\nimport {durationHour} from \"./duration\";\n\nvar utcHour = interval(function(date) {\n  date.setUTCMinutes(0, 0, 0);\n}, function(date, step) {\n  date.setTime(+date + step * durationHour);\n}, function(start, end) {\n  return (end - start) / durationHour;\n}, function(date) {\n  return date.getUTCHours();\n});\n\nexport default utcHour;\nexport var utcHours = utcHour.range;\n","import interval from \"./interval\";\nimport {durationDay} from \"./duration\";\n\nvar utcDay = interval(function(date) {\n  date.setUTCHours(0, 0, 0, 0);\n}, function(date, step) {\n  date.setUTCDate(date.getUTCDate() + step);\n}, function(start, end) {\n  return (end - start) / durationDay;\n}, function(date) {\n  return date.getUTCDate() - 1;\n});\n\nexport default utcDay;\nexport var utcDays = utcDay.range;\n","import interval from \"./interval\";\nimport {durationWeek} from \"./duration\";\n\nfunction utcWeekday(i) {\n  return interval(function(date) {\n    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);\n    date.setUTCHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setUTCDate(date.getUTCDate() + step * 7);\n  }, function(start, end) {\n    return (end - start) / durationWeek;\n  });\n}\n\nexport var utcSunday = utcWeekday(0);\nexport var utcMonday = utcWeekday(1);\nexport var utcTuesday = utcWeekday(2);\nexport var utcWednesday = utcWeekday(3);\nexport var utcThursday = utcWeekday(4);\nexport var utcFriday = utcWeekday(5);\nexport var utcSaturday = utcWeekday(6);\n\nexport var utcSundays = utcSunday.range;\nexport var utcMondays = utcMonday.range;\nexport var utcTuesdays = utcTuesday.range;\nexport var utcWednesdays = utcWednesday.range;\nexport var utcThursdays = utcThursday.range;\nexport var utcFridays = utcFriday.range;\nexport var utcSaturdays = utcSaturday.range;\n","import interval from \"./interval\";\n\nvar utcMonth = interval(function(date) {\n  date.setUTCDate(1);\n  date.setUTCHours(0, 0, 0, 0);\n}, function(date, step) {\n  date.setUTCMonth(date.getUTCMonth() + step);\n}, function(start, end) {\n  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;\n}, function(date) {\n  return date.getUTCMonth();\n});\n\nexport default utcMonth;\nexport var utcMonths = utcMonth.range;\n","import interval from \"./interval\";\n\nvar utcYear = interval(function(date) {\n  date.setUTCMonth(0, 1);\n  date.setUTCHours(0, 0, 0, 0);\n}, function(date, step) {\n  date.setUTCFullYear(date.getUTCFullYear() + step);\n}, function(start, end) {\n  return end.getUTCFullYear() - start.getUTCFullYear();\n}, function(date) {\n  return date.getUTCFullYear();\n});\n\n// An optimized implementation for this simple case.\nutcYear.every = function(k) {\n  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : interval(function(date) {\n    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);\n    date.setUTCMonth(0, 1);\n    date.setUTCHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setUTCFullYear(date.getUTCFullYear() + step * k);\n  });\n};\n\nexport default utcYear;\nexport var utcYears = utcYear.range;\n","import {\n  timeDay,\n  timeSunday,\n  timeMonday,\n  timeThursday,\n  timeYear,\n  utcDay,\n  utcSunday,\n  utcMonday,\n  utcThursday,\n  utcYear\n} from \"d3-time\";\n\nfunction localDate(d) {\n  if (0 <= d.y && d.y < 100) {\n    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);\n    date.setFullYear(d.y);\n    return date;\n  }\n  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);\n}\n\nfunction utcDate(d) {\n  if (0 <= d.y && d.y < 100) {\n    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));\n    date.setUTCFullYear(d.y);\n    return date;\n  }\n  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));\n}\n\nfunction newYear(y) {\n  return {y: y, m: 0, d: 1, H: 0, M: 0, S: 0, L: 0};\n}\n\nexport default function formatLocale(locale) {\n  var locale_dateTime = locale.dateTime,\n      locale_date = locale.date,\n      locale_time = locale.time,\n      locale_periods = locale.periods,\n      locale_weekdays = locale.days,\n      locale_shortWeekdays = locale.shortDays,\n      locale_months = locale.months,\n      locale_shortMonths = locale.shortMonths;\n\n  var periodRe = formatRe(locale_periods),\n      periodLookup = formatLookup(locale_periods),\n      weekdayRe = formatRe(locale_weekdays),\n      weekdayLookup = formatLookup(locale_weekdays),\n      shortWeekdayRe = formatRe(locale_shortWeekdays),\n      shortWeekdayLookup = formatLookup(locale_shortWeekdays),\n      monthRe = formatRe(locale_months),\n      monthLookup = formatLookup(locale_months),\n      shortMonthRe = formatRe(locale_shortMonths),\n      shortMonthLookup = formatLookup(locale_shortMonths);\n\n  var formats = {\n    \"a\": formatShortWeekday,\n    \"A\": formatWeekday,\n    \"b\": formatShortMonth,\n    \"B\": formatMonth,\n    \"c\": null,\n    \"d\": formatDayOfMonth,\n    \"e\": formatDayOfMonth,\n    \"f\": formatMicroseconds,\n    \"H\": formatHour24,\n    \"I\": formatHour12,\n    \"j\": formatDayOfYear,\n    \"L\": formatMilliseconds,\n    \"m\": formatMonthNumber,\n    \"M\": formatMinutes,\n    \"p\": formatPeriod,\n    \"Q\": formatUnixTimestamp,\n    \"s\": formatUnixTimestampSeconds,\n    \"S\": formatSeconds,\n    \"u\": formatWeekdayNumberMonday,\n    \"U\": formatWeekNumberSunday,\n    \"V\": formatWeekNumberISO,\n    \"w\": formatWeekdayNumberSunday,\n    \"W\": formatWeekNumberMonday,\n    \"x\": null,\n    \"X\": null,\n    \"y\": formatYear,\n    \"Y\": formatFullYear,\n    \"Z\": formatZone,\n    \"%\": formatLiteralPercent\n  };\n\n  var utcFormats = {\n    \"a\": formatUTCShortWeekday,\n    \"A\": formatUTCWeekday,\n    \"b\": formatUTCShortMonth,\n    \"B\": formatUTCMonth,\n    \"c\": null,\n    \"d\": formatUTCDayOfMonth,\n    \"e\": formatUTCDayOfMonth,\n    \"f\": formatUTCMicroseconds,\n    \"H\": formatUTCHour24,\n    \"I\": formatUTCHour12,\n    \"j\": formatUTCDayOfYear,\n    \"L\": formatUTCMilliseconds,\n    \"m\": formatUTCMonthNumber,\n    \"M\": formatUTCMinutes,\n    \"p\": formatUTCPeriod,\n    \"Q\": formatUnixTimestamp,\n    \"s\": formatUnixTimestampSeconds,\n    \"S\": formatUTCSeconds,\n    \"u\": formatUTCWeekdayNumberMonday,\n    \"U\": formatUTCWeekNumberSunday,\n    \"V\": formatUTCWeekNumberISO,\n    \"w\": formatUTCWeekdayNumberSunday,\n    \"W\": formatUTCWeekNumberMonday,\n    \"x\": null,\n    \"X\": null,\n    \"y\": formatUTCYear,\n    \"Y\": formatUTCFullYear,\n    \"Z\": formatUTCZone,\n    \"%\": formatLiteralPercent\n  };\n\n  var parses = {\n    \"a\": parseShortWeekday,\n    \"A\": parseWeekday,\n    \"b\": parseShortMonth,\n    \"B\": parseMonth,\n    \"c\": parseLocaleDateTime,\n    \"d\": parseDayOfMonth,\n    \"e\": parseDayOfMonth,\n    \"f\": parseMicroseconds,\n    \"H\": parseHour24,\n    \"I\": parseHour24,\n    \"j\": parseDayOfYear,\n    \"L\": parseMilliseconds,\n    \"m\": parseMonthNumber,\n    \"M\": parseMinutes,\n    \"p\": parsePeriod,\n    \"Q\": parseUnixTimestamp,\n    \"s\": parseUnixTimestampSeconds,\n    \"S\": parseSeconds,\n    \"u\": parseWeekdayNumberMonday,\n    \"U\": parseWeekNumberSunday,\n    \"V\": parseWeekNumberISO,\n    \"w\": parseWeekdayNumberSunday,\n    \"W\": parseWeekNumberMonday,\n    \"x\": parseLocaleDate,\n    \"X\": parseLocaleTime,\n    \"y\": parseYear,\n    \"Y\": parseFullYear,\n    \"Z\": parseZone,\n    \"%\": parseLiteralPercent\n  };\n\n  // These recursive directive definitions must be deferred.\n  formats.x = newFormat(locale_date, formats);\n  formats.X = newFormat(locale_time, formats);\n  formats.c = newFormat(locale_dateTime, formats);\n  utcFormats.x = newFormat(locale_date, utcFormats);\n  utcFormats.X = newFormat(locale_time, utcFormats);\n  utcFormats.c = newFormat(locale_dateTime, utcFormats);\n\n  function newFormat(specifier, formats) {\n    return function(date) {\n      var string = [],\n          i = -1,\n          j = 0,\n          n = specifier.length,\n          c,\n          pad,\n          format;\n\n      if (!(date instanceof Date)) date = new Date(+date);\n\n      while (++i < n) {\n        if (specifier.charCodeAt(i) === 37) {\n          string.push(specifier.slice(j, i));\n          if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);\n          else pad = c === \"e\" ? \" \" : \"0\";\n          if (format = formats[c]) c = format(date, pad);\n          string.push(c);\n          j = i + 1;\n        }\n      }\n\n      string.push(specifier.slice(j, i));\n      return string.join(\"\");\n    };\n  }\n\n  function newParse(specifier, newDate) {\n    return function(string) {\n      var d = newYear(1900),\n          i = parseSpecifier(d, specifier, string += \"\", 0),\n          week, day;\n      if (i != string.length) return null;\n\n      // If a UNIX timestamp is specified, return it.\n      if (\"Q\" in d) return new Date(d.Q);\n\n      // The am-pm flag is 0 for AM, and 1 for PM.\n      if (\"p\" in d) d.H = d.H % 12 + d.p * 12;\n\n      // Convert day-of-week and week-of-year to day-of-year.\n      if (\"V\" in d) {\n        if (d.V < 1 || d.V > 53) return null;\n        if (!(\"w\" in d)) d.w = 1;\n        if (\"Z\" in d) {\n          week = utcDate(newYear(d.y)), day = week.getUTCDay();\n          week = day > 4 || day === 0 ? utcMonday.ceil(week) : utcMonday(week);\n          week = utcDay.offset(week, (d.V - 1) * 7);\n          d.y = week.getUTCFullYear();\n          d.m = week.getUTCMonth();\n          d.d = week.getUTCDate() + (d.w + 6) % 7;\n        } else {\n          week = newDate(newYear(d.y)), day = week.getDay();\n          week = day > 4 || day === 0 ? timeMonday.ceil(week) : timeMonday(week);\n          week = timeDay.offset(week, (d.V - 1) * 7);\n          d.y = week.getFullYear();\n          d.m = week.getMonth();\n          d.d = week.getDate() + (d.w + 6) % 7;\n        }\n      } else if (\"W\" in d || \"U\" in d) {\n        if (!(\"w\" in d)) d.w = \"u\" in d ? d.u % 7 : \"W\" in d ? 1 : 0;\n        day = \"Z\" in d ? utcDate(newYear(d.y)).getUTCDay() : newDate(newYear(d.y)).getDay();\n        d.m = 0;\n        d.d = \"W\" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;\n      }\n\n      // If a time zone is specified, all fields are interpreted as UTC and then\n      // offset according to the specified time zone.\n      if (\"Z\" in d) {\n        d.H += d.Z / 100 | 0;\n        d.M += d.Z % 100;\n        return utcDate(d);\n      }\n\n      // Otherwise, all fields are in local time.\n      return newDate(d);\n    };\n  }\n\n  function parseSpecifier(d, specifier, string, j) {\n    var i = 0,\n        n = specifier.length,\n        m = string.length,\n        c,\n        parse;\n\n    while (i < n) {\n      if (j >= m) return -1;\n      c = specifier.charCodeAt(i++);\n      if (c === 37) {\n        c = specifier.charAt(i++);\n        parse = parses[c in pads ? specifier.charAt(i++) : c];\n        if (!parse || ((j = parse(d, string, j)) < 0)) return -1;\n      } else if (c != string.charCodeAt(j++)) {\n        return -1;\n      }\n    }\n\n    return j;\n  }\n\n  function parsePeriod(d, string, i) {\n    var n = periodRe.exec(string.slice(i));\n    return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n  }\n\n  function parseShortWeekday(d, string, i) {\n    var n = shortWeekdayRe.exec(string.slice(i));\n    return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n  }\n\n  function parseWeekday(d, string, i) {\n    var n = weekdayRe.exec(string.slice(i));\n    return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n  }\n\n  function parseShortMonth(d, string, i) {\n    var n = shortMonthRe.exec(string.slice(i));\n    return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n  }\n\n  function parseMonth(d, string, i) {\n    var n = monthRe.exec(string.slice(i));\n    return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n  }\n\n  function parseLocaleDateTime(d, string, i) {\n    return parseSpecifier(d, locale_dateTime, string, i);\n  }\n\n  function parseLocaleDate(d, string, i) {\n    return parseSpecifier(d, locale_date, string, i);\n  }\n\n  function parseLocaleTime(d, string, i) {\n    return parseSpecifier(d, locale_time, string, i);\n  }\n\n  function formatShortWeekday(d) {\n    return locale_shortWeekdays[d.getDay()];\n  }\n\n  function formatWeekday(d) {\n    return locale_weekdays[d.getDay()];\n  }\n\n  function formatShortMonth(d) {\n    return locale_shortMonths[d.getMonth()];\n  }\n\n  function formatMonth(d) {\n    return locale_months[d.getMonth()];\n  }\n\n  function formatPeriod(d) {\n    return locale_periods[+(d.getHours() >= 12)];\n  }\n\n  function formatUTCShortWeekday(d) {\n    return locale_shortWeekdays[d.getUTCDay()];\n  }\n\n  function formatUTCWeekday(d) {\n    return locale_weekdays[d.getUTCDay()];\n  }\n\n  function formatUTCShortMonth(d) {\n    return locale_shortMonths[d.getUTCMonth()];\n  }\n\n  function formatUTCMonth(d) {\n    return locale_months[d.getUTCMonth()];\n  }\n\n  function formatUTCPeriod(d) {\n    return locale_periods[+(d.getUTCHours() >= 12)];\n  }\n\n  return {\n    format: function(specifier) {\n      var f = newFormat(specifier += \"\", formats);\n      f.toString = function() { return specifier; };\n      return f;\n    },\n    parse: function(specifier) {\n      var p = newParse(specifier += \"\", localDate);\n      p.toString = function() { return specifier; };\n      return p;\n    },\n    utcFormat: function(specifier) {\n      var f = newFormat(specifier += \"\", utcFormats);\n      f.toString = function() { return specifier; };\n      return f;\n    },\n    utcParse: function(specifier) {\n      var p = newParse(specifier, utcDate);\n      p.toString = function() { return specifier; };\n      return p;\n    }\n  };\n}\n\nvar pads = {\"-\": \"\", \"_\": \" \", \"0\": \"0\"},\n    numberRe = /^\\s*\\d+/, // note: ignores next directive\n    percentRe = /^%/,\n    requoteRe = /[\\\\^$*+?|[\\]().{}]/g;\n\nfunction pad(value, fill, width) {\n  var sign = value < 0 ? \"-\" : \"\",\n      string = (sign ? -value : value) + \"\",\n      length = string.length;\n  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);\n}\n\nfunction requote(s) {\n  return s.replace(requoteRe, \"\\\\$&\");\n}\n\nfunction formatRe(names) {\n  return new RegExp(\"^(?:\" + names.map(requote).join(\"|\") + \")\", \"i\");\n}\n\nfunction formatLookup(names) {\n  var map = {}, i = -1, n = names.length;\n  while (++i < n) map[names[i].toLowerCase()] = i;\n  return map;\n}\n\nfunction parseWeekdayNumberSunday(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 1));\n  return n ? (d.w = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseWeekdayNumberMonday(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 1));\n  return n ? (d.u = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseWeekNumberSunday(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.U = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseWeekNumberISO(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.V = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseWeekNumberMonday(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.W = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseFullYear(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 4));\n  return n ? (d.y = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseYear(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;\n}\n\nfunction parseZone(d, string, i) {\n  var n = /^(Z)|([+-]\\d\\d)(?::?(\\d\\d))?/.exec(string.slice(i, i + 6));\n  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || \"00\")), i + n[0].length) : -1;\n}\n\nfunction parseMonthNumber(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;\n}\n\nfunction parseDayOfMonth(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.d = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseDayOfYear(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 3));\n  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseHour24(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.H = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseMinutes(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.M = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseSeconds(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.S = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseMilliseconds(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 3));\n  return n ? (d.L = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseMicroseconds(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 6));\n  return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;\n}\n\nfunction parseLiteralPercent(d, string, i) {\n  var n = percentRe.exec(string.slice(i, i + 1));\n  return n ? i + n[0].length : -1;\n}\n\nfunction parseUnixTimestamp(d, string, i) {\n  var n = numberRe.exec(string.slice(i));\n  return n ? (d.Q = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseUnixTimestampSeconds(d, string, i) {\n  var n = numberRe.exec(string.slice(i));\n  return n ? (d.Q = (+n[0]) * 1000, i + n[0].length) : -1;\n}\n\nfunction formatDayOfMonth(d, p) {\n  return pad(d.getDate(), p, 2);\n}\n\nfunction formatHour24(d, p) {\n  return pad(d.getHours(), p, 2);\n}\n\nfunction formatHour12(d, p) {\n  return pad(d.getHours() % 12 || 12, p, 2);\n}\n\nfunction formatDayOfYear(d, p) {\n  return pad(1 + timeDay.count(timeYear(d), d), p, 3);\n}\n\nfunction formatMilliseconds(d, p) {\n  return pad(d.getMilliseconds(), p, 3);\n}\n\nfunction formatMicroseconds(d, p) {\n  return formatMilliseconds(d, p) + \"000\";\n}\n\nfunction formatMonthNumber(d, p) {\n  return pad(d.getMonth() + 1, p, 2);\n}\n\nfunction formatMinutes(d, p) {\n  return pad(d.getMinutes(), p, 2);\n}\n\nfunction formatSeconds(d, p) {\n  return pad(d.getSeconds(), p, 2);\n}\n\nfunction formatWeekdayNumberMonday(d) {\n  var day = d.getDay();\n  return day === 0 ? 7 : day;\n}\n\nfunction formatWeekNumberSunday(d, p) {\n  return pad(timeSunday.count(timeYear(d), d), p, 2);\n}\n\nfunction formatWeekNumberISO(d, p) {\n  var day = d.getDay();\n  d = (day >= 4 || day === 0) ? timeThursday(d) : timeThursday.ceil(d);\n  return pad(timeThursday.count(timeYear(d), d) + (timeYear(d).getDay() === 4), p, 2);\n}\n\nfunction formatWeekdayNumberSunday(d) {\n  return d.getDay();\n}\n\nfunction formatWeekNumberMonday(d, p) {\n  return pad(timeMonday.count(timeYear(d), d), p, 2);\n}\n\nfunction formatYear(d, p) {\n  return pad(d.getFullYear() % 100, p, 2);\n}\n\nfunction formatFullYear(d, p) {\n  return pad(d.getFullYear() % 10000, p, 4);\n}\n\nfunction formatZone(d) {\n  var z = d.getTimezoneOffset();\n  return (z > 0 ? \"-\" : (z *= -1, \"+\"))\n      + pad(z / 60 | 0, \"0\", 2)\n      + pad(z % 60, \"0\", 2);\n}\n\nfunction formatUTCDayOfMonth(d, p) {\n  return pad(d.getUTCDate(), p, 2);\n}\n\nfunction formatUTCHour24(d, p) {\n  return pad(d.getUTCHours(), p, 2);\n}\n\nfunction formatUTCHour12(d, p) {\n  return pad(d.getUTCHours() % 12 || 12, p, 2);\n}\n\nfunction formatUTCDayOfYear(d, p) {\n  return pad(1 + utcDay.count(utcYear(d), d), p, 3);\n}\n\nfunction formatUTCMilliseconds(d, p) {\n  return pad(d.getUTCMilliseconds(), p, 3);\n}\n\nfunction formatUTCMicroseconds(d, p) {\n  return formatUTCMilliseconds(d, p) + \"000\";\n}\n\nfunction formatUTCMonthNumber(d, p) {\n  return pad(d.getUTCMonth() + 1, p, 2);\n}\n\nfunction formatUTCMinutes(d, p) {\n  return pad(d.getUTCMinutes(), p, 2);\n}\n\nfunction formatUTCSeconds(d, p) {\n  return pad(d.getUTCSeconds(), p, 2);\n}\n\nfunction formatUTCWeekdayNumberMonday(d) {\n  var dow = d.getUTCDay();\n  return dow === 0 ? 7 : dow;\n}\n\nfunction formatUTCWeekNumberSunday(d, p) {\n  return pad(utcSunday.count(utcYear(d), d), p, 2);\n}\n\nfunction formatUTCWeekNumberISO(d, p) {\n  var day = d.getUTCDay();\n  d = (day >= 4 || day === 0) ? utcThursday(d) : utcThursday.ceil(d);\n  return pad(utcThursday.count(utcYear(d), d) + (utcYear(d).getUTCDay() === 4), p, 2);\n}\n\nfunction formatUTCWeekdayNumberSunday(d) {\n  return d.getUTCDay();\n}\n\nfunction formatUTCWeekNumberMonday(d, p) {\n  return pad(utcMonday.count(utcYear(d), d), p, 2);\n}\n\nfunction formatUTCYear(d, p) {\n  return pad(d.getUTCFullYear() % 100, p, 2);\n}\n\nfunction formatUTCFullYear(d, p) {\n  return pad(d.getUTCFullYear() % 10000, p, 4);\n}\n\nfunction formatUTCZone() {\n  return \"+0000\";\n}\n\nfunction formatLiteralPercent() {\n  return \"%\";\n}\n\nfunction formatUnixTimestamp(d) {\n  return +d;\n}\n\nfunction formatUnixTimestampSeconds(d) {\n  return Math.floor(+d / 1000);\n}\n","import formatLocale from \"./locale\";\n\nvar locale;\nexport var timeFormat;\nexport var timeParse;\nexport var utcFormat;\nexport var utcParse;\n\ndefaultLocale({\n  dateTime: \"%x, %X\",\n  date: \"%-m/%-d/%Y\",\n  time: \"%-I:%M:%S %p\",\n  periods: [\"AM\", \"PM\"],\n  days: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n  shortDays: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n  months: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n  shortMonths: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n});\n\nexport default function defaultLocale(definition) {\n  locale = formatLocale(definition);\n  timeFormat = locale.format;\n  timeParse = locale.parse;\n  utcFormat = locale.utcFormat;\n  utcParse = locale.utcParse;\n  return locale;\n}\n","import {utcFormat} from \"./defaultLocale\";\n\nexport var isoSpecifier = \"%Y-%m-%dT%H:%M:%S.%LZ\";\n\nfunction formatIsoNative(date) {\n  return date.toISOString();\n}\n\nvar formatIso = Date.prototype.toISOString\n    ? formatIsoNative\n    : utcFormat(isoSpecifier);\n\nexport default formatIso;\n","import {isoSpecifier} from \"./isoFormat\";\nimport {utcParse} from \"./defaultLocale\";\n\nfunction parseIsoNative(string) {\n  var date = new Date(string);\n  return isNaN(date) ? null : date;\n}\n\nvar parseIso = +new Date(\"2000-01-01T00:00:00.000Z\")\n    ? parseIsoNative\n    : utcParse(isoSpecifier);\n\nexport default parseIso;\n","import {bisector, tickStep} from \"d3-array\";\nimport {interpolateNumber as reinterpolate} from \"d3-interpolate\";\nimport {timeYear, timeMonth, timeWeek, timeDay, timeHour, timeMinute, timeSecond, timeMillisecond} from \"d3-time\";\nimport {timeFormat} from \"d3-time-format\";\nimport {map} from \"./array\";\nimport {default as continuous, copy, deinterpolateLinear as deinterpolate} from \"./continuous\";\nimport nice from \"./nice\";\n\nvar durationSecond = 1000,\n    durationMinute = durationSecond * 60,\n    durationHour = durationMinute * 60,\n    durationDay = durationHour * 24,\n    durationWeek = durationDay * 7,\n    durationMonth = durationDay * 30,\n    durationYear = durationDay * 365;\n\nfunction date(t) {\n  return new Date(t);\n}\n\nfunction number(t) {\n  return t instanceof Date ? +t : +new Date(+t);\n}\n\nexport function calendar(year, month, week, day, hour, minute, second, millisecond, format) {\n  var scale = continuous(deinterpolate, reinterpolate),\n      invert = scale.invert,\n      domain = scale.domain;\n\n  var formatMillisecond = format(\".%L\"),\n      formatSecond = format(\":%S\"),\n      formatMinute = format(\"%I:%M\"),\n      formatHour = format(\"%I %p\"),\n      formatDay = format(\"%a %d\"),\n      formatWeek = format(\"%b %d\"),\n      formatMonth = format(\"%B\"),\n      formatYear = format(\"%Y\");\n\n  var tickIntervals = [\n    [second,  1,      durationSecond],\n    [second,  5,  5 * durationSecond],\n    [second, 15, 15 * durationSecond],\n    [second, 30, 30 * durationSecond],\n    [minute,  1,      durationMinute],\n    [minute,  5,  5 * durationMinute],\n    [minute, 15, 15 * durationMinute],\n    [minute, 30, 30 * durationMinute],\n    [  hour,  1,      durationHour  ],\n    [  hour,  3,  3 * durationHour  ],\n    [  hour,  6,  6 * durationHour  ],\n    [  hour, 12, 12 * durationHour  ],\n    [   day,  1,      durationDay   ],\n    [   day,  2,  2 * durationDay   ],\n    [  week,  1,      durationWeek  ],\n    [ month,  1,      durationMonth ],\n    [ month,  3,  3 * durationMonth ],\n    [  year,  1,      durationYear  ]\n  ];\n\n  function tickFormat(date) {\n    return (second(date) < date ? formatMillisecond\n        : minute(date) < date ? formatSecond\n        : hour(date) < date ? formatMinute\n        : day(date) < date ? formatHour\n        : month(date) < date ? (week(date) < date ? formatDay : formatWeek)\n        : year(date) < date ? formatMonth\n        : formatYear)(date);\n  }\n\n  function tickInterval(interval, start, stop, step) {\n    if (interval == null) interval = 10;\n\n    // If a desired tick count is specified, pick a reasonable tick interval\n    // based on the extent of the domain and a rough estimate of tick size.\n    // Otherwise, assume interval is already a time interval and use it.\n    if (typeof interval === \"number\") {\n      var target = Math.abs(stop - start) / interval,\n          i = bisector(function(i) { return i[2]; }).right(tickIntervals, target);\n      if (i === tickIntervals.length) {\n        step = tickStep(start / durationYear, stop / durationYear, interval);\n        interval = year;\n      } else if (i) {\n        i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];\n        step = i[1];\n        interval = i[0];\n      } else {\n        step = Math.max(tickStep(start, stop, interval), 1);\n        interval = millisecond;\n      }\n    }\n\n    return step == null ? interval : interval.every(step);\n  }\n\n  scale.invert = function(y) {\n    return new Date(invert(y));\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? domain(map.call(_, number)) : domain().map(date);\n  };\n\n  scale.ticks = function(interval, step) {\n    var d = domain(),\n        t0 = d[0],\n        t1 = d[d.length - 1],\n        r = t1 < t0,\n        t;\n    if (r) t = t0, t0 = t1, t1 = t;\n    t = tickInterval(interval, t0, t1, step);\n    t = t ? t.range(t0, t1 + 1) : []; // inclusive stop\n    return r ? t.reverse() : t;\n  };\n\n  scale.tickFormat = function(count, specifier) {\n    return specifier == null ? tickFormat : format(specifier);\n  };\n\n  scale.nice = function(interval, step) {\n    var d = domain();\n    return (interval = tickInterval(interval, d[0], d[d.length - 1], step))\n        ? domain(nice(d, interval))\n        : scale;\n  };\n\n  scale.copy = function() {\n    return copy(scale, calendar(year, month, week, day, hour, minute, second, millisecond, format));\n  };\n\n  return scale;\n}\n\nexport default function() {\n  return calendar(timeYear, timeMonth, timeWeek, timeDay, timeHour, timeMinute, timeSecond, timeMillisecond, timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]);\n}\n","import {calendar} from \"./time\";\nimport {utcFormat} from \"d3-time-format\";\nimport {utcYear, utcMonth, utcWeek, utcDay, utcHour, utcMinute, utcSecond, utcMillisecond} from \"d3-time\";\n\nexport default function() {\n  return calendar(utcYear, utcMonth, utcWeek, utcDay, utcHour, utcMinute, utcSecond, utcMillisecond, utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]);\n}\n","import {linearish} from \"./linear\";\n\nexport default function sequential(interpolator) {\n  var x0 = 0,\n      x1 = 1,\n      k10 = 1,\n      clamp = false;\n\n  function scale(x) {\n    var t = (x - x0) * k10;\n    return interpolator(clamp ? Math.max(0, Math.min(1, t)) : t);\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? (x0 = +_[0], x1 = +_[1], k10 = x0 === x1 ? 0 : 1 / (x1 - x0), scale) : [x0, x1];\n  };\n\n  scale.clamp = function(_) {\n    return arguments.length ? (clamp = !!_, scale) : clamp;\n  };\n\n  scale.interpolator = function(_) {\n    return arguments.length ? (interpolator = _, scale) : interpolator;\n  };\n\n  scale.copy = function() {\n    return sequential(interpolator).domain([x0, x1]).clamp(clamp);\n  };\n\n  return linearish(scale);\n}\n","import {linearish} from \"./linear\";\n\nexport default function diverging(interpolator) {\n  var x0 = 0,\n      x1 = 0.5,\n      x2 = 1,\n      k10 = 1,\n      k21 = 1,\n      clamp = false;\n\n  function scale(x) {\n    var t = 0.5 + ((x = +x) - x1) * (x < x1 ? k10 : k21);\n    return interpolator(clamp ? Math.max(0, Math.min(1, t)) : t);\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? (x0 = +_[0], x1 = +_[1], x2 = +_[2], k10 = x0 === x1 ? 0 : 0.5 / (x1 - x0), k21 = x1 === x2 ? 0 : 0.5 / (x2 - x1), scale) : [x0, x1, x2];\n  };\n\n  scale.clamp = function(_) {\n    return arguments.length ? (clamp = !!_, scale) : clamp;\n  };\n\n  scale.interpolator = function(_) {\n    return arguments.length ? (interpolator = _, scale) : interpolator;\n  };\n\n  scale.copy = function() {\n    return diverging(interpolator).domain([x0, x1, x2]).clamp(clamp);\n  };\n\n  return linearish(scale);\n}\n","export default function(specifier) {\n  var n = specifier.length / 6 | 0, colors = new Array(n), i = 0;\n  while (i < n) colors[i] = \"#\" + specifier.slice(i * 6, ++i * 6);\n  return colors;\n}\n","import colors from \"../colors\";\n\nexport default colors(\"1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf\");\n","import colors from \"../colors\";\n\nexport default colors(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\");\n","import colors from \"../colors\";\n\nexport default colors(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\");\n","import colors from \"../colors\";\n\nexport default colors(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\");\n","import colors from \"../colors\";\n\nexport default colors(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\");\n","import colors from \"../colors\";\n\nexport default colors(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\");\n","import colors from \"../colors\";\n\nexport default colors(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\");\n","import colors from \"../colors\";\n\nexport default colors(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\");\n","import colors from \"../colors\";\n\nexport default colors(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\");\n","import {interpolateRgbBasis} from \"d3-interpolate\";\n\nexport default function(scheme) {\n  return interpolateRgbBasis(scheme[scheme.length - 1]);\n}\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"d8b365f5f5f55ab4ac\",\n  \"a6611adfc27d80cdc1018571\",\n  \"a6611adfc27df5f5f580cdc1018571\",\n  \"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\n  \"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\n  \"8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e\",\n  \"8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e\",\n  \"5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30\",\n  \"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"af8dc3f7f7f77fbf7b\",\n  \"7b3294c2a5cfa6dba0008837\",\n  \"7b3294c2a5cff7f7f7a6dba0008837\",\n  \"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\n  \"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\n  \"762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837\",\n  \"762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837\",\n  \"40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b\",\n  \"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"e9a3c9f7f7f7a1d76a\",\n  \"d01c8bf1b6dab8e1864dac26\",\n  \"d01c8bf1b6daf7f7f7b8e1864dac26\",\n  \"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\n  \"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\n  \"c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221\",\n  \"c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221\",\n  \"8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419\",\n  \"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"998ec3f7f7f7f1a340\",\n  \"5e3c99b2abd2fdb863e66101\",\n  \"5e3c99b2abd2f7f7f7fdb863e66101\",\n  \"542788998ec3d8daebfee0b6f1a340b35806\",\n  \"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\n  \"5427888073acb2abd2d8daebfee0b6fdb863e08214b35806\",\n  \"5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806\",\n  \"2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08\",\n  \"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"ef8a62f7f7f767a9cf\",\n  \"ca0020f4a58292c5de0571b0\",\n  \"ca0020f4a582f7f7f792c5de0571b0\",\n  \"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\n  \"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\n  \"b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac\",\n  \"b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac\",\n  \"67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061\",\n  \"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"ef8a62ffffff999999\",\n  \"ca0020f4a582bababa404040\",\n  \"ca0020f4a582ffffffbababa404040\",\n  \"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n  \"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\n  \"b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d\",\n  \"b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d\",\n  \"67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a\",\n  \"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"fc8d59ffffbf91bfdb\",\n  \"d7191cfdae61abd9e92c7bb6\",\n  \"d7191cfdae61ffffbfabd9e92c7bb6\",\n  \"d73027fc8d59fee090e0f3f891bfdb4575b4\",\n  \"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\n  \"d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4\",\n  \"d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4\",\n  \"a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695\",\n  \"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"fc8d59ffffbf91cf60\",\n  \"d7191cfdae61a6d96a1a9641\",\n  \"d7191cfdae61ffffbfa6d96a1a9641\",\n  \"d73027fc8d59fee08bd9ef8b91cf601a9850\",\n  \"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\n  \"d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850\",\n  \"d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850\",\n  \"a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837\",\n  \"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"fc8d59ffffbf99d594\",\n  \"d7191cfdae61abdda42b83ba\",\n  \"d7191cfdae61ffffbfabdda42b83ba\",\n  \"d53e4ffc8d59fee08be6f59899d5943288bd\",\n  \"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\n  \"d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd\",\n  \"d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd\",\n  \"9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2\",\n  \"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"e5f5f999d8c92ca25f\",\n  \"edf8fbb2e2e266c2a4238b45\",\n  \"edf8fbb2e2e266c2a42ca25f006d2c\",\n  \"edf8fbccece699d8c966c2a42ca25f006d2c\",\n  \"edf8fbccece699d8c966c2a441ae76238b45005824\",\n  \"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824\",\n  \"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"e0ecf49ebcda8856a7\",\n  \"edf8fbb3cde38c96c688419d\",\n  \"edf8fbb3cde38c96c68856a7810f7c\",\n  \"edf8fbbfd3e69ebcda8c96c68856a7810f7c\",\n  \"edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b\",\n  \"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b\",\n  \"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"e0f3dba8ddb543a2ca\",\n  \"f0f9e8bae4bc7bccc42b8cbe\",\n  \"f0f9e8bae4bc7bccc443a2ca0868ac\",\n  \"f0f9e8ccebc5a8ddb57bccc443a2ca0868ac\",\n  \"f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\n  \"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\n  \"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"fee8c8fdbb84e34a33\",\n  \"fef0d9fdcc8afc8d59d7301f\",\n  \"fef0d9fdcc8afc8d59e34a33b30000\",\n  \"fef0d9fdd49efdbb84fc8d59e34a33b30000\",\n  \"fef0d9fdd49efdbb84fc8d59ef6548d7301f990000\",\n  \"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000\",\n  \"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"ece2f0a6bddb1c9099\",\n  \"f6eff7bdc9e167a9cf02818a\",\n  \"f6eff7bdc9e167a9cf1c9099016c59\",\n  \"f6eff7d0d1e6a6bddb67a9cf1c9099016c59\",\n  \"f6eff7d0d1e6a6bddb67a9cf3690c002818a016450\",\n  \"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450\",\n  \"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"ece7f2a6bddb2b8cbe\",\n  \"f1eef6bdc9e174a9cf0570b0\",\n  \"f1eef6bdc9e174a9cf2b8cbe045a8d\",\n  \"f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d\",\n  \"f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\n  \"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\n  \"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"e7e1efc994c7dd1c77\",\n  \"f1eef6d7b5d8df65b0ce1256\",\n  \"f1eef6d7b5d8df65b0dd1c77980043\",\n  \"f1eef6d4b9dac994c7df65b0dd1c77980043\",\n  \"f1eef6d4b9dac994c7df65b0e7298ace125691003f\",\n  \"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f\",\n  \"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"fde0ddfa9fb5c51b8a\",\n  \"feebe2fbb4b9f768a1ae017e\",\n  \"feebe2fbb4b9f768a1c51b8a7a0177\",\n  \"feebe2fcc5c0fa9fb5f768a1c51b8a7a0177\",\n  \"feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\n  \"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\n  \"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"edf8b17fcdbb2c7fb8\",\n  \"ffffcca1dab441b6c4225ea8\",\n  \"ffffcca1dab441b6c42c7fb8253494\",\n  \"ffffccc7e9b47fcdbb41b6c42c7fb8253494\",\n  \"ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\n  \"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\n  \"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"f7fcb9addd8e31a354\",\n  \"ffffccc2e69978c679238443\",\n  \"ffffccc2e69978c67931a354006837\",\n  \"ffffccd9f0a3addd8e78c67931a354006837\",\n  \"ffffccd9f0a3addd8e78c67941ab5d238443005a32\",\n  \"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32\",\n  \"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"fff7bcfec44fd95f0e\",\n  \"ffffd4fed98efe9929cc4c02\",\n  \"ffffd4fed98efe9929d95f0e993404\",\n  \"ffffd4fee391fec44ffe9929d95f0e993404\",\n  \"ffffd4fee391fec44ffe9929ec7014cc4c028c2d04\",\n  \"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04\",\n  \"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"ffeda0feb24cf03b20\",\n  \"ffffb2fecc5cfd8d3ce31a1c\",\n  \"ffffb2fecc5cfd8d3cf03b20bd0026\",\n  \"ffffb2fed976feb24cfd8d3cf03b20bd0026\",\n  \"ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\n  \"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\n  \"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"deebf79ecae13182bd\",\n  \"eff3ffbdd7e76baed62171b5\",\n  \"eff3ffbdd7e76baed63182bd08519c\",\n  \"eff3ffc6dbef9ecae16baed63182bd08519c\",\n  \"eff3ffc6dbef9ecae16baed64292c62171b5084594\",\n  \"f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594\",\n  \"f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"e5f5e0a1d99b31a354\",\n  \"edf8e9bae4b374c476238b45\",\n  \"edf8e9bae4b374c47631a354006d2c\",\n  \"edf8e9c7e9c0a1d99b74c47631a354006d2c\",\n  \"edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32\",\n  \"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32\",\n  \"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"f0f0f0bdbdbd636363\",\n  \"f7f7f7cccccc969696525252\",\n  \"f7f7f7cccccc969696636363252525\",\n  \"f7f7f7d9d9d9bdbdbd969696636363252525\",\n  \"f7f7f7d9d9d9bdbdbd969696737373525252252525\",\n  \"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525\",\n  \"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"efedf5bcbddc756bb1\",\n  \"f2f0f7cbc9e29e9ac86a51a3\",\n  \"f2f0f7cbc9e29e9ac8756bb154278f\",\n  \"f2f0f7dadaebbcbddc9e9ac8756bb154278f\",\n  \"f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486\",\n  \"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486\",\n  \"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"fee0d2fc9272de2d26\",\n  \"fee5d9fcae91fb6a4acb181d\",\n  \"fee5d9fcae91fb6a4ade2d26a50f15\",\n  \"fee5d9fcbba1fc9272fb6a4ade2d26a50f15\",\n  \"fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\n  \"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\n  \"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"fee6cefdae6be6550d\",\n  \"feeddefdbe85fd8d3cd94701\",\n  \"feeddefdbe85fd8d3ce6550da63603\",\n  \"feeddefdd0a2fdae6bfd8d3ce6550da63603\",\n  \"feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\n  \"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\n  \"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704\"\n).map(colors);\n\nexport default ramp(scheme);\n","import {cubehelix} from \"d3-color\";\nimport {interpolateCubehelixLong} from \"d3-interpolate\";\n\nexport default interpolateCubehelixLong(cubehelix(300, 0.5, 0.0), cubehelix(-240, 0.5, 1.0));\n","import {cubehelix} from \"d3-color\";\nimport {interpolateCubehelixLong} from \"d3-interpolate\";\n\nexport var warm = interpolateCubehelixLong(cubehelix(-100, 0.75, 0.35), cubehelix(80, 1.50, 0.8));\n\nexport var cool = interpolateCubehelixLong(cubehelix(260, 0.75, 0.35), cubehelix(80, 1.50, 0.8));\n\nvar c = cubehelix();\n\nexport default function(t) {\n  if (t < 0 || t > 1) t -= Math.floor(t);\n  var ts = Math.abs(t - 0.5);\n  c.h = 360 * t - 100;\n  c.s = 1.5 - 1.5 * ts;\n  c.l = 0.8 - 0.9 * ts;\n  return c + \"\";\n}\n","import {rgb} from \"d3-color\";\n\nvar c = rgb(),\n    pi_1_3 = Math.PI / 3,\n    pi_2_3 = Math.PI * 2 / 3;\n\nexport default function(t) {\n  var x;\n  t = (0.5 - t) * Math.PI;\n  c.r = 255 * (x = Math.sin(t)) * x;\n  c.g = 255 * (x = Math.sin(t + pi_1_3)) * x;\n  c.b = 255 * (x = Math.sin(t + pi_2_3)) * x;\n  return c + \"\";\n}\n","import colors from \"../colors\";\n\nfunction ramp(range) {\n  var n = range.length;\n  return function(t) {\n    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];\n  };\n}\n\nexport default ramp(colors(\"44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725\"));\n\nexport var magma = ramp(colors(\"00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf\"));\n\nexport var inferno = ramp(colors(\"00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4\"));\n\nexport var plasma = ramp(colors(\"0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921\"));\n","export default function(x) {\n  return function constant() {\n    return x;\n  };\n}\n","export var abs = Math.abs;\nexport var atan2 = Math.atan2;\nexport var cos = Math.cos;\nexport var max = Math.max;\nexport var min = Math.min;\nexport var sin = Math.sin;\nexport var sqrt = Math.sqrt;\n\nexport var epsilon = 1e-12;\nexport var pi = Math.PI;\nexport var halfPi = pi / 2;\nexport var tau = 2 * pi;\n\nexport function acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\n\nexport function asin(x) {\n  return x >= 1 ? halfPi : x <= -1 ? -halfPi : Math.asin(x);\n}\n","import {path} from \"d3-path\";\nimport constant from \"./constant\";\nimport {abs, acos, asin, atan2, cos, epsilon, halfPi, max, min, pi, sin, sqrt, tau} from \"./math\";\n\nfunction arcInnerRadius(d) {\n  return d.innerRadius;\n}\n\nfunction arcOuterRadius(d) {\n  return d.outerRadius;\n}\n\nfunction arcStartAngle(d) {\n  return d.startAngle;\n}\n\nfunction arcEndAngle(d) {\n  return d.endAngle;\n}\n\nfunction arcPadAngle(d) {\n  return d && d.padAngle; // Note: optional!\n}\n\nfunction intersect(x0, y0, x1, y1, x2, y2, x3, y3) {\n  var x10 = x1 - x0, y10 = y1 - y0,\n      x32 = x3 - x2, y32 = y3 - y2,\n      t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / (y32 * x10 - x32 * y10);\n  return [x0 + t * x10, y0 + t * y10];\n}\n\n// Compute perpendicular offset line of length rc.\n// http://mathworld.wolfram.com/Circle-LineIntersection.html\nfunction cornerTangents(x0, y0, x1, y1, r1, rc, cw) {\n  var x01 = x0 - x1,\n      y01 = y0 - y1,\n      lo = (cw ? rc : -rc) / sqrt(x01 * x01 + y01 * y01),\n      ox = lo * y01,\n      oy = -lo * x01,\n      x11 = x0 + ox,\n      y11 = y0 + oy,\n      x10 = x1 + ox,\n      y10 = y1 + oy,\n      x00 = (x11 + x10) / 2,\n      y00 = (y11 + y10) / 2,\n      dx = x10 - x11,\n      dy = y10 - y11,\n      d2 = dx * dx + dy * dy,\n      r = r1 - rc,\n      D = x11 * y10 - x10 * y11,\n      d = (dy < 0 ? -1 : 1) * sqrt(max(0, r * r * d2 - D * D)),\n      cx0 = (D * dy - dx * d) / d2,\n      cy0 = (-D * dx - dy * d) / d2,\n      cx1 = (D * dy + dx * d) / d2,\n      cy1 = (-D * dx + dy * d) / d2,\n      dx0 = cx0 - x00,\n      dy0 = cy0 - y00,\n      dx1 = cx1 - x00,\n      dy1 = cy1 - y00;\n\n  // Pick the closer of the two intersection points.\n  // TODO Is there a faster way to determine which intersection to use?\n  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;\n\n  return {\n    cx: cx0,\n    cy: cy0,\n    x01: -ox,\n    y01: -oy,\n    x11: cx0 * (r1 / r - 1),\n    y11: cy0 * (r1 / r - 1)\n  };\n}\n\nexport default function() {\n  var innerRadius = arcInnerRadius,\n      outerRadius = arcOuterRadius,\n      cornerRadius = constant(0),\n      padRadius = null,\n      startAngle = arcStartAngle,\n      endAngle = arcEndAngle,\n      padAngle = arcPadAngle,\n      context = null;\n\n  function arc() {\n    var buffer,\n        r,\n        r0 = +innerRadius.apply(this, arguments),\n        r1 = +outerRadius.apply(this, arguments),\n        a0 = startAngle.apply(this, arguments) - halfPi,\n        a1 = endAngle.apply(this, arguments) - halfPi,\n        da = abs(a1 - a0),\n        cw = a1 > a0;\n\n    if (!context) context = buffer = path();\n\n    // Ensure that the outer radius is always larger than the inner radius.\n    if (r1 < r0) r = r1, r1 = r0, r0 = r;\n\n    // Is it a point?\n    if (!(r1 > epsilon)) context.moveTo(0, 0);\n\n    // Or is it a circle or annulus?\n    else if (da > tau - epsilon) {\n      context.moveTo(r1 * cos(a0), r1 * sin(a0));\n      context.arc(0, 0, r1, a0, a1, !cw);\n      if (r0 > epsilon) {\n        context.moveTo(r0 * cos(a1), r0 * sin(a1));\n        context.arc(0, 0, r0, a1, a0, cw);\n      }\n    }\n\n    // Or is it a circular or annular sector?\n    else {\n      var a01 = a0,\n          a11 = a1,\n          a00 = a0,\n          a10 = a1,\n          da0 = da,\n          da1 = da,\n          ap = padAngle.apply(this, arguments) / 2,\n          rp = (ap > epsilon) && (padRadius ? +padRadius.apply(this, arguments) : sqrt(r0 * r0 + r1 * r1)),\n          rc = min(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),\n          rc0 = rc,\n          rc1 = rc,\n          t0,\n          t1;\n\n      // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.\n      if (rp > epsilon) {\n        var p0 = asin(rp / r0 * sin(ap)),\n            p1 = asin(rp / r1 * sin(ap));\n        if ((da0 -= p0 * 2) > epsilon) p0 *= (cw ? 1 : -1), a00 += p0, a10 -= p0;\n        else da0 = 0, a00 = a10 = (a0 + a1) / 2;\n        if ((da1 -= p1 * 2) > epsilon) p1 *= (cw ? 1 : -1), a01 += p1, a11 -= p1;\n        else da1 = 0, a01 = a11 = (a0 + a1) / 2;\n      }\n\n      var x01 = r1 * cos(a01),\n          y01 = r1 * sin(a01),\n          x10 = r0 * cos(a10),\n          y10 = r0 * sin(a10);\n\n      // Apply rounded corners?\n      if (rc > epsilon) {\n        var x11 = r1 * cos(a11),\n            y11 = r1 * sin(a11),\n            x00 = r0 * cos(a00),\n            y00 = r0 * sin(a00);\n\n        // Restrict the corner radius according to the sector angle.\n        if (da < pi) {\n          var oc = da0 > epsilon ? intersect(x01, y01, x00, y00, x11, y11, x10, y10) : [x10, y10],\n              ax = x01 - oc[0],\n              ay = y01 - oc[1],\n              bx = x11 - oc[0],\n              by = y11 - oc[1],\n              kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt(ax * ax + ay * ay) * sqrt(bx * bx + by * by))) / 2),\n              lc = sqrt(oc[0] * oc[0] + oc[1] * oc[1]);\n          rc0 = min(rc, (r0 - lc) / (kc - 1));\n          rc1 = min(rc, (r1 - lc) / (kc + 1));\n        }\n      }\n\n      // Is the sector collapsed to a line?\n      if (!(da1 > epsilon)) context.moveTo(x01, y01);\n\n      // Does the sector’s outer ring have rounded corners?\n      else if (rc1 > epsilon) {\n        t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);\n        t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);\n\n        context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);\n\n        // Have the corners merged?\n        if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);\n\n        // Otherwise, draw the two corners and the ring.\n        else {\n          context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);\n          context.arc(0, 0, r1, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);\n          context.arc(t1.cx, t1.cy, rc1, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);\n        }\n      }\n\n      // Or is the outer ring just a circular arc?\n      else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);\n\n      // Is there no inner ring, and it’s a circular sector?\n      // Or perhaps it’s an annular sector collapsed due to padding?\n      if (!(r0 > epsilon) || !(da0 > epsilon)) context.lineTo(x10, y10);\n\n      // Does the sector’s inner ring (or point) have rounded corners?\n      else if (rc0 > epsilon) {\n        t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);\n        t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);\n\n        context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);\n\n        // Have the corners merged?\n        if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);\n\n        // Otherwise, draw the two corners and the ring.\n        else {\n          context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);\n          context.arc(0, 0, r0, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);\n          context.arc(t1.cx, t1.cy, rc0, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);\n        }\n      }\n\n      // Or is the inner ring just a circular arc?\n      else context.arc(0, 0, r0, a10, a00, cw);\n    }\n\n    context.closePath();\n\n    if (buffer) return context = null, buffer + \"\" || null;\n  }\n\n  arc.centroid = function() {\n    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,\n        a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi / 2;\n    return [cos(a) * r, sin(a) * r];\n  };\n\n  arc.innerRadius = function(_) {\n    return arguments.length ? (innerRadius = typeof _ === \"function\" ? _ : constant(+_), arc) : innerRadius;\n  };\n\n  arc.outerRadius = function(_) {\n    return arguments.length ? (outerRadius = typeof _ === \"function\" ? _ : constant(+_), arc) : outerRadius;\n  };\n\n  arc.cornerRadius = function(_) {\n    return arguments.length ? (cornerRadius = typeof _ === \"function\" ? _ : constant(+_), arc) : cornerRadius;\n  };\n\n  arc.padRadius = function(_) {\n    return arguments.length ? (padRadius = _ == null ? null : typeof _ === \"function\" ? _ : constant(+_), arc) : padRadius;\n  };\n\n  arc.startAngle = function(_) {\n    return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant(+_), arc) : startAngle;\n  };\n\n  arc.endAngle = function(_) {\n    return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant(+_), arc) : endAngle;\n  };\n\n  arc.padAngle = function(_) {\n    return arguments.length ? (padAngle = typeof _ === \"function\" ? _ : constant(+_), arc) : padAngle;\n  };\n\n  arc.context = function(_) {\n    return arguments.length ? ((context = _ == null ? null : _), arc) : context;\n  };\n\n  return arc;\n}\n","function Linear(context) {\n  this._context = context;\n}\n\nLinear.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n    switch (this._point) {\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n      case 1: this._point = 2; // proceed\n      default: this._context.lineTo(x, y); break;\n    }\n  }\n};\n\nexport default function(context) {\n  return new Linear(context);\n}\n","export function x(p) {\n  return p[0];\n}\n\nexport function y(p) {\n  return p[1];\n}\n","import {path} from \"d3-path\";\nimport constant from \"./constant\";\nimport curveLinear from \"./curve/linear\";\nimport {x as pointX, y as pointY} from \"./point\";\n\nexport default function() {\n  var x = pointX,\n      y = pointY,\n      defined = constant(true),\n      context = null,\n      curve = curveLinear,\n      output = null;\n\n  function line(data) {\n    var i,\n        n = data.length,\n        d,\n        defined0 = false,\n        buffer;\n\n    if (context == null) output = curve(buffer = path());\n\n    for (i = 0; i <= n; ++i) {\n      if (!(i < n && defined(d = data[i], i, data)) === defined0) {\n        if (defined0 = !defined0) output.lineStart();\n        else output.lineEnd();\n      }\n      if (defined0) output.point(+x(d, i, data), +y(d, i, data));\n    }\n\n    if (buffer) return output = null, buffer + \"\" || null;\n  }\n\n  line.x = function(_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), line) : x;\n  };\n\n  line.y = function(_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), line) : y;\n  };\n\n  line.defined = function(_) {\n    return arguments.length ? (defined = typeof _ === \"function\" ? _ : constant(!!_), line) : defined;\n  };\n\n  line.curve = function(_) {\n    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;\n  };\n\n  line.context = function(_) {\n    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;\n  };\n\n  return line;\n}\n","import {path} from \"d3-path\";\nimport constant from \"./constant\";\nimport curveLinear from \"./curve/linear\";\nimport line from \"./line\";\nimport {x as pointX, y as pointY} from \"./point\";\n\nexport default function() {\n  var x0 = pointX,\n      x1 = null,\n      y0 = constant(0),\n      y1 = pointY,\n      defined = constant(true),\n      context = null,\n      curve = curveLinear,\n      output = null;\n\n  function area(data) {\n    var i,\n        j,\n        k,\n        n = data.length,\n        d,\n        defined0 = false,\n        buffer,\n        x0z = new Array(n),\n        y0z = new Array(n);\n\n    if (context == null) output = curve(buffer = path());\n\n    for (i = 0; i <= n; ++i) {\n      if (!(i < n && defined(d = data[i], i, data)) === defined0) {\n        if (defined0 = !defined0) {\n          j = i;\n          output.areaStart();\n          output.lineStart();\n        } else {\n          output.lineEnd();\n          output.lineStart();\n          for (k = i - 1; k >= j; --k) {\n            output.point(x0z[k], y0z[k]);\n          }\n          output.lineEnd();\n          output.areaEnd();\n        }\n      }\n      if (defined0) {\n        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);\n        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);\n      }\n    }\n\n    if (buffer) return output = null, buffer + \"\" || null;\n  }\n\n  function arealine() {\n    return line().defined(defined).curve(curve).context(context);\n  }\n\n  area.x = function(_) {\n    return arguments.length ? (x0 = typeof _ === \"function\" ? _ : constant(+_), x1 = null, area) : x0;\n  };\n\n  area.x0 = function(_) {\n    return arguments.length ? (x0 = typeof _ === \"function\" ? _ : constant(+_), area) : x0;\n  };\n\n  area.x1 = function(_) {\n    return arguments.length ? (x1 = _ == null ? null : typeof _ === \"function\" ? _ : constant(+_), area) : x1;\n  };\n\n  area.y = function(_) {\n    return arguments.length ? (y0 = typeof _ === \"function\" ? _ : constant(+_), y1 = null, area) : y0;\n  };\n\n  area.y0 = function(_) {\n    return arguments.length ? (y0 = typeof _ === \"function\" ? _ : constant(+_), area) : y0;\n  };\n\n  area.y1 = function(_) {\n    return arguments.length ? (y1 = _ == null ? null : typeof _ === \"function\" ? _ : constant(+_), area) : y1;\n  };\n\n  area.lineX0 =\n  area.lineY0 = function() {\n    return arealine().x(x0).y(y0);\n  };\n\n  area.lineY1 = function() {\n    return arealine().x(x0).y(y1);\n  };\n\n  area.lineX1 = function() {\n    return arealine().x(x1).y(y0);\n  };\n\n  area.defined = function(_) {\n    return arguments.length ? (defined = typeof _ === \"function\" ? _ : constant(!!_), area) : defined;\n  };\n\n  area.curve = function(_) {\n    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;\n  };\n\n  area.context = function(_) {\n    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;\n  };\n\n  return area;\n}\n","export default function(a, b) {\n  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n}\n","export default function(d) {\n  return d;\n}\n","import constant from \"./constant\";\nimport descending from \"./descending\";\nimport identity from \"./identity\";\nimport {tau} from \"./math\";\n\nexport default function() {\n  var value = identity,\n      sortValues = descending,\n      sort = null,\n      startAngle = constant(0),\n      endAngle = constant(tau),\n      padAngle = constant(0);\n\n  function pie(data) {\n    var i,\n        n = data.length,\n        j,\n        k,\n        sum = 0,\n        index = new Array(n),\n        arcs = new Array(n),\n        a0 = +startAngle.apply(this, arguments),\n        da = Math.min(tau, Math.max(-tau, endAngle.apply(this, arguments) - a0)),\n        a1,\n        p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),\n        pa = p * (da < 0 ? -1 : 1),\n        v;\n\n    for (i = 0; i < n; ++i) {\n      if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {\n        sum += v;\n      }\n    }\n\n    // Optionally sort the arcs by previously-computed values or by data.\n    if (sortValues != null) index.sort(function(i, j) { return sortValues(arcs[i], arcs[j]); });\n    else if (sort != null) index.sort(function(i, j) { return sort(data[i], data[j]); });\n\n    // Compute the arcs! They are stored in the original data's order.\n    for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {\n      j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {\n        data: data[j],\n        index: i,\n        value: v,\n        startAngle: a0,\n        endAngle: a1,\n        padAngle: p\n      };\n    }\n\n    return arcs;\n  }\n\n  pie.value = function(_) {\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(+_), pie) : value;\n  };\n\n  pie.sortValues = function(_) {\n    return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;\n  };\n\n  pie.sort = function(_) {\n    return arguments.length ? (sort = _, sortValues = null, pie) : sort;\n  };\n\n  pie.startAngle = function(_) {\n    return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant(+_), pie) : startAngle;\n  };\n\n  pie.endAngle = function(_) {\n    return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant(+_), pie) : endAngle;\n  };\n\n  pie.padAngle = function(_) {\n    return arguments.length ? (padAngle = typeof _ === \"function\" ? _ : constant(+_), pie) : padAngle;\n  };\n\n  return pie;\n}\n","import curveLinear from \"./linear\";\n\nexport var curveRadialLinear = curveRadial(curveLinear);\n\nfunction Radial(curve) {\n  this._curve = curve;\n}\n\nRadial.prototype = {\n  areaStart: function() {\n    this._curve.areaStart();\n  },\n  areaEnd: function() {\n    this._curve.areaEnd();\n  },\n  lineStart: function() {\n    this._curve.lineStart();\n  },\n  lineEnd: function() {\n    this._curve.lineEnd();\n  },\n  point: function(a, r) {\n    this._curve.point(r * Math.sin(a), r * -Math.cos(a));\n  }\n};\n\nexport default function curveRadial(curve) {\n\n  function radial(context) {\n    return new Radial(curve(context));\n  }\n\n  radial._curve = curve;\n\n  return radial;\n}\n","import curveRadial, {curveRadialLinear} from \"./curve/radial\";\nimport line from \"./line\";\n\nexport function lineRadial(l) {\n  var c = l.curve;\n\n  l.angle = l.x, delete l.x;\n  l.radius = l.y, delete l.y;\n\n  l.curve = function(_) {\n    return arguments.length ? c(curveRadial(_)) : c()._curve;\n  };\n\n  return l;\n}\n\nexport default function() {\n  return lineRadial(line().curve(curveRadialLinear));\n}\n","import curveRadial, {curveRadialLinear} from \"./curve/radial\";\nimport area from \"./area\";\nimport {lineRadial} from \"./lineRadial\"\n\nexport default function() {\n  var a = area().curve(curveRadialLinear),\n      c = a.curve,\n      x0 = a.lineX0,\n      x1 = a.lineX1,\n      y0 = a.lineY0,\n      y1 = a.lineY1;\n\n  a.angle = a.x, delete a.x;\n  a.startAngle = a.x0, delete a.x0;\n  a.endAngle = a.x1, delete a.x1;\n  a.radius = a.y, delete a.y;\n  a.innerRadius = a.y0, delete a.y0;\n  a.outerRadius = a.y1, delete a.y1;\n  a.lineStartAngle = function() { return lineRadial(x0()); }, delete a.lineX0;\n  a.lineEndAngle = function() { return lineRadial(x1()); }, delete a.lineX1;\n  a.lineInnerRadius = function() { return lineRadial(y0()); }, delete a.lineY0;\n  a.lineOuterRadius = function() { return lineRadial(y1()); }, delete a.lineY1;\n\n  a.curve = function(_) {\n    return arguments.length ? c(curveRadial(_)) : c()._curve;\n  };\n\n  return a;\n}\n","export default function(x, y) {\n  return [(y = +y) * Math.cos(x -= Math.PI / 2), y * Math.sin(x)];\n}\n","export var slice = Array.prototype.slice;\n","import {path} from \"d3-path\";\nimport {slice} from \"../array\";\nimport constant from \"../constant\";\nimport {x as pointX, y as pointY} from \"../point\";\nimport pointRadial from \"../pointRadial\";\n\nfunction linkSource(d) {\n  return d.source;\n}\n\nfunction linkTarget(d) {\n  return d.target;\n}\n\nfunction link(curve) {\n  var source = linkSource,\n      target = linkTarget,\n      x = pointX,\n      y = pointY,\n      context = null;\n\n  function link() {\n    var buffer, argv = slice.call(arguments), s = source.apply(this, argv), t = target.apply(this, argv);\n    if (!context) context = buffer = path();\n    curve(context, +x.apply(this, (argv[0] = s, argv)), +y.apply(this, argv), +x.apply(this, (argv[0] = t, argv)), +y.apply(this, argv));\n    if (buffer) return context = null, buffer + \"\" || null;\n  }\n\n  link.source = function(_) {\n    return arguments.length ? (source = _, link) : source;\n  };\n\n  link.target = function(_) {\n    return arguments.length ? (target = _, link) : target;\n  };\n\n  link.x = function(_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), link) : x;\n  };\n\n  link.y = function(_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), link) : y;\n  };\n\n  link.context = function(_) {\n    return arguments.length ? ((context = _ == null ? null : _), link) : context;\n  };\n\n  return link;\n}\n\nfunction curveHorizontal(context, x0, y0, x1, y1) {\n  context.moveTo(x0, y0);\n  context.bezierCurveTo(x0 = (x0 + x1) / 2, y0, x0, y1, x1, y1);\n}\n\nfunction curveVertical(context, x0, y0, x1, y1) {\n  context.moveTo(x0, y0);\n  context.bezierCurveTo(x0, y0 = (y0 + y1) / 2, x1, y0, x1, y1);\n}\n\nfunction curveRadial(context, x0, y0, x1, y1) {\n  var p0 = pointRadial(x0, y0),\n      p1 = pointRadial(x0, y0 = (y0 + y1) / 2),\n      p2 = pointRadial(x1, y0),\n      p3 = pointRadial(x1, y1);\n  context.moveTo(p0[0], p0[1]);\n  context.bezierCurveTo(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]);\n}\n\nexport function linkHorizontal() {\n  return link(curveHorizontal);\n}\n\nexport function linkVertical() {\n  return link(curveVertical);\n}\n\nexport function linkRadial() {\n  var l = link(curveRadial);\n  l.angle = l.x, delete l.x;\n  l.radius = l.y, delete l.y;\n  return l;\n}\n","import {pi, tau} from \"../math\";\n\nexport default {\n  draw: function(context, size) {\n    var r = Math.sqrt(size / pi);\n    context.moveTo(r, 0);\n    context.arc(0, 0, r, 0, tau);\n  }\n};\n","export default {\n  draw: function(context, size) {\n    var r = Math.sqrt(size / 5) / 2;\n    context.moveTo(-3 * r, -r);\n    context.lineTo(-r, -r);\n    context.lineTo(-r, -3 * r);\n    context.lineTo(r, -3 * r);\n    context.lineTo(r, -r);\n    context.lineTo(3 * r, -r);\n    context.lineTo(3 * r, r);\n    context.lineTo(r, r);\n    context.lineTo(r, 3 * r);\n    context.lineTo(-r, 3 * r);\n    context.lineTo(-r, r);\n    context.lineTo(-3 * r, r);\n    context.closePath();\n  }\n};\n","var tan30 = Math.sqrt(1 / 3),\n    tan30_2 = tan30 * 2;\n\nexport default {\n  draw: function(context, size) {\n    var y = Math.sqrt(size / tan30_2),\n        x = y * tan30;\n    context.moveTo(0, -y);\n    context.lineTo(x, 0);\n    context.lineTo(0, y);\n    context.lineTo(-x, 0);\n    context.closePath();\n  }\n};\n","import {pi, tau} from \"../math\";\n\nvar ka = 0.89081309152928522810,\n    kr = Math.sin(pi / 10) / Math.sin(7 * pi / 10),\n    kx = Math.sin(tau / 10) * kr,\n    ky = -Math.cos(tau / 10) * kr;\n\nexport default {\n  draw: function(context, size) {\n    var r = Math.sqrt(size * ka),\n        x = kx * r,\n        y = ky * r;\n    context.moveTo(0, -r);\n    context.lineTo(x, y);\n    for (var i = 1; i < 5; ++i) {\n      var a = tau * i / 5,\n          c = Math.cos(a),\n          s = Math.sin(a);\n      context.lineTo(s * r, -c * r);\n      context.lineTo(c * x - s * y, s * x + c * y);\n    }\n    context.closePath();\n  }\n};\n","export default {\n  draw: function(context, size) {\n    var w = Math.sqrt(size),\n        x = -w / 2;\n    context.rect(x, x, w, w);\n  }\n};\n","var sqrt3 = Math.sqrt(3);\n\nexport default {\n  draw: function(context, size) {\n    var y = -Math.sqrt(size / (sqrt3 * 3));\n    context.moveTo(0, y * 2);\n    context.lineTo(-sqrt3 * y, -y);\n    context.lineTo(sqrt3 * y, -y);\n    context.closePath();\n  }\n};\n","var c = -0.5,\n    s = Math.sqrt(3) / 2,\n    k = 1 / Math.sqrt(12),\n    a = (k / 2 + 1) * 3;\n\nexport default {\n  draw: function(context, size) {\n    var r = Math.sqrt(size / a),\n        x0 = r / 2,\n        y0 = r * k,\n        x1 = x0,\n        y1 = r * k + r,\n        x2 = -x1,\n        y2 = y1;\n    context.moveTo(x0, y0);\n    context.lineTo(x1, y1);\n    context.lineTo(x2, y2);\n    context.lineTo(c * x0 - s * y0, s * x0 + c * y0);\n    context.lineTo(c * x1 - s * y1, s * x1 + c * y1);\n    context.lineTo(c * x2 - s * y2, s * x2 + c * y2);\n    context.lineTo(c * x0 + s * y0, c * y0 - s * x0);\n    context.lineTo(c * x1 + s * y1, c * y1 - s * x1);\n    context.lineTo(c * x2 + s * y2, c * y2 - s * x2);\n    context.closePath();\n  }\n};\n","import {path} from \"d3-path\";\nimport circle from \"./symbol/circle\";\nimport cross from \"./symbol/cross\";\nimport diamond from \"./symbol/diamond\";\nimport star from \"./symbol/star\";\nimport square from \"./symbol/square\";\nimport triangle from \"./symbol/triangle\";\nimport wye from \"./symbol/wye\";\nimport constant from \"./constant\";\n\nexport var symbols = [\n  circle,\n  cross,\n  diamond,\n  square,\n  star,\n  triangle,\n  wye\n];\n\nexport default function() {\n  var type = constant(circle),\n      size = constant(64),\n      context = null;\n\n  function symbol() {\n    var buffer;\n    if (!context) context = buffer = path();\n    type.apply(this, arguments).draw(context, +size.apply(this, arguments));\n    if (buffer) return context = null, buffer + \"\" || null;\n  }\n\n  symbol.type = function(_) {\n    return arguments.length ? (type = typeof _ === \"function\" ? _ : constant(_), symbol) : type;\n  };\n\n  symbol.size = function(_) {\n    return arguments.length ? (size = typeof _ === \"function\" ? _ : constant(+_), symbol) : size;\n  };\n\n  symbol.context = function(_) {\n    return arguments.length ? (context = _ == null ? null : _, symbol) : context;\n  };\n\n  return symbol;\n}\n","export default function() {}\n","export function point(that, x, y) {\n  that._context.bezierCurveTo(\n    (2 * that._x0 + that._x1) / 3,\n    (2 * that._y0 + that._y1) / 3,\n    (that._x0 + 2 * that._x1) / 3,\n    (that._y0 + 2 * that._y1) / 3,\n    (that._x0 + 4 * that._x1 + x) / 6,\n    (that._y0 + 4 * that._y1 + y) / 6\n  );\n}\n\nexport function Basis(context) {\n  this._context = context;\n}\n\nBasis.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x0 = this._x1 =\n    this._y0 = this._y1 = NaN;\n    this._point = 0;\n  },\n  lineEnd: function() {\n    switch (this._point) {\n      case 3: point(this, this._x1, this._y1); // proceed\n      case 2: this._context.lineTo(this._x1, this._y1); break;\n    }\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n    switch (this._point) {\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n      case 1: this._point = 2; break;\n      case 2: this._point = 3; this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6); // proceed\n      default: point(this, x, y); break;\n    }\n    this._x0 = this._x1, this._x1 = x;\n    this._y0 = this._y1, this._y1 = y;\n  }\n};\n\nexport default function(context) {\n  return new Basis(context);\n}\n","import noop from \"../noop\";\nimport {point} from \"./basis\";\n\nfunction BasisClosed(context) {\n  this._context = context;\n}\n\nBasisClosed.prototype = {\n  areaStart: noop,\n  areaEnd: noop,\n  lineStart: function() {\n    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 =\n    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;\n    this._point = 0;\n  },\n  lineEnd: function() {\n    switch (this._point) {\n      case 1: {\n        this._context.moveTo(this._x2, this._y2);\n        this._context.closePath();\n        break;\n      }\n      case 2: {\n        this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);\n        this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);\n        this._context.closePath();\n        break;\n      }\n      case 3: {\n        this.point(this._x2, this._y2);\n        this.point(this._x3, this._y3);\n        this.point(this._x4, this._y4);\n        break;\n      }\n    }\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n    switch (this._point) {\n      case 0: this._point = 1; this._x2 = x, this._y2 = y; break;\n      case 1: this._point = 2; this._x3 = x, this._y3 = y; break;\n      case 2: this._point = 3; this._x4 = x, this._y4 = y; this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6); break;\n      default: point(this, x, y); break;\n    }\n    this._x0 = this._x1, this._x1 = x;\n    this._y0 = this._y1, this._y1 = y;\n  }\n};\n\nexport default function(context) {\n  return new BasisClosed(context);\n}\n","import {point} from \"./basis\";\n\nfunction BasisOpen(context) {\n  this._context = context;\n}\n\nBasisOpen.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x0 = this._x1 =\n    this._y0 = this._y1 = NaN;\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n    switch (this._point) {\n      case 0: this._point = 1; break;\n      case 1: this._point = 2; break;\n      case 2: this._point = 3; var x0 = (this._x0 + 4 * this._x1 + x) / 6, y0 = (this._y0 + 4 * this._y1 + y) / 6; this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0); break;\n      case 3: this._point = 4; // proceed\n      default: point(this, x, y); break;\n    }\n    this._x0 = this._x1, this._x1 = x;\n    this._y0 = this._y1, this._y1 = y;\n  }\n};\n\nexport default function(context) {\n  return new BasisOpen(context);\n}\n","import {Basis} from \"./basis\";\n\nfunction Bundle(context, beta) {\n  this._basis = new Basis(context);\n  this._beta = beta;\n}\n\nBundle.prototype = {\n  lineStart: function() {\n    this._x = [];\n    this._y = [];\n    this._basis.lineStart();\n  },\n  lineEnd: function() {\n    var x = this._x,\n        y = this._y,\n        j = x.length - 1;\n\n    if (j > 0) {\n      var x0 = x[0],\n          y0 = y[0],\n          dx = x[j] - x0,\n          dy = y[j] - y0,\n          i = -1,\n          t;\n\n      while (++i <= j) {\n        t = i / j;\n        this._basis.point(\n          this._beta * x[i] + (1 - this._beta) * (x0 + t * dx),\n          this._beta * y[i] + (1 - this._beta) * (y0 + t * dy)\n        );\n      }\n    }\n\n    this._x = this._y = null;\n    this._basis.lineEnd();\n  },\n  point: function(x, y) {\n    this._x.push(+x);\n    this._y.push(+y);\n  }\n};\n\nexport default (function custom(beta) {\n\n  function bundle(context) {\n    return beta === 1 ? new Basis(context) : new Bundle(context, beta);\n  }\n\n  bundle.beta = function(beta) {\n    return custom(+beta);\n  };\n\n  return bundle;\n})(0.85);\n","export function point(that, x, y) {\n  that._context.bezierCurveTo(\n    that._x1 + that._k * (that._x2 - that._x0),\n    that._y1 + that._k * (that._y2 - that._y0),\n    that._x2 + that._k * (that._x1 - x),\n    that._y2 + that._k * (that._y1 - y),\n    that._x2,\n    that._y2\n  );\n}\n\nexport function Cardinal(context, tension) {\n  this._context = context;\n  this._k = (1 - tension) / 6;\n}\n\nCardinal.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x0 = this._x1 = this._x2 =\n    this._y0 = this._y1 = this._y2 = NaN;\n    this._point = 0;\n  },\n  lineEnd: function() {\n    switch (this._point) {\n      case 2: this._context.lineTo(this._x2, this._y2); break;\n      case 3: point(this, this._x1, this._y1); break;\n    }\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n    switch (this._point) {\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n      case 1: this._point = 2; this._x1 = x, this._y1 = y; break;\n      case 2: this._point = 3; // proceed\n      default: point(this, x, y); break;\n    }\n    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n  }\n};\n\nexport default (function custom(tension) {\n\n  function cardinal(context) {\n    return new Cardinal(context, tension);\n  }\n\n  cardinal.tension = function(tension) {\n    return custom(+tension);\n  };\n\n  return cardinal;\n})(0);\n","import noop from \"../noop\";\nimport {point} from \"./cardinal\";\n\nexport function CardinalClosed(context, tension) {\n  this._context = context;\n  this._k = (1 - tension) / 6;\n}\n\nCardinalClosed.prototype = {\n  areaStart: noop,\n  areaEnd: noop,\n  lineStart: function() {\n    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =\n    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;\n    this._point = 0;\n  },\n  lineEnd: function() {\n    switch (this._point) {\n      case 1: {\n        this._context.moveTo(this._x3, this._y3);\n        this._context.closePath();\n        break;\n      }\n      case 2: {\n        this._context.lineTo(this._x3, this._y3);\n        this._context.closePath();\n        break;\n      }\n      case 3: {\n        this.point(this._x3, this._y3);\n        this.point(this._x4, this._y4);\n        this.point(this._x5, this._y5);\n        break;\n      }\n    }\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n    switch (this._point) {\n      case 0: this._point = 1; this._x3 = x, this._y3 = y; break;\n      case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;\n      case 2: this._point = 3; this._x5 = x, this._y5 = y; break;\n      default: point(this, x, y); break;\n    }\n    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n  }\n};\n\nexport default (function custom(tension) {\n\n  function cardinal(context) {\n    return new CardinalClosed(context, tension);\n  }\n\n  cardinal.tension = function(tension) {\n    return custom(+tension);\n  };\n\n  return cardinal;\n})(0);\n","import {point} from \"./cardinal\";\n\nexport function CardinalOpen(context, tension) {\n  this._context = context;\n  this._k = (1 - tension) / 6;\n}\n\nCardinalOpen.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x0 = this._x1 = this._x2 =\n    this._y0 = this._y1 = this._y2 = NaN;\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n    switch (this._point) {\n      case 0: this._point = 1; break;\n      case 1: this._point = 2; break;\n      case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;\n      case 3: this._point = 4; // proceed\n      default: point(this, x, y); break;\n    }\n    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n  }\n};\n\nexport default (function custom(tension) {\n\n  function cardinal(context) {\n    return new CardinalOpen(context, tension);\n  }\n\n  cardinal.tension = function(tension) {\n    return custom(+tension);\n  };\n\n  return cardinal;\n})(0);\n","import {epsilon} from \"../math\";\nimport {Cardinal} from \"./cardinal\";\n\nexport function point(that, x, y) {\n  var x1 = that._x1,\n      y1 = that._y1,\n      x2 = that._x2,\n      y2 = that._y2;\n\n  if (that._l01_a > epsilon) {\n    var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,\n        n = 3 * that._l01_a * (that._l01_a + that._l12_a);\n    x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;\n    y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;\n  }\n\n  if (that._l23_a > epsilon) {\n    var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,\n        m = 3 * that._l23_a * (that._l23_a + that._l12_a);\n    x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;\n    y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;\n  }\n\n  that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);\n}\n\nfunction CatmullRom(context, alpha) {\n  this._context = context;\n  this._alpha = alpha;\n}\n\nCatmullRom.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x0 = this._x1 = this._x2 =\n    this._y0 = this._y1 = this._y2 = NaN;\n    this._l01_a = this._l12_a = this._l23_a =\n    this._l01_2a = this._l12_2a = this._l23_2a =\n    this._point = 0;\n  },\n  lineEnd: function() {\n    switch (this._point) {\n      case 2: this._context.lineTo(this._x2, this._y2); break;\n      case 3: this.point(this._x2, this._y2); break;\n    }\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n\n    if (this._point) {\n      var x23 = this._x2 - x,\n          y23 = this._y2 - y;\n      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));\n    }\n\n    switch (this._point) {\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n      case 1: this._point = 2; break;\n      case 2: this._point = 3; // proceed\n      default: point(this, x, y); break;\n    }\n\n    this._l01_a = this._l12_a, this._l12_a = this._l23_a;\n    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;\n    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n  }\n};\n\nexport default (function custom(alpha) {\n\n  function catmullRom(context) {\n    return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);\n  }\n\n  catmullRom.alpha = function(alpha) {\n    return custom(+alpha);\n  };\n\n  return catmullRom;\n})(0.5);\n","import {CardinalClosed} from \"./cardinalClosed\";\nimport noop from \"../noop\";\nimport {point} from \"./catmullRom\";\n\nfunction CatmullRomClosed(context, alpha) {\n  this._context = context;\n  this._alpha = alpha;\n}\n\nCatmullRomClosed.prototype = {\n  areaStart: noop,\n  areaEnd: noop,\n  lineStart: function() {\n    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =\n    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;\n    this._l01_a = this._l12_a = this._l23_a =\n    this._l01_2a = this._l12_2a = this._l23_2a =\n    this._point = 0;\n  },\n  lineEnd: function() {\n    switch (this._point) {\n      case 1: {\n        this._context.moveTo(this._x3, this._y3);\n        this._context.closePath();\n        break;\n      }\n      case 2: {\n        this._context.lineTo(this._x3, this._y3);\n        this._context.closePath();\n        break;\n      }\n      case 3: {\n        this.point(this._x3, this._y3);\n        this.point(this._x4, this._y4);\n        this.point(this._x5, this._y5);\n        break;\n      }\n    }\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n\n    if (this._point) {\n      var x23 = this._x2 - x,\n          y23 = this._y2 - y;\n      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));\n    }\n\n    switch (this._point) {\n      case 0: this._point = 1; this._x3 = x, this._y3 = y; break;\n      case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;\n      case 2: this._point = 3; this._x5 = x, this._y5 = y; break;\n      default: point(this, x, y); break;\n    }\n\n    this._l01_a = this._l12_a, this._l12_a = this._l23_a;\n    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;\n    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n  }\n};\n\nexport default (function custom(alpha) {\n\n  function catmullRom(context) {\n    return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);\n  }\n\n  catmullRom.alpha = function(alpha) {\n    return custom(+alpha);\n  };\n\n  return catmullRom;\n})(0.5);\n","import {CardinalOpen} from \"./cardinalOpen\";\nimport {point} from \"./catmullRom\";\n\nfunction CatmullRomOpen(context, alpha) {\n  this._context = context;\n  this._alpha = alpha;\n}\n\nCatmullRomOpen.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x0 = this._x1 = this._x2 =\n    this._y0 = this._y1 = this._y2 = NaN;\n    this._l01_a = this._l12_a = this._l23_a =\n    this._l01_2a = this._l12_2a = this._l23_2a =\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n\n    if (this._point) {\n      var x23 = this._x2 - x,\n          y23 = this._y2 - y;\n      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));\n    }\n\n    switch (this._point) {\n      case 0: this._point = 1; break;\n      case 1: this._point = 2; break;\n      case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;\n      case 3: this._point = 4; // proceed\n      default: point(this, x, y); break;\n    }\n\n    this._l01_a = this._l12_a, this._l12_a = this._l23_a;\n    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;\n    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n  }\n};\n\nexport default (function custom(alpha) {\n\n  function catmullRom(context) {\n    return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);\n  }\n\n  catmullRom.alpha = function(alpha) {\n    return custom(+alpha);\n  };\n\n  return catmullRom;\n})(0.5);\n","import noop from \"../noop\";\n\nfunction LinearClosed(context) {\n  this._context = context;\n}\n\nLinearClosed.prototype = {\n  areaStart: noop,\n  areaEnd: noop,\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._point) this._context.closePath();\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n    if (this._point) this._context.lineTo(x, y);\n    else this._point = 1, this._context.moveTo(x, y);\n  }\n};\n\nexport default function(context) {\n  return new LinearClosed(context);\n}\n","function sign(x) {\n  return x < 0 ? -1 : 1;\n}\n\n// Calculate the slopes of the tangents (Hermite-type interpolation) based on\n// the following paper: Steffen, M. 1990. A Simple Method for Monotonic\n// Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.\n// NOV(II), P. 443, 1990.\nfunction slope3(that, x2, y2) {\n  var h0 = that._x1 - that._x0,\n      h1 = x2 - that._x1,\n      s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),\n      s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),\n      p = (s0 * h1 + s1 * h0) / (h0 + h1);\n  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;\n}\n\n// Calculate a one-sided slope.\nfunction slope2(that, t) {\n  var h = that._x1 - that._x0;\n  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;\n}\n\n// According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations\n// \"you can express cubic Hermite interpolation in terms of cubic Bézier curves\n// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1\".\nfunction point(that, t0, t1) {\n  var x0 = that._x0,\n      y0 = that._y0,\n      x1 = that._x1,\n      y1 = that._y1,\n      dx = (x1 - x0) / 3;\n  that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);\n}\n\nfunction MonotoneX(context) {\n  this._context = context;\n}\n\nMonotoneX.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x0 = this._x1 =\n    this._y0 = this._y1 =\n    this._t0 = NaN;\n    this._point = 0;\n  },\n  lineEnd: function() {\n    switch (this._point) {\n      case 2: this._context.lineTo(this._x1, this._y1); break;\n      case 3: point(this, this._t0, slope2(this, this._t0)); break;\n    }\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    var t1 = NaN;\n\n    x = +x, y = +y;\n    if (x === this._x1 && y === this._y1) return; // Ignore coincident points.\n    switch (this._point) {\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n      case 1: this._point = 2; break;\n      case 2: this._point = 3; point(this, slope2(this, t1 = slope3(this, x, y)), t1); break;\n      default: point(this, this._t0, t1 = slope3(this, x, y)); break;\n    }\n\n    this._x0 = this._x1, this._x1 = x;\n    this._y0 = this._y1, this._y1 = y;\n    this._t0 = t1;\n  }\n}\n\nfunction MonotoneY(context) {\n  this._context = new ReflectContext(context);\n}\n\n(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x, y) {\n  MonotoneX.prototype.point.call(this, y, x);\n};\n\nfunction ReflectContext(context) {\n  this._context = context;\n}\n\nReflectContext.prototype = {\n  moveTo: function(x, y) { this._context.moveTo(y, x); },\n  closePath: function() { this._context.closePath(); },\n  lineTo: function(x, y) { this._context.lineTo(y, x); },\n  bezierCurveTo: function(x1, y1, x2, y2, x, y) { this._context.bezierCurveTo(y1, x1, y2, x2, y, x); }\n};\n\nexport function monotoneX(context) {\n  return new MonotoneX(context);\n}\n\nexport function monotoneY(context) {\n  return new MonotoneY(context);\n}\n","function Natural(context) {\n  this._context = context;\n}\n\nNatural.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x = [];\n    this._y = [];\n  },\n  lineEnd: function() {\n    var x = this._x,\n        y = this._y,\n        n = x.length;\n\n    if (n) {\n      this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);\n      if (n === 2) {\n        this._context.lineTo(x[1], y[1]);\n      } else {\n        var px = controlPoints(x),\n            py = controlPoints(y);\n        for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {\n          this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);\n        }\n      }\n    }\n\n    if (this._line || (this._line !== 0 && n === 1)) this._context.closePath();\n    this._line = 1 - this._line;\n    this._x = this._y = null;\n  },\n  point: function(x, y) {\n    this._x.push(+x);\n    this._y.push(+y);\n  }\n};\n\n// See https://www.particleincell.com/2012/bezier-splines/ for derivation.\nfunction controlPoints(x) {\n  var i,\n      n = x.length - 1,\n      m,\n      a = new Array(n),\n      b = new Array(n),\n      r = new Array(n);\n  a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];\n  for (i = 1; i < n - 1; ++i) a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];\n  a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];\n  for (i = 1; i < n; ++i) m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];\n  a[n - 1] = r[n - 1] / b[n - 1];\n  for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i];\n  b[n - 1] = (x[n] + a[n - 1]) / 2;\n  for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1];\n  return [a, b];\n}\n\nexport default function(context) {\n  return new Natural(context);\n}\n","function Step(context, t) {\n  this._context = context;\n  this._t = t;\n}\n\nStep.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x = this._y = NaN;\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n    if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n    switch (this._point) {\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n      case 1: this._point = 2; // proceed\n      default: {\n        if (this._t <= 0) {\n          this._context.lineTo(this._x, y);\n          this._context.lineTo(x, y);\n        } else {\n          var x1 = this._x * (1 - this._t) + x * this._t;\n          this._context.lineTo(x1, this._y);\n          this._context.lineTo(x1, y);\n        }\n        break;\n      }\n    }\n    this._x = x, this._y = y;\n  }\n};\n\nexport default function(context) {\n  return new Step(context, 0.5);\n}\n\nexport function stepBefore(context) {\n  return new Step(context, 0);\n}\n\nexport function stepAfter(context) {\n  return new Step(context, 1);\n}\n","export default function(series, order) {\n  if (!((n = series.length) > 1)) return;\n  for (var i = 1, j, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {\n    s0 = s1, s1 = series[order[i]];\n    for (j = 0; j < m; ++j) {\n      s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];\n    }\n  }\n}\n","export default function(series) {\n  var n = series.length, o = new Array(n);\n  while (--n >= 0) o[n] = n;\n  return o;\n}\n","import {slice} from \"./array\";\nimport constant from \"./constant\";\nimport offsetNone from \"./offset/none\";\nimport orderNone from \"./order/none\";\n\nfunction stackValue(d, key) {\n  return d[key];\n}\n\nexport default function() {\n  var keys = constant([]),\n      order = orderNone,\n      offset = offsetNone,\n      value = stackValue;\n\n  function stack(data) {\n    var kz = keys.apply(this, arguments),\n        i,\n        m = data.length,\n        n = kz.length,\n        sz = new Array(n),\n        oz;\n\n    for (i = 0; i < n; ++i) {\n      for (var ki = kz[i], si = sz[i] = new Array(m), j = 0, sij; j < m; ++j) {\n        si[j] = sij = [0, +value(data[j], ki, j, data)];\n        sij.data = data[j];\n      }\n      si.key = ki;\n    }\n\n    for (i = 0, oz = order(sz); i < n; ++i) {\n      sz[oz[i]].index = i;\n    }\n\n    offset(sz, oz);\n    return sz;\n  }\n\n  stack.keys = function(_) {\n    return arguments.length ? (keys = typeof _ === \"function\" ? _ : constant(slice.call(_)), stack) : keys;\n  };\n\n  stack.value = function(_) {\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(+_), stack) : value;\n  };\n\n  stack.order = function(_) {\n    return arguments.length ? (order = _ == null ? orderNone : typeof _ === \"function\" ? _ : constant(slice.call(_)), stack) : order;\n  };\n\n  stack.offset = function(_) {\n    return arguments.length ? (offset = _ == null ? offsetNone : _, stack) : offset;\n  };\n\n  return stack;\n}\n","import none from \"./none\";\n\nexport default function(series, order) {\n  if (!((n = series.length) > 0)) return;\n  for (var i, n, j = 0, m = series[0].length, y; j < m; ++j) {\n    for (y = i = 0; i < n; ++i) y += series[i][j][1] || 0;\n    if (y) for (i = 0; i < n; ++i) series[i][j][1] /= y;\n  }\n  none(series, order);\n}\n","export default function(series, order) {\n  if (!((n = series.length) > 1)) return;\n  for (var i, j = 0, d, dy, yp, yn, n, m = series[order[0]].length; j < m; ++j) {\n    for (yp = yn = 0, i = 0; i < n; ++i) {\n      if ((dy = (d = series[order[i]][j])[1] - d[0]) >= 0) {\n        d[0] = yp, d[1] = yp += dy;\n      } else if (dy < 0) {\n        d[1] = yn, d[0] = yn += dy;\n      } else {\n        d[0] = yp;\n      }\n    }\n  }\n}\n","import none from \"./none\";\n\nexport default function(series, order) {\n  if (!((n = series.length) > 0)) return;\n  for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {\n    for (var i = 0, y = 0; i < n; ++i) y += series[i][j][1] || 0;\n    s0[j][1] += s0[j][0] = -y / 2;\n  }\n  none(series, order);\n}\n","import none from \"./none\";\n\nexport default function(series, order) {\n  if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return;\n  for (var y = 0, j = 1, s0, m, n; j < m; ++j) {\n    for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {\n      var si = series[order[i]],\n          sij0 = si[j][1] || 0,\n          sij1 = si[j - 1][1] || 0,\n          s3 = (sij0 - sij1) / 2;\n      for (var k = 0; k < i; ++k) {\n        var sk = series[order[k]],\n            skj0 = sk[j][1] || 0,\n            skj1 = sk[j - 1][1] || 0;\n        s3 += skj0 - skj1;\n      }\n      s1 += sij0, s2 += s3 * sij0;\n    }\n    s0[j - 1][1] += s0[j - 1][0] = y;\n    if (s1) y -= s2 / s1;\n  }\n  s0[j - 1][1] += s0[j - 1][0] = y;\n  none(series, order);\n}\n","import none from \"./none\";\n\nexport default function(series) {\n  var sums = series.map(sum);\n  return none(series).sort(function(a, b) { return sums[a] - sums[b]; });\n}\n\nexport function sum(series) {\n  var s = 0, i = -1, n = series.length, v;\n  while (++i < n) if (v = +series[i][1]) s += v;\n  return s;\n}\n","import ascending from \"./ascending\";\n\nexport default function(series) {\n  return ascending(series).reverse();\n}\n","import none from \"./none\";\nimport {sum} from \"./ascending\";\n\nexport default function(series) {\n  var n = series.length,\n      i,\n      j,\n      sums = series.map(sum),\n      order = none(series).sort(function(a, b) { return sums[b] - sums[a]; }),\n      top = 0,\n      bottom = 0,\n      tops = [],\n      bottoms = [];\n\n  for (i = 0; i < n; ++i) {\n    j = order[i];\n    if (top < bottom) {\n      top += sums[j];\n      tops.push(j);\n    } else {\n      bottom += sums[j];\n      bottoms.push(j);\n    }\n  }\n\n  return bottoms.reverse().concat(tops);\n}\n","import none from \"./none\";\n\nexport default function(series) {\n  return none(series).reverse();\n}\n","export default function(x) {\n  return function() {\n    return x;\n  };\n}\n","export function x(d) {\n  return d[0];\n}\n\nexport function y(d) {\n  return d[1];\n}\n","function RedBlackTree() {\n  this._ = null; // root node\n}\n\nexport function RedBlackNode(node) {\n  node.U = // parent node\n  node.C = // color - true for red, false for black\n  node.L = // left node\n  node.R = // right node\n  node.P = // previous node\n  node.N = null; // next node\n}\n\nRedBlackTree.prototype = {\n  constructor: RedBlackTree,\n\n  insert: function(after, node) {\n    var parent, grandpa, uncle;\n\n    if (after) {\n      node.P = after;\n      node.N = after.N;\n      if (after.N) after.N.P = node;\n      after.N = node;\n      if (after.R) {\n        after = after.R;\n        while (after.L) after = after.L;\n        after.L = node;\n      } else {\n        after.R = node;\n      }\n      parent = after;\n    } else if (this._) {\n      after = RedBlackFirst(this._);\n      node.P = null;\n      node.N = after;\n      after.P = after.L = node;\n      parent = after;\n    } else {\n      node.P = node.N = null;\n      this._ = node;\n      parent = null;\n    }\n    node.L = node.R = null;\n    node.U = parent;\n    node.C = true;\n\n    after = node;\n    while (parent && parent.C) {\n      grandpa = parent.U;\n      if (parent === grandpa.L) {\n        uncle = grandpa.R;\n        if (uncle && uncle.C) {\n          parent.C = uncle.C = false;\n          grandpa.C = true;\n          after = grandpa;\n        } else {\n          if (after === parent.R) {\n            RedBlackRotateLeft(this, parent);\n            after = parent;\n            parent = after.U;\n          }\n          parent.C = false;\n          grandpa.C = true;\n          RedBlackRotateRight(this, grandpa);\n        }\n      } else {\n        uncle = grandpa.L;\n        if (uncle && uncle.C) {\n          parent.C = uncle.C = false;\n          grandpa.C = true;\n          after = grandpa;\n        } else {\n          if (after === parent.L) {\n            RedBlackRotateRight(this, parent);\n            after = parent;\n            parent = after.U;\n          }\n          parent.C = false;\n          grandpa.C = true;\n          RedBlackRotateLeft(this, grandpa);\n        }\n      }\n      parent = after.U;\n    }\n    this._.C = false;\n  },\n\n  remove: function(node) {\n    if (node.N) node.N.P = node.P;\n    if (node.P) node.P.N = node.N;\n    node.N = node.P = null;\n\n    var parent = node.U,\n        sibling,\n        left = node.L,\n        right = node.R,\n        next,\n        red;\n\n    if (!left) next = right;\n    else if (!right) next = left;\n    else next = RedBlackFirst(right);\n\n    if (parent) {\n      if (parent.L === node) parent.L = next;\n      else parent.R = next;\n    } else {\n      this._ = next;\n    }\n\n    if (left && right) {\n      red = next.C;\n      next.C = node.C;\n      next.L = left;\n      left.U = next;\n      if (next !== right) {\n        parent = next.U;\n        next.U = node.U;\n        node = next.R;\n        parent.L = node;\n        next.R = right;\n        right.U = next;\n      } else {\n        next.U = parent;\n        parent = next;\n        node = next.R;\n      }\n    } else {\n      red = node.C;\n      node = next;\n    }\n\n    if (node) node.U = parent;\n    if (red) return;\n    if (node && node.C) { node.C = false; return; }\n\n    do {\n      if (node === this._) break;\n      if (node === parent.L) {\n        sibling = parent.R;\n        if (sibling.C) {\n          sibling.C = false;\n          parent.C = true;\n          RedBlackRotateLeft(this, parent);\n          sibling = parent.R;\n        }\n        if ((sibling.L && sibling.L.C)\n            || (sibling.R && sibling.R.C)) {\n          if (!sibling.R || !sibling.R.C) {\n            sibling.L.C = false;\n            sibling.C = true;\n            RedBlackRotateRight(this, sibling);\n            sibling = parent.R;\n          }\n          sibling.C = parent.C;\n          parent.C = sibling.R.C = false;\n          RedBlackRotateLeft(this, parent);\n          node = this._;\n          break;\n        }\n      } else {\n        sibling = parent.L;\n        if (sibling.C) {\n          sibling.C = false;\n          parent.C = true;\n          RedBlackRotateRight(this, parent);\n          sibling = parent.L;\n        }\n        if ((sibling.L && sibling.L.C)\n          || (sibling.R && sibling.R.C)) {\n          if (!sibling.L || !sibling.L.C) {\n            sibling.R.C = false;\n            sibling.C = true;\n            RedBlackRotateLeft(this, sibling);\n            sibling = parent.L;\n          }\n          sibling.C = parent.C;\n          parent.C = sibling.L.C = false;\n          RedBlackRotateRight(this, parent);\n          node = this._;\n          break;\n        }\n      }\n      sibling.C = true;\n      node = parent;\n      parent = parent.U;\n    } while (!node.C);\n\n    if (node) node.C = false;\n  }\n};\n\nfunction RedBlackRotateLeft(tree, node) {\n  var p = node,\n      q = node.R,\n      parent = p.U;\n\n  if (parent) {\n    if (parent.L === p) parent.L = q;\n    else parent.R = q;\n  } else {\n    tree._ = q;\n  }\n\n  q.U = parent;\n  p.U = q;\n  p.R = q.L;\n  if (p.R) p.R.U = p;\n  q.L = p;\n}\n\nfunction RedBlackRotateRight(tree, node) {\n  var p = node,\n      q = node.L,\n      parent = p.U;\n\n  if (parent) {\n    if (parent.L === p) parent.L = q;\n    else parent.R = q;\n  } else {\n    tree._ = q;\n  }\n\n  q.U = parent;\n  p.U = q;\n  p.L = q.R;\n  if (p.L) p.L.U = p;\n  q.R = p;\n}\n\nfunction RedBlackFirst(node) {\n  while (node.L) node = node.L;\n  return node;\n}\n\nexport default RedBlackTree;\n","import {cells, edges, epsilon} from \"./Diagram\";\n\nexport function createEdge(left, right, v0, v1) {\n  var edge = [null, null],\n      index = edges.push(edge) - 1;\n  edge.left = left;\n  edge.right = right;\n  if (v0) setEdgeEnd(edge, left, right, v0);\n  if (v1) setEdgeEnd(edge, right, left, v1);\n  cells[left.index].halfedges.push(index);\n  cells[right.index].halfedges.push(index);\n  return edge;\n}\n\nexport function createBorderEdge(left, v0, v1) {\n  var edge = [v0, v1];\n  edge.left = left;\n  return edge;\n}\n\nexport function setEdgeEnd(edge, left, right, vertex) {\n  if (!edge[0] && !edge[1]) {\n    edge[0] = vertex;\n    edge.left = left;\n    edge.right = right;\n  } else if (edge.left === right) {\n    edge[1] = vertex;\n  } else {\n    edge[0] = vertex;\n  }\n}\n\n// Liang–Barsky line clipping.\nfunction clipEdge(edge, x0, y0, x1, y1) {\n  var a = edge[0],\n      b = edge[1],\n      ax = a[0],\n      ay = a[1],\n      bx = b[0],\n      by = b[1],\n      t0 = 0,\n      t1 = 1,\n      dx = bx - ax,\n      dy = by - ay,\n      r;\n\n  r = x0 - ax;\n  if (!dx && r > 0) return;\n  r /= dx;\n  if (dx < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dx > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = x1 - ax;\n  if (!dx && r < 0) return;\n  r /= dx;\n  if (dx < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dx > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  r = y0 - ay;\n  if (!dy && r > 0) return;\n  r /= dy;\n  if (dy < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dy > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = y1 - ay;\n  if (!dy && r < 0) return;\n  r /= dy;\n  if (dy < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dy > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  if (!(t0 > 0) && !(t1 < 1)) return true; // TODO Better check?\n\n  if (t0 > 0) edge[0] = [ax + t0 * dx, ay + t0 * dy];\n  if (t1 < 1) edge[1] = [ax + t1 * dx, ay + t1 * dy];\n  return true;\n}\n\nfunction connectEdge(edge, x0, y0, x1, y1) {\n  var v1 = edge[1];\n  if (v1) return true;\n\n  var v0 = edge[0],\n      left = edge.left,\n      right = edge.right,\n      lx = left[0],\n      ly = left[1],\n      rx = right[0],\n      ry = right[1],\n      fx = (lx + rx) / 2,\n      fy = (ly + ry) / 2,\n      fm,\n      fb;\n\n  if (ry === ly) {\n    if (fx < x0 || fx >= x1) return;\n    if (lx > rx) {\n      if (!v0) v0 = [fx, y0];\n      else if (v0[1] >= y1) return;\n      v1 = [fx, y1];\n    } else {\n      if (!v0) v0 = [fx, y1];\n      else if (v0[1] < y0) return;\n      v1 = [fx, y0];\n    }\n  } else {\n    fm = (lx - rx) / (ry - ly);\n    fb = fy - fm * fx;\n    if (fm < -1 || fm > 1) {\n      if (lx > rx) {\n        if (!v0) v0 = [(y0 - fb) / fm, y0];\n        else if (v0[1] >= y1) return;\n        v1 = [(y1 - fb) / fm, y1];\n      } else {\n        if (!v0) v0 = [(y1 - fb) / fm, y1];\n        else if (v0[1] < y0) return;\n        v1 = [(y0 - fb) / fm, y0];\n      }\n    } else {\n      if (ly < ry) {\n        if (!v0) v0 = [x0, fm * x0 + fb];\n        else if (v0[0] >= x1) return;\n        v1 = [x1, fm * x1 + fb];\n      } else {\n        if (!v0) v0 = [x1, fm * x1 + fb];\n        else if (v0[0] < x0) return;\n        v1 = [x0, fm * x0 + fb];\n      }\n    }\n  }\n\n  edge[0] = v0;\n  edge[1] = v1;\n  return true;\n}\n\nexport function clipEdges(x0, y0, x1, y1) {\n  var i = edges.length,\n      edge;\n\n  while (i--) {\n    if (!connectEdge(edge = edges[i], x0, y0, x1, y1)\n        || !clipEdge(edge, x0, y0, x1, y1)\n        || !(Math.abs(edge[0][0] - edge[1][0]) > epsilon\n            || Math.abs(edge[0][1] - edge[1][1]) > epsilon)) {\n      delete edges[i];\n    }\n  }\n}\n","import {createBorderEdge} from \"./Edge\";\nimport {cells, edges, epsilon} from \"./Diagram\";\n\nexport function createCell(site) {\n  return cells[site.index] = {\n    site: site,\n    halfedges: []\n  };\n}\n\nfunction cellHalfedgeAngle(cell, edge) {\n  var site = cell.site,\n      va = edge.left,\n      vb = edge.right;\n  if (site === vb) vb = va, va = site;\n  if (vb) return Math.atan2(vb[1] - va[1], vb[0] - va[0]);\n  if (site === va) va = edge[1], vb = edge[0];\n  else va = edge[0], vb = edge[1];\n  return Math.atan2(va[0] - vb[0], vb[1] - va[1]);\n}\n\nexport function cellHalfedgeStart(cell, edge) {\n  return edge[+(edge.left !== cell.site)];\n}\n\nexport function cellHalfedgeEnd(cell, edge) {\n  return edge[+(edge.left === cell.site)];\n}\n\nexport function sortCellHalfedges() {\n  for (var i = 0, n = cells.length, cell, halfedges, j, m; i < n; ++i) {\n    if ((cell = cells[i]) && (m = (halfedges = cell.halfedges).length)) {\n      var index = new Array(m),\n          array = new Array(m);\n      for (j = 0; j < m; ++j) index[j] = j, array[j] = cellHalfedgeAngle(cell, edges[halfedges[j]]);\n      index.sort(function(i, j) { return array[j] - array[i]; });\n      for (j = 0; j < m; ++j) array[j] = halfedges[index[j]];\n      for (j = 0; j < m; ++j) halfedges[j] = array[j];\n    }\n  }\n}\n\nexport function clipCells(x0, y0, x1, y1) {\n  var nCells = cells.length,\n      iCell,\n      cell,\n      site,\n      iHalfedge,\n      halfedges,\n      nHalfedges,\n      start,\n      startX,\n      startY,\n      end,\n      endX,\n      endY,\n      cover = true;\n\n  for (iCell = 0; iCell < nCells; ++iCell) {\n    if (cell = cells[iCell]) {\n      site = cell.site;\n      halfedges = cell.halfedges;\n      iHalfedge = halfedges.length;\n\n      // Remove any dangling clipped edges.\n      while (iHalfedge--) {\n        if (!edges[halfedges[iHalfedge]]) {\n          halfedges.splice(iHalfedge, 1);\n        }\n      }\n\n      // Insert any border edges as necessary.\n      iHalfedge = 0, nHalfedges = halfedges.length;\n      while (iHalfedge < nHalfedges) {\n        end = cellHalfedgeEnd(cell, edges[halfedges[iHalfedge]]), endX = end[0], endY = end[1];\n        start = cellHalfedgeStart(cell, edges[halfedges[++iHalfedge % nHalfedges]]), startX = start[0], startY = start[1];\n        if (Math.abs(endX - startX) > epsilon || Math.abs(endY - startY) > epsilon) {\n          halfedges.splice(iHalfedge, 0, edges.push(createBorderEdge(site, end,\n              Math.abs(endX - x0) < epsilon && y1 - endY > epsilon ? [x0, Math.abs(startX - x0) < epsilon ? startY : y1]\n              : Math.abs(endY - y1) < epsilon && x1 - endX > epsilon ? [Math.abs(startY - y1) < epsilon ? startX : x1, y1]\n              : Math.abs(endX - x1) < epsilon && endY - y0 > epsilon ? [x1, Math.abs(startX - x1) < epsilon ? startY : y0]\n              : Math.abs(endY - y0) < epsilon && endX - x0 > epsilon ? [Math.abs(startY - y0) < epsilon ? startX : x0, y0]\n              : null)) - 1);\n          ++nHalfedges;\n        }\n      }\n\n      if (nHalfedges) cover = false;\n    }\n  }\n\n  // If there weren’t any edges, have the closest site cover the extent.\n  // It doesn’t matter which corner of the extent we measure!\n  if (cover) {\n    var dx, dy, d2, dc = Infinity;\n\n    for (iCell = 0, cover = null; iCell < nCells; ++iCell) {\n      if (cell = cells[iCell]) {\n        site = cell.site;\n        dx = site[0] - x0;\n        dy = site[1] - y0;\n        d2 = dx * dx + dy * dy;\n        if (d2 < dc) dc = d2, cover = cell;\n      }\n    }\n\n    if (cover) {\n      var v00 = [x0, y0], v01 = [x0, y1], v11 = [x1, y1], v10 = [x1, y0];\n      cover.halfedges.push(\n        edges.push(createBorderEdge(site = cover.site, v00, v01)) - 1,\n        edges.push(createBorderEdge(site, v01, v11)) - 1,\n        edges.push(createBorderEdge(site, v11, v10)) - 1,\n        edges.push(createBorderEdge(site, v10, v00)) - 1\n      );\n    }\n  }\n\n  // Lastly delete any cells with no edges; these were entirely clipped.\n  for (iCell = 0; iCell < nCells; ++iCell) {\n    if (cell = cells[iCell]) {\n      if (!cell.halfedges.length) {\n        delete cells[iCell];\n      }\n    }\n  }\n}\n","import {RedBlackNode} from \"./RedBlackTree\";\nimport {circles, epsilon2} from \"./Diagram\";\n\nvar circlePool = [];\n\nexport var firstCircle;\n\nfunction Circle() {\n  RedBlackNode(this);\n  this.x =\n  this.y =\n  this.arc =\n  this.site =\n  this.cy = null;\n}\n\nexport function attachCircle(arc) {\n  var lArc = arc.P,\n      rArc = arc.N;\n\n  if (!lArc || !rArc) return;\n\n  var lSite = lArc.site,\n      cSite = arc.site,\n      rSite = rArc.site;\n\n  if (lSite === rSite) return;\n\n  var bx = cSite[0],\n      by = cSite[1],\n      ax = lSite[0] - bx,\n      ay = lSite[1] - by,\n      cx = rSite[0] - bx,\n      cy = rSite[1] - by;\n\n  var d = 2 * (ax * cy - ay * cx);\n  if (d >= -epsilon2) return;\n\n  var ha = ax * ax + ay * ay,\n      hc = cx * cx + cy * cy,\n      x = (cy * ha - ay * hc) / d,\n      y = (ax * hc - cx * ha) / d;\n\n  var circle = circlePool.pop() || new Circle;\n  circle.arc = arc;\n  circle.site = cSite;\n  circle.x = x + bx;\n  circle.y = (circle.cy = y + by) + Math.sqrt(x * x + y * y); // y bottom\n\n  arc.circle = circle;\n\n  var before = null,\n      node = circles._;\n\n  while (node) {\n    if (circle.y < node.y || (circle.y === node.y && circle.x <= node.x)) {\n      if (node.L) node = node.L;\n      else { before = node.P; break; }\n    } else {\n      if (node.R) node = node.R;\n      else { before = node; break; }\n    }\n  }\n\n  circles.insert(before, circle);\n  if (!before) firstCircle = circle;\n}\n\nexport function detachCircle(arc) {\n  var circle = arc.circle;\n  if (circle) {\n    if (!circle.P) firstCircle = circle.N;\n    circles.remove(circle);\n    circlePool.push(circle);\n    RedBlackNode(circle);\n    arc.circle = null;\n  }\n}\n","import {RedBlackNode} from \"./RedBlackTree\";\nimport {createCell} from \"./Cell\";\nimport {attachCircle, detachCircle} from \"./Circle\";\nimport {createEdge, setEdgeEnd} from \"./Edge\";\nimport {beaches, epsilon} from \"./Diagram\";\n\nvar beachPool = [];\n\nfunction Beach() {\n  RedBlackNode(this);\n  this.edge =\n  this.site =\n  this.circle = null;\n}\n\nfunction createBeach(site) {\n  var beach = beachPool.pop() || new Beach;\n  beach.site = site;\n  return beach;\n}\n\nfunction detachBeach(beach) {\n  detachCircle(beach);\n  beaches.remove(beach);\n  beachPool.push(beach);\n  RedBlackNode(beach);\n}\n\nexport function removeBeach(beach) {\n  var circle = beach.circle,\n      x = circle.x,\n      y = circle.cy,\n      vertex = [x, y],\n      previous = beach.P,\n      next = beach.N,\n      disappearing = [beach];\n\n  detachBeach(beach);\n\n  var lArc = previous;\n  while (lArc.circle\n      && Math.abs(x - lArc.circle.x) < epsilon\n      && Math.abs(y - lArc.circle.cy) < epsilon) {\n    previous = lArc.P;\n    disappearing.unshift(lArc);\n    detachBeach(lArc);\n    lArc = previous;\n  }\n\n  disappearing.unshift(lArc);\n  detachCircle(lArc);\n\n  var rArc = next;\n  while (rArc.circle\n      && Math.abs(x - rArc.circle.x) < epsilon\n      && Math.abs(y - rArc.circle.cy) < epsilon) {\n    next = rArc.N;\n    disappearing.push(rArc);\n    detachBeach(rArc);\n    rArc = next;\n  }\n\n  disappearing.push(rArc);\n  detachCircle(rArc);\n\n  var nArcs = disappearing.length,\n      iArc;\n  for (iArc = 1; iArc < nArcs; ++iArc) {\n    rArc = disappearing[iArc];\n    lArc = disappearing[iArc - 1];\n    setEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);\n  }\n\n  lArc = disappearing[0];\n  rArc = disappearing[nArcs - 1];\n  rArc.edge = createEdge(lArc.site, rArc.site, null, vertex);\n\n  attachCircle(lArc);\n  attachCircle(rArc);\n}\n\nexport function addBeach(site) {\n  var x = site[0],\n      directrix = site[1],\n      lArc,\n      rArc,\n      dxl,\n      dxr,\n      node = beaches._;\n\n  while (node) {\n    dxl = leftBreakPoint(node, directrix) - x;\n    if (dxl > epsilon) node = node.L; else {\n      dxr = x - rightBreakPoint(node, directrix);\n      if (dxr > epsilon) {\n        if (!node.R) {\n          lArc = node;\n          break;\n        }\n        node = node.R;\n      } else {\n        if (dxl > -epsilon) {\n          lArc = node.P;\n          rArc = node;\n        } else if (dxr > -epsilon) {\n          lArc = node;\n          rArc = node.N;\n        } else {\n          lArc = rArc = node;\n        }\n        break;\n      }\n    }\n  }\n\n  createCell(site);\n  var newArc = createBeach(site);\n  beaches.insert(lArc, newArc);\n\n  if (!lArc && !rArc) return;\n\n  if (lArc === rArc) {\n    detachCircle(lArc);\n    rArc = createBeach(lArc.site);\n    beaches.insert(newArc, rArc);\n    newArc.edge = rArc.edge = createEdge(lArc.site, newArc.site);\n    attachCircle(lArc);\n    attachCircle(rArc);\n    return;\n  }\n\n  if (!rArc) { // && lArc\n    newArc.edge = createEdge(lArc.site, newArc.site);\n    return;\n  }\n\n  // else lArc !== rArc\n  detachCircle(lArc);\n  detachCircle(rArc);\n\n  var lSite = lArc.site,\n      ax = lSite[0],\n      ay = lSite[1],\n      bx = site[0] - ax,\n      by = site[1] - ay,\n      rSite = rArc.site,\n      cx = rSite[0] - ax,\n      cy = rSite[1] - ay,\n      d = 2 * (bx * cy - by * cx),\n      hb = bx * bx + by * by,\n      hc = cx * cx + cy * cy,\n      vertex = [(cy * hb - by * hc) / d + ax, (bx * hc - cx * hb) / d + ay];\n\n  setEdgeEnd(rArc.edge, lSite, rSite, vertex);\n  newArc.edge = createEdge(lSite, site, null, vertex);\n  rArc.edge = createEdge(site, rSite, null, vertex);\n  attachCircle(lArc);\n  attachCircle(rArc);\n}\n\nfunction leftBreakPoint(arc, directrix) {\n  var site = arc.site,\n      rfocx = site[0],\n      rfocy = site[1],\n      pby2 = rfocy - directrix;\n\n  if (!pby2) return rfocx;\n\n  var lArc = arc.P;\n  if (!lArc) return -Infinity;\n\n  site = lArc.site;\n  var lfocx = site[0],\n      lfocy = site[1],\n      plby2 = lfocy - directrix;\n\n  if (!plby2) return lfocx;\n\n  var hl = lfocx - rfocx,\n      aby2 = 1 / pby2 - 1 / plby2,\n      b = hl / plby2;\n\n  if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;\n\n  return (rfocx + lfocx) / 2;\n}\n\nfunction rightBreakPoint(arc, directrix) {\n  var rArc = arc.N;\n  if (rArc) return leftBreakPoint(rArc, directrix);\n  var site = arc.site;\n  return site[1] === directrix ? site[0] : Infinity;\n}\n","import {addBeach, removeBeach} from \"./Beach\";\nimport {sortCellHalfedges, cellHalfedgeStart, clipCells} from \"./Cell\";\nimport {firstCircle} from \"./Circle\";\nimport {clipEdges} from \"./Edge\";\nimport RedBlackTree from \"./RedBlackTree\";\n\nexport var epsilon = 1e-6;\nexport var epsilon2 = 1e-12;\nexport var beaches;\nexport var cells;\nexport var circles;\nexport var edges;\n\nfunction triangleArea(a, b, c) {\n  return (a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]);\n}\n\nfunction lexicographic(a, b) {\n  return b[1] - a[1]\n      || b[0] - a[0];\n}\n\nexport default function Diagram(sites, extent) {\n  var site = sites.sort(lexicographic).pop(),\n      x,\n      y,\n      circle;\n\n  edges = [];\n  cells = new Array(sites.length);\n  beaches = new RedBlackTree;\n  circles = new RedBlackTree;\n\n  while (true) {\n    circle = firstCircle;\n    if (site && (!circle || site[1] < circle.y || (site[1] === circle.y && site[0] < circle.x))) {\n      if (site[0] !== x || site[1] !== y) {\n        addBeach(site);\n        x = site[0], y = site[1];\n      }\n      site = sites.pop();\n    } else if (circle) {\n      removeBeach(circle.arc);\n    } else {\n      break;\n    }\n  }\n\n  sortCellHalfedges();\n\n  if (extent) {\n    var x0 = +extent[0][0],\n        y0 = +extent[0][1],\n        x1 = +extent[1][0],\n        y1 = +extent[1][1];\n    clipEdges(x0, y0, x1, y1);\n    clipCells(x0, y0, x1, y1);\n  }\n\n  this.edges = edges;\n  this.cells = cells;\n\n  beaches =\n  circles =\n  edges =\n  cells = null;\n}\n\nDiagram.prototype = {\n  constructor: Diagram,\n\n  polygons: function() {\n    var edges = this.edges;\n\n    return this.cells.map(function(cell) {\n      var polygon = cell.halfedges.map(function(i) { return cellHalfedgeStart(cell, edges[i]); });\n      polygon.data = cell.site.data;\n      return polygon;\n    });\n  },\n\n  triangles: function() {\n    var triangles = [],\n        edges = this.edges;\n\n    this.cells.forEach(function(cell, i) {\n      if (!(m = (halfedges = cell.halfedges).length)) return;\n      var site = cell.site,\n          halfedges,\n          j = -1,\n          m,\n          s0,\n          e1 = edges[halfedges[m - 1]],\n          s1 = e1.left === site ? e1.right : e1.left;\n\n      while (++j < m) {\n        s0 = s1;\n        e1 = edges[halfedges[j]];\n        s1 = e1.left === site ? e1.right : e1.left;\n        if (s0 && s1 && i < s0.index && i < s1.index && triangleArea(site, s0, s1) < 0) {\n          triangles.push([site.data, s0.data, s1.data]);\n        }\n      }\n    });\n\n    return triangles;\n  },\n\n  links: function() {\n    return this.edges.filter(function(edge) {\n      return edge.right;\n    }).map(function(edge) {\n      return {\n        source: edge.left.data,\n        target: edge.right.data\n      };\n    });\n  },\n\n  find: function(x, y, radius) {\n    var that = this, i0, i1 = that._found || 0, n = that.cells.length, cell;\n\n    // Use the previously-found cell, or start with an arbitrary one.\n    while (!(cell = that.cells[i1])) if (++i1 >= n) return null;\n    var dx = x - cell.site[0], dy = y - cell.site[1], d2 = dx * dx + dy * dy;\n\n    // Traverse the half-edges to find a closer cell, if any.\n    do {\n      cell = that.cells[i0 = i1], i1 = null;\n      cell.halfedges.forEach(function(e) {\n        var edge = that.edges[e], v = edge.left;\n        if ((v === cell.site || !v) && !(v = edge.right)) return;\n        var vx = x - v[0], vy = y - v[1], v2 = vx * vx + vy * vy;\n        if (v2 < d2) d2 = v2, i1 = v.index;\n      });\n    } while (i1 !== null);\n\n    that._found = i0;\n\n    return radius == null || d2 <= radius * radius ? cell.site : null;\n  }\n}\n","import constant from \"./constant\";\nimport {x as pointX, y as pointY} from \"./point\";\nimport Diagram, {epsilon} from \"./Diagram\";\n\nexport default function() {\n  var x = pointX,\n      y = pointY,\n      extent = null;\n\n  function voronoi(data) {\n    return new Diagram(data.map(function(d, i) {\n      var s = [Math.round(x(d, i, data) / epsilon) * epsilon, Math.round(y(d, i, data) / epsilon) * epsilon];\n      s.index = i;\n      s.data = d;\n      return s;\n    }), extent);\n  }\n\n  voronoi.polygons = function(data) {\n    return voronoi(data).polygons();\n  };\n\n  voronoi.links = function(data) {\n    return voronoi(data).links();\n  };\n\n  voronoi.triangles = function(data) {\n    return voronoi(data).triangles();\n  };\n\n  voronoi.x = function(_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), voronoi) : x;\n  };\n\n  voronoi.y = function(_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), voronoi) : y;\n  };\n\n  voronoi.extent = function(_) {\n    return arguments.length ? (extent = _ == null ? null : [[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]], voronoi) : extent && [[extent[0][0], extent[0][1]], [extent[1][0], extent[1][1]]];\n  };\n\n  voronoi.size = function(_) {\n    return arguments.length ? (extent = _ == null ? null : [[0, 0], [+_[0], +_[1]]], voronoi) : extent && [extent[1][0] - extent[0][0], extent[1][1] - extent[0][1]];\n  };\n\n  return voronoi;\n}\n","export default function(x) {\n  return function() {\n    return x;\n  };\n}\n","export default function ZoomEvent(target, type, transform) {\n  this.target = target;\n  this.type = type;\n  this.transform = transform;\n}\n","export function Transform(k, x, y) {\n  this.k = k;\n  this.x = x;\n  this.y = y;\n}\n\nTransform.prototype = {\n  constructor: Transform,\n  scale: function(k) {\n    return k === 1 ? this : new Transform(this.k * k, this.x, this.y);\n  },\n  translate: function(x, y) {\n    return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);\n  },\n  apply: function(point) {\n    return [point[0] * this.k + this.x, point[1] * this.k + this.y];\n  },\n  applyX: function(x) {\n    return x * this.k + this.x;\n  },\n  applyY: function(y) {\n    return y * this.k + this.y;\n  },\n  invert: function(location) {\n    return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];\n  },\n  invertX: function(x) {\n    return (x - this.x) / this.k;\n  },\n  invertY: function(y) {\n    return (y - this.y) / this.k;\n  },\n  rescaleX: function(x) {\n    return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));\n  },\n  rescaleY: function(y) {\n    return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));\n  },\n  toString: function() {\n    return \"translate(\" + this.x + \",\" + this.y + \") scale(\" + this.k + \")\";\n  }\n};\n\nexport var identity = new Transform(1, 0, 0);\n\ntransform.prototype = Transform.prototype;\n\nexport default function transform(node) {\n  return node.__zoom || identity;\n}\n","import {event} from \"d3-selection\";\n\nexport function nopropagation() {\n  event.stopImmediatePropagation();\n}\n\nexport default function() {\n  event.preventDefault();\n  event.stopImmediatePropagation();\n}\n","import {dispatch} from \"d3-dispatch\";\nimport {dragDisable, dragEnable} from \"d3-drag\";\nimport {interpolateZoom} from \"d3-interpolate\";\nimport {event, customEvent, select, mouse, touch} from \"d3-selection\";\nimport {interrupt} from \"d3-transition\";\nimport constant from \"./constant\";\nimport ZoomEvent from \"./event\";\nimport {Transform, identity} from \"./transform\";\nimport noevent, {nopropagation} from \"./noevent\";\n\n// Ignore right-click, since that should open the context menu.\nfunction defaultFilter() {\n  return !event.button;\n}\n\nfunction defaultExtent() {\n  var e = this, w, h;\n  if (e instanceof SVGElement) {\n    e = e.ownerSVGElement || e;\n    w = e.width.baseVal.value;\n    h = e.height.baseVal.value;\n  } else {\n    w = e.clientWidth;\n    h = e.clientHeight;\n  }\n  return [[0, 0], [w, h]];\n}\n\nfunction defaultTransform() {\n  return this.__zoom || identity;\n}\n\nfunction defaultWheelDelta() {\n  return -event.deltaY * (event.deltaMode ? 120 : 1) / 500;\n}\n\nfunction defaultTouchable() {\n  return \"ontouchstart\" in this;\n}\n\nfunction defaultConstrain(transform, extent, translateExtent) {\n  var dx0 = transform.invertX(extent[0][0]) - translateExtent[0][0],\n      dx1 = transform.invertX(extent[1][0]) - translateExtent[1][0],\n      dy0 = transform.invertY(extent[0][1]) - translateExtent[0][1],\n      dy1 = transform.invertY(extent[1][1]) - translateExtent[1][1];\n  return transform.translate(\n    dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1),\n    dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1)\n  );\n}\n\nexport default function() {\n  var filter = defaultFilter,\n      extent = defaultExtent,\n      constrain = defaultConstrain,\n      wheelDelta = defaultWheelDelta,\n      touchable = defaultTouchable,\n      scaleExtent = [0, Infinity],\n      translateExtent = [[-Infinity, -Infinity], [Infinity, Infinity]],\n      duration = 250,\n      interpolate = interpolateZoom,\n      gestures = [],\n      listeners = dispatch(\"start\", \"zoom\", \"end\"),\n      touchstarting,\n      touchending,\n      touchDelay = 500,\n      wheelDelay = 150,\n      clickDistance2 = 0;\n\n  function zoom(selection) {\n    selection\n        .property(\"__zoom\", defaultTransform)\n        .on(\"wheel.zoom\", wheeled)\n        .on(\"mousedown.zoom\", mousedowned)\n        .on(\"dblclick.zoom\", dblclicked)\n      .filter(touchable)\n        .on(\"touchstart.zoom\", touchstarted)\n        .on(\"touchmove.zoom\", touchmoved)\n        .on(\"touchend.zoom touchcancel.zoom\", touchended)\n        .style(\"touch-action\", \"none\")\n        .style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\");\n  }\n\n  zoom.transform = function(collection, transform) {\n    var selection = collection.selection ? collection.selection() : collection;\n    selection.property(\"__zoom\", defaultTransform);\n    if (collection !== selection) {\n      schedule(collection, transform);\n    } else {\n      selection.interrupt().each(function() {\n        gesture(this, arguments)\n            .start()\n            .zoom(null, typeof transform === \"function\" ? transform.apply(this, arguments) : transform)\n            .end();\n      });\n    }\n  };\n\n  zoom.scaleBy = function(selection, k) {\n    zoom.scaleTo(selection, function() {\n      var k0 = this.__zoom.k,\n          k1 = typeof k === \"function\" ? k.apply(this, arguments) : k;\n      return k0 * k1;\n    });\n  };\n\n  zoom.scaleTo = function(selection, k) {\n    zoom.transform(selection, function() {\n      var e = extent.apply(this, arguments),\n          t0 = this.__zoom,\n          p0 = centroid(e),\n          p1 = t0.invert(p0),\n          k1 = typeof k === \"function\" ? k.apply(this, arguments) : k;\n      return constrain(translate(scale(t0, k1), p0, p1), e, translateExtent);\n    });\n  };\n\n  zoom.translateBy = function(selection, x, y) {\n    zoom.transform(selection, function() {\n      return constrain(this.__zoom.translate(\n        typeof x === \"function\" ? x.apply(this, arguments) : x,\n        typeof y === \"function\" ? y.apply(this, arguments) : y\n      ), extent.apply(this, arguments), translateExtent);\n    });\n  };\n\n  zoom.translateTo = function(selection, x, y) {\n    zoom.transform(selection, function() {\n      var e = extent.apply(this, arguments),\n          t = this.__zoom,\n          p = centroid(e);\n      return constrain(identity.translate(p[0], p[1]).scale(t.k).translate(\n        typeof x === \"function\" ? -x.apply(this, arguments) : -x,\n        typeof y === \"function\" ? -y.apply(this, arguments) : -y\n      ), e, translateExtent);\n    });\n  };\n\n  function scale(transform, k) {\n    k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k));\n    return k === transform.k ? transform : new Transform(k, transform.x, transform.y);\n  }\n\n  function translate(transform, p0, p1) {\n    var x = p0[0] - p1[0] * transform.k, y = p0[1] - p1[1] * transform.k;\n    return x === transform.x && y === transform.y ? transform : new Transform(transform.k, x, y);\n  }\n\n  function centroid(extent) {\n    return [(+extent[0][0] + +extent[1][0]) / 2, (+extent[0][1] + +extent[1][1]) / 2];\n  }\n\n  function schedule(transition, transform, center) {\n    transition\n        .on(\"start.zoom\", function() { gesture(this, arguments).start(); })\n        .on(\"interrupt.zoom end.zoom\", function() { gesture(this, arguments).end(); })\n        .tween(\"zoom\", function() {\n          var that = this,\n              args = arguments,\n              g = gesture(that, args),\n              e = extent.apply(that, args),\n              p = center || centroid(e),\n              w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]),\n              a = that.__zoom,\n              b = typeof transform === \"function\" ? transform.apply(that, args) : transform,\n              i = interpolate(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));\n          return function(t) {\n            if (t === 1) t = b; // Avoid rounding error on end.\n            else { var l = i(t), k = w / l[2]; t = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k); }\n            g.zoom(null, t);\n          };\n        });\n  }\n\n  function gesture(that, args) {\n    for (var i = 0, n = gestures.length, g; i < n; ++i) {\n      if ((g = gestures[i]).that === that) {\n        return g;\n      }\n    }\n    return new Gesture(that, args);\n  }\n\n  function Gesture(that, args) {\n    this.that = that;\n    this.args = args;\n    this.index = -1;\n    this.active = 0;\n    this.extent = extent.apply(that, args);\n  }\n\n  Gesture.prototype = {\n    start: function() {\n      if (++this.active === 1) {\n        this.index = gestures.push(this) - 1;\n        this.emit(\"start\");\n      }\n      return this;\n    },\n    zoom: function(key, transform) {\n      if (this.mouse && key !== \"mouse\") this.mouse[1] = transform.invert(this.mouse[0]);\n      if (this.touch0 && key !== \"touch\") this.touch0[1] = transform.invert(this.touch0[0]);\n      if (this.touch1 && key !== \"touch\") this.touch1[1] = transform.invert(this.touch1[0]);\n      this.that.__zoom = transform;\n      this.emit(\"zoom\");\n      return this;\n    },\n    end: function() {\n      if (--this.active === 0) {\n        gestures.splice(this.index, 1);\n        this.index = -1;\n        this.emit(\"end\");\n      }\n      return this;\n    },\n    emit: function(type) {\n      customEvent(new ZoomEvent(zoom, type, this.that.__zoom), listeners.apply, listeners, [type, this.that, this.args]);\n    }\n  };\n\n  function wheeled() {\n    if (!filter.apply(this, arguments)) return;\n    var g = gesture(this, arguments),\n        t = this.__zoom,\n        k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t.k * Math.pow(2, wheelDelta.apply(this, arguments)))),\n        p = mouse(this);\n\n    // If the mouse is in the same location as before, reuse it.\n    // If there were recent wheel events, reset the wheel idle timeout.\n    if (g.wheel) {\n      if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {\n        g.mouse[1] = t.invert(g.mouse[0] = p);\n      }\n      clearTimeout(g.wheel);\n    }\n\n    // If this wheel event won’t trigger a transform change, ignore it.\n    else if (t.k === k) return;\n\n    // Otherwise, capture the mouse point and location at the start.\n    else {\n      g.mouse = [p, t.invert(p)];\n      interrupt(this);\n      g.start();\n    }\n\n    noevent();\n    g.wheel = setTimeout(wheelidled, wheelDelay);\n    g.zoom(\"mouse\", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent, translateExtent));\n\n    function wheelidled() {\n      g.wheel = null;\n      g.end();\n    }\n  }\n\n  function mousedowned() {\n    if (touchending || !filter.apply(this, arguments)) return;\n    var g = gesture(this, arguments),\n        v = select(event.view).on(\"mousemove.zoom\", mousemoved, true).on(\"mouseup.zoom\", mouseupped, true),\n        p = mouse(this),\n        x0 = event.clientX,\n        y0 = event.clientY;\n\n    dragDisable(event.view);\n    nopropagation();\n    g.mouse = [p, this.__zoom.invert(p)];\n    interrupt(this);\n    g.start();\n\n    function mousemoved() {\n      noevent();\n      if (!g.moved) {\n        var dx = event.clientX - x0, dy = event.clientY - y0;\n        g.moved = dx * dx + dy * dy > clickDistance2;\n      }\n      g.zoom(\"mouse\", constrain(translate(g.that.__zoom, g.mouse[0] = mouse(g.that), g.mouse[1]), g.extent, translateExtent));\n    }\n\n    function mouseupped() {\n      v.on(\"mousemove.zoom mouseup.zoom\", null);\n      dragEnable(event.view, g.moved);\n      noevent();\n      g.end();\n    }\n  }\n\n  function dblclicked() {\n    if (!filter.apply(this, arguments)) return;\n    var t0 = this.__zoom,\n        p0 = mouse(this),\n        p1 = t0.invert(p0),\n        k1 = t0.k * (event.shiftKey ? 0.5 : 2),\n        t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, arguments), translateExtent);\n\n    noevent();\n    if (duration > 0) select(this).transition().duration(duration).call(schedule, t1, p0);\n    else select(this).call(zoom.transform, t1);\n  }\n\n  function touchstarted() {\n    if (!filter.apply(this, arguments)) return;\n    var g = gesture(this, arguments),\n        touches = event.changedTouches,\n        started,\n        n = touches.length, i, t, p;\n\n    nopropagation();\n    for (i = 0; i < n; ++i) {\n      t = touches[i], p = touch(this, touches, t.identifier);\n      p = [p, this.__zoom.invert(p), t.identifier];\n      if (!g.touch0) g.touch0 = p, started = true;\n      else if (!g.touch1) g.touch1 = p;\n    }\n\n    // If this is a dbltap, reroute to the (optional) dblclick.zoom handler.\n    if (touchstarting) {\n      touchstarting = clearTimeout(touchstarting);\n      if (!g.touch1) {\n        g.end();\n        p = select(this).on(\"dblclick.zoom\");\n        if (p) p.apply(this, arguments);\n        return;\n      }\n    }\n\n    if (started) {\n      touchstarting = setTimeout(function() { touchstarting = null; }, touchDelay);\n      interrupt(this);\n      g.start();\n    }\n  }\n\n  function touchmoved() {\n    var g = gesture(this, arguments),\n        touches = event.changedTouches,\n        n = touches.length, i, t, p, l;\n\n    noevent();\n    if (touchstarting) touchstarting = clearTimeout(touchstarting);\n    for (i = 0; i < n; ++i) {\n      t = touches[i], p = touch(this, touches, t.identifier);\n      if (g.touch0 && g.touch0[2] === t.identifier) g.touch0[0] = p;\n      else if (g.touch1 && g.touch1[2] === t.identifier) g.touch1[0] = p;\n    }\n    t = g.that.__zoom;\n    if (g.touch1) {\n      var p0 = g.touch0[0], l0 = g.touch0[1],\n          p1 = g.touch1[0], l1 = g.touch1[1],\n          dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp,\n          dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;\n      t = scale(t, Math.sqrt(dp / dl));\n      p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];\n      l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];\n    }\n    else if (g.touch0) p = g.touch0[0], l = g.touch0[1];\n    else return;\n    g.zoom(\"touch\", constrain(translate(t, p, l), g.extent, translateExtent));\n  }\n\n  function touchended() {\n    var g = gesture(this, arguments),\n        touches = event.changedTouches,\n        n = touches.length, i, t;\n\n    nopropagation();\n    if (touchending) clearTimeout(touchending);\n    touchending = setTimeout(function() { touchending = null; }, touchDelay);\n    for (i = 0; i < n; ++i) {\n      t = touches[i];\n      if (g.touch0 && g.touch0[2] === t.identifier) delete g.touch0;\n      else if (g.touch1 && g.touch1[2] === t.identifier) delete g.touch1;\n    }\n    if (g.touch1 && !g.touch0) g.touch0 = g.touch1, delete g.touch1;\n    if (g.touch0) g.touch0[1] = this.__zoom.invert(g.touch0[0]);\n    else g.end();\n  }\n\n  zoom.wheelDelta = function(_) {\n    return arguments.length ? (wheelDelta = typeof _ === \"function\" ? _ : constant(+_), zoom) : wheelDelta;\n  };\n\n  zoom.filter = function(_) {\n    return arguments.length ? (filter = typeof _ === \"function\" ? _ : constant(!!_), zoom) : filter;\n  };\n\n  zoom.touchable = function(_) {\n    return arguments.length ? (touchable = typeof _ === \"function\" ? _ : constant(!!_), zoom) : touchable;\n  };\n\n  zoom.extent = function(_) {\n    return arguments.length ? (extent = typeof _ === \"function\" ? _ : constant([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom) : extent;\n  };\n\n  zoom.scaleExtent = function(_) {\n    return arguments.length ? (scaleExtent[0] = +_[0], scaleExtent[1] = +_[1], zoom) : [scaleExtent[0], scaleExtent[1]];\n  };\n\n  zoom.translateExtent = function(_) {\n    return arguments.length ? (translateExtent[0][0] = +_[0][0], translateExtent[1][0] = +_[1][0], translateExtent[0][1] = +_[0][1], translateExtent[1][1] = +_[1][1], zoom) : [[translateExtent[0][0], translateExtent[0][1]], [translateExtent[1][0], translateExtent[1][1]]];\n  };\n\n  zoom.constrain = function(_) {\n    return arguments.length ? (constrain = _, zoom) : constrain;\n  };\n\n  zoom.duration = function(_) {\n    return arguments.length ? (duration = +_, zoom) : duration;\n  };\n\n  zoom.interpolate = function(_) {\n    return arguments.length ? (interpolate = _, zoom) : interpolate;\n  };\n\n  zoom.on = function() {\n    var value = listeners.on.apply(listeners, arguments);\n    return value === listeners ? zoom : value;\n  };\n\n  zoom.clickDistance = function(_) {\n    return arguments.length ? (clickDistance2 = (_ = +_) * _, zoom) : Math.sqrt(clickDistance2);\n  };\n\n  return zoom;\n}\n","import * as d3 from \"d3\";\n\nlet container, recordArray, inCheck;\n\nconst zoomed = () => {\n    container.attr(\"transform\", \"translate(\" + d3.event.transform.x + \",\" + d3.event.transform.y + \") scale(\" + d3.event.transform.k + \")\");\n};\n\nconst zoom = d3.zoom()\n    .scaleExtent([0.5, 200])\n    .on(\"zoom\", zoomed);\n\nfunction genere(zoom, point) {\n    return [{point1: point, point2: {x: point.x + zoom / 2, y: point.y + Math.sqrt(3) / 2 * zoom}},\n        {\n            point1: {x: point.x + zoom / 2, y: point.y + Math.sqrt(3) / 2 * zoom},\n            point2: {x: point.x - zoom / 2, y: point.y + Math.sqrt(3) / 2 * zoom}\n        },\n        {point1: {x: point.x - zoom / 2, y: point.y + Math.sqrt(3) / 2 * zoom}, point2: point}]\n}\n\nfunction newSegment(segment) {\n    let newPoint1 = {},\n        newPoint2 = {},\n        newPoint3 = {};\n    newPoint1.x = 2 / 3 * segment.point1.x + 1 / 3 * segment.point2.x;\n    newPoint2.x = 1 / 3 * segment.point1.x + 2 / 3 * segment.point2.x;\n    newPoint1.y = 2 / 3 * segment.point1.y + 1 / 3 * segment.point2.y;\n    newPoint2.y = 1 / 3 * segment.point1.y + 2 / 3 * segment.point2.y;\n    newPoint3.x = (newPoint2.x + newPoint1.x) / 2 + (newPoint2.y - newPoint1.y) * (Math.sqrt(3) / 2);\n    newPoint3.y = (newPoint2.y + newPoint1.y) / 2 - (newPoint2.x - newPoint1.x) * (Math.sqrt(3) / 2);\n    return [{point1: segment.point1, point2: newPoint1},\n        {point1: newPoint1, point2: newPoint3},\n        {point1: newPoint3, point2: newPoint2},\n        {point1: newPoint2, point2: segment.point2}];\n}\n\nfunction display(arraySegment) {\n    container.selectAll(\"path\").remove();\n    var path = d3.path();\n    path.moveTo(arraySegment[0].point1.x, arraySegment[0].point1.y);\n    for (var i = 0; i < arraySegment.length - 1; i++) {\n        path.lineTo(arraySegment[i].point2.x, arraySegment[i].point2.y);\n    }\n    path.closePath();\n    container.append(\"path\")\n        .attr(\"d\", path.toString())\n        .attr(\"fill\", \"white\")\n        .on(\"mouseover\", function () {\n            d3.select(this).attr(\"fill\", \"#f2f2f2\")\n        })\n        .on(\"mouseout\", function () {\n            d3.select(this).attr(\"fill\", \"white\")\n        })\n}\n\nfunction iteration() {\n    if (recordArray.length < 9) {\n        let arraySegment = recordArray[recordArray.length - 1],\n            newArraySegment = [];\n\n        for (var i = 0; i < arraySegment.length; i++) {\n            var a = newSegment(arraySegment[i]);\n            for (var j = 0; j < a.length; j++) {\n                newArraySegment.push(a[j]);\n            }\n        }\n        recordArray.push(newArraySegment)\n        display(newArraySegment)\n        d3.select(\"span\").text(\"n = \" + recordArray.length)\n    }\n}\n\nfunction desIteration() {\n    if (recordArray.length > 1) {\n        recordArray.pop();\n        display(recordArray[recordArray.length - 1])\n        d3.select(\"span\").text(\"n = \" + recordArray.length)\n    }\n}\n\nfunction iterateKochFlake(times = 6){\n    while(times > 0){\n        iteration();\n        times--;\n    }\n}\n\nfunction createKochFlake(svg, dimensions={}) {\n    let x = dimensions.x || 0,\n        y = dimensions.y || 0,\n        size = dimensions.size || 100,\n        w = dimensions.w || 960,\n        h = dimensions.h || 500;\n    recordArray = [genere(size, {x: x, y: y})];\n    inCheck = 0;\n    if (!svg) {\n        svg = d3.select(\"div\")\n            .append(\"svg\")\n            .attr(\"width\", w)\n            .attr(\"height\", h)\n            .style(\"background-color\", d3.schemeCategory20b[Math.floor(Math.random() * 20)])\n    }\n    let containerGroup = svg.append(\"g\")\n    container = containerGroup.append(\"g\");\n    display(recordArray[recordArray.length - 1]);\n    iterateKochFlake();\n    return containerGroup;\n}\n\nexport {createKochFlake};\n","export default function(x) {\n  return x;\n}\n","import identity from \"./identity\";\n\nexport default function(transform) {\n  if (transform == null) return identity;\n  var x0,\n      y0,\n      kx = transform.scale[0],\n      ky = transform.scale[1],\n      dx = transform.translate[0],\n      dy = transform.translate[1];\n  return function(input, i) {\n    if (!i) x0 = y0 = 0;\n    var j = 2, n = input.length, output = new Array(n);\n    output[0] = (x0 += input[0]) * kx + dx;\n    output[1] = (y0 += input[1]) * ky + dy;\n    while (j < n) output[j] = input[j], ++j;\n    return output;\n  };\n}\n","export default function(array, n) {\n  var t, j = array.length, i = j - n;\n  while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;\n}\n","import reverse from \"./reverse\";\nimport transform from \"./transform\";\n\nexport default function(topology, o) {\n  return o.type === \"GeometryCollection\"\n      ? {type: \"FeatureCollection\", features: o.geometries.map(function(o) { return feature(topology, o); })}\n      : feature(topology, o);\n}\n\nexport function feature(topology, o) {\n  var id = o.id,\n      bbox = o.bbox,\n      properties = o.properties == null ? {} : o.properties,\n      geometry = object(topology, o);\n  return id == null && bbox == null ? {type: \"Feature\", properties: properties, geometry: geometry}\n      : bbox == null ? {type: \"Feature\", id: id, properties: properties, geometry: geometry}\n      : {type: \"Feature\", id: id, bbox: bbox, properties: properties, geometry: geometry};\n}\n\nexport function object(topology, o) {\n  var transformPoint = transform(topology.transform),\n      arcs = topology.arcs;\n\n  function arc(i, points) {\n    if (points.length) points.pop();\n    for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {\n      points.push(transformPoint(a[k], k));\n    }\n    if (i < 0) reverse(points, n);\n  }\n\n  function point(p) {\n    return transformPoint(p);\n  }\n\n  function line(arcs) {\n    var points = [];\n    for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);\n    if (points.length < 2) points.push(points[0]); // This should never happen per the specification.\n    return points;\n  }\n\n  function ring(arcs) {\n    var points = line(arcs);\n    while (points.length < 4) points.push(points[0]); // This may happen if an arc has only two points.\n    return points;\n  }\n\n  function polygon(arcs) {\n    return arcs.map(ring);\n  }\n\n  function geometry(o) {\n    var type = o.type, coordinates;\n    switch (type) {\n      case \"GeometryCollection\": return {type: type, geometries: o.geometries.map(geometry)};\n      case \"Point\": coordinates = point(o.coordinates); break;\n      case \"MultiPoint\": coordinates = o.coordinates.map(point); break;\n      case \"LineString\": coordinates = line(o.arcs); break;\n      case \"MultiLineString\": coordinates = o.arcs.map(line); break;\n      case \"Polygon\": coordinates = polygon(o.arcs); break;\n      case \"MultiPolygon\": coordinates = o.arcs.map(polygon); break;\n      default: return null;\n    }\n    return {type: type, coordinates: coordinates};\n  }\n\n  return geometry(o);\n}\n","export default function(a, x) {\n  var lo = 0, hi = a.length;\n  while (lo < hi) {\n    var mid = lo + hi >>> 1;\n    if (a[mid] < x) lo = mid + 1;\n    else hi = mid;\n  }\n  return lo;\n}\n","// TODO if quantized, use simpler Int32 hashing?\n\nvar buffer = new ArrayBuffer(16),\n    floats = new Float64Array(buffer),\n    uints = new Uint32Array(buffer);\n\nexport default function(point) {\n  floats[0] = point[0];\n  floats[1] = point[1];\n  var hash = uints[0] ^ uints[1];\n  hash = hash << 5 ^ hash >> 7 ^ uints[2] ^ uints[3];\n  return hash & 0x7fffffff;\n}\n","var pi = Math.PI,\n    tau = 2 * pi,\n    quarterPi = pi / 4,\n    radians = pi / 180,\n    abs = Math.abs,\n    atan2 = Math.atan2,\n    cos = Math.cos,\n    sin = Math.sin;\n\nfunction halfArea(ring, closed) {\n  var i = 0,\n      n = ring.length,\n      sum = 0,\n      point = ring[closed ? i++ : n - 1],\n      lambda0, lambda1 = point[0] * radians,\n      phi1 = (point[1] * radians) / 2 + quarterPi,\n      cosPhi0, cosPhi1 = cos(phi1),\n      sinPhi0, sinPhi1 = sin(phi1);\n\n  for (; i < n; ++i) {\n    point = ring[i];\n    lambda0 = lambda1, lambda1 = point[0] * radians;\n    phi1 = (point[1] * radians) / 2 + quarterPi;\n    cosPhi0 = cosPhi1, cosPhi1 = cos(phi1);\n    sinPhi0 = sinPhi1, sinPhi1 = sin(phi1);\n\n    // Spherical excess E for a spherical triangle with vertices: south pole,\n    // previous point, current point.  Uses a formula derived from Cagnoli’s\n    // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\n    // See https://github.com/d3/d3-geo/blob/master/README.md#geoArea\n    var dLambda = lambda1 - lambda0,\n        sdLambda = dLambda >= 0 ? 1 : -1,\n        adLambda = sdLambda * dLambda,\n        k = sinPhi0 * sinPhi1,\n        u = cosPhi0 * cosPhi1 + k * cos(adLambda),\n        v = k * sdLambda * sin(adLambda);\n    sum += atan2(v, u);\n  }\n\n  return sum;\n}\n\nexport function sphericalRingArea(ring, interior) {\n  var sum = halfArea(ring, true);\n  if (interior) sum *= -1;\n  return (sum < 0 ? tau + sum : sum) * 2;\n}\n\nexport function sphericalTriangleArea(t) {\n  return abs(halfArea(t, false)) * 2;\n}\n","import * as d3 from \"d3\";\n\nconst colors = [\"#cde7ff\",\n\"#7a90ea\",\n\"#51fbfb\",\n\"#658ad0\",\n\"#03f3fd\",\n\"#9cb1ff\",\n\"#61d0cf\",\n\"#3b8fd9\",\n\"#98f9ff\",\n\"#969ed7\",\n\"#71f3ff\",\n\"#7e8aa9\",\n\"#00defc\",\n\"#9ea1c3\",\n\"#01becc\",\n\"#c0c4f0\",\n\"#44a4a4\",\n\"#4fb5ff\",\n\"#88e2e1\",\n\"#009de3\",\n\"#c9e8f0\",\n\"#02a1d6\",\n\"#9bc7c6\",\n\"#658dbc\",\n\"#a4ebff\",\n\"#748ea1\",\n\"#56d1ff\",\n\"#a8b2c6\",\n\"#00b8d7\",\n\"#91afb7\",\n\"#00b0d9\",\n\"#7cc2c1\",\n\"#9ad5ff\",\n\"#1b97b4\",\n\"#5792a9\"];\n\nconst contrastColors = ['#c0b10c']\n\nconst blueGradient = [\"#cde7ff\",  \"#009de3\"];\n//const blueGradient = [colors[0],  colors[19]];\n\nfunction getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction getRandomColor(someColors){\n    if(!Array.isArray(someColors)){\n       someColors = [\n            \"#3b8fd9\",\n            \"#00defc\",\n            \"#4fb5ff\",\n            \"#009de3\",\n            \"#02a1d6\",\n            \"#00b8d7\",\n            \"#00b0d9\",\n            \"#5792a9\"];\n\n    }\n    const i = getRandomInt(0, someColors.length-1);\n    return someColors[i];\n}\n\nfunction generateAllColors(l, colorRange = ['#a0f7eb', '#036cb2'] ){\n    const colorScale = d3.scaleLinear(d3.interpolateRgb);\n    colorScale.domain([0, l])\n        .range(colorRange);\n    return Array(l).fill('')\n        .map((color, i) => colorScale(i))\n        .reverse();\n}\n\nexport {\n    colors, contrastColors, getRandomColor, getRandomInt, generateAllColors, blueGradient\n};\n","import * as d3 from \"d3\";\nimport * as topojson from \"topojson\";\nimport {getRandomColor} from \"./colors\";\n\nfunction generateMaladetaPosition(svgSelection){\n    const maladetaPosition = {\n        x: 425,\n        y: 115\n    }\n    const circleSelection = svgSelection.append(\"circle\")\n        .attr(\"cx\", maladetaPosition.x)\n        .attr(\"cy\", maladetaPosition.y)\n        .attr(\"r\", 5)\n        .style(\"fill\", \"black\")\n        .attr('id', 'maladeta_in_spain')\n        .attr('opacity', 0);\n    return circleSelection;\n}\n\nfunction generateSpain(svg, width = 900, height=900){\n    let projection = d3.geoMercator().scale(2300)\n        .center([1, 36])\n        .translate([width / 2, height / 2]);;\n    if(!svg){\n        svg = d3.select(\"body\").append(\"svg\")\n            .attr(\"width\", width)\n            .attr(\"height\", height);\n    }\n\n    let path = d3.geoPath()\n        .projection(projection);\n    let g = svg.append(\"g\").attr('id', 'spain');\n    let i = 0;\n    return d3.json(\"assets/spain-province.json\")\n        .then(topology => {\n            //FUCK THE REALLY BAD DOCUMENTATION TO GET DATA!!!!\n            const topoData = topojson.feature(topology, topology.objects.ESP_adm2).features;\n            g.selectAll(\"path\")\n                .data(topoData)\n                .enter()\n                .append(\"path\")\n                .attr(\"d\", path)\n                .attr('id', (a, b)=> {\n                    let province = a && a.properties ? a.properties.NAME_2 : Math.random() +'' ;\n                    return province.toLowerCase();\n                })\n                .style('fill', () => getRandomColor())\n                //.style('fill', '#219aff')\n                .style('stroke', '#ffffff');\n            generateMaladetaPosition(g);\n            return g;\n        });\n\n}\n\nexport {generateSpain};\n","import * as d3 from \"d3\";\nimport {generateSpain} from \"./spain\";\nimport {getArrow} from \"./arrow\";\nimport {colors, contrastColors} from \"./colors\";\n\n\nconst colorGlaciar = '#d3f8fb'//colors[2];\n//colors[19] = glaciar;\nfunction getGlacierDrawing(svg, width = 600, height = 600) {\n    const glaciarDrawing = `  \n  <defs\n     id=\"defs10985\">\n    <clipPath\n       id=\"clipPath1006-6\"\n       clipPathUnits=\"userSpaceOnUse\">\n      <rect\n         ry=\"10\"\n         rx=\"10\"\n         y=\"42.854149\"\n         x=\"-160.96211\"\n         height=\"69.222809\"\n         width=\"124.54759\"\n         id=\"rect1008-1\"\n         style=\"fill:#4d4d4d;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.44260779;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:0.24705882\" />\n    </clipPath>\n  </defs>\n  <g\n     style=\"stroke:${colors[19]};stroke-opacity:1\"\n     transform=\"matrix(1.8895761,0,0,1.8895761,305.45663,-79.324853)\"\n     id=\"g3336-3-7\"\n     clip-path=\"url(#clipPath1006-6)\">\n    <g\n       style=\"stroke:${colors[19]};stroke-opacity:1\"\n       id=\"g3322-6-7\">\n      <g\n         style=\"stroke:${colors[19]};stroke-opacity:1\"\n         id=\"g3309-7-1\">\n        <g\n           style=\"stroke:${colors[19]};stroke-opacity:1\"\n           id=\"g3297-5-2\">\n          <g\n             style=\"stroke:${colors[19]};stroke-opacity:1\"\n             id=\"g3270-3-1\"\n             transform=\"translate(-197.49256,28.537202)\">\n            <path\n               style=\"fill:${colors[24]};stroke:${colors[19]};stroke-width:0.08466667;stroke-opacity:1\"\n               d=\"M 34.471432,49.04762 V 13.402951 H 99.029767 163.5881 V 49.04762 84.692288 H 99.029767 34.471432 Z\"\n               id=\"path3286-5-0\" />\n            <path\n               style=\"fill:${colorGlaciar};stroke:${colors[19]};stroke-width:0.08466667;stroke-opacity:1\"\n               d=\"m 34.471431,84.692282 c -6.45045,7.058039 -3.225225,3.529019 0,0 z m 41.50133,-0.109328 c -0.14049,-0.169281 -0.02211,-1.043011 0.164151,-1.211577 0.08562,-0.07748 0.322009,-0.154735 0.525313,-0.171672 0.328131,-0.02733 0.380665,-0.0066 0.46776,0.184546 0.104112,0.228501 0.132815,0.949762 0.04672,1.174112 -0.06608,0.172206 -1.064512,0.192599 -1.203947,0.02459 z m 11.18483,-0.05719 c -0.0095,-0.125595 0.05374,-0.176989 0.257149,-0.209105 0.223119,-0.03523 2.323026,-0.01444 2.534527,0.02509 0.08604,0.01608 0.07784,0.113071 -0.02246,0.265868 -0.07411,0.112889 -0.09278,0.112889 -0.168037,0 -0.07046,-0.105687 -0.09716,-0.107631 -0.159085,-0.01159 -0.06283,0.09744 -0.0816,0.09744 -0.120554,0 -0.03789,-0.09479 -0.06357,-0.09272 -0.143695,0.01159 -0.07366,0.09589 -0.108078,0.101072 -0.140501,0.02117 -0.05099,-0.125668 -0.282832,-0.143018 -0.282832,-0.02117 0,0.04657 -0.04035,0.08467 -0.08966,0.08467 -0.04931,0 -0.06612,-0.0381 -0.03734,-0.08467 0.02878,-0.04657 -0.0071,-0.08467 -0.07967,-0.08467 -0.0726,0 -0.13258,0.04763 -0.133293,0.105833 -8.63e-4,0.07055 -0.02865,0.0635 -0.08337,-0.02117 -0.04514,-0.06985 -0.08266,-0.0878 -0.08337,-0.03988 -6.77e-4,0.0482 -0.207949,0.0897 -0.463965,0.0929 -0.254467,0.0032 -0.442718,-0.0265 -0.418336,-0.06595 0.02438,-0.03945 0.0062,-0.07173 -0.04033,-0.07173 -0.04657,0 -0.108213,0.0381 -0.136993,0.08467 -0.08451,0.136747 -0.174663,0.09753 -0.188176,-0.08186 z m 17.877939,-0.0325 c 0.0126,-0.114443 0.1041,-0.335556 0.20342,-0.491361 0.0993,-0.155805 0.25263,-0.435683 0.34068,-0.621949 0.0881,-0.186267 0.34174,-0.719667 0.56374,-1.185334 0.39533,-0.829266 0.40382,-0.864221 0.41268,-1.700823 0.009,-0.815716 0.0219,-0.874777 0.29458,-1.312333 0.28176,-0.452141 0.2848,-0.467569 0.23123,-1.171099 -0.0622,-0.816759 -0.14408,-0.968301 -0.48295,-0.893872 -0.31874,0.07001 -0.58414,-0.08534 -0.58414,-0.341905 0,-0.225494 0.0773,-0.257012 0.79189,-0.322911 0.51255,-0.04726 0.7191,-0.223756 0.58367,-0.498725 -0.0523,-0.106149 -0.11202,-0.326349 -0.13275,-0.489332 -0.0872,-0.686038 -0.34691,-1.317797 -0.72577,-1.765729 -0.21091,-0.249367 -0.46834,-0.485658 -0.57205,-0.52509 -0.10372,-0.03943 -0.32753,-0.288912 -0.49736,-0.5544 -0.16983,-0.265486 -0.58627,-0.77401 -0.92543,-1.130053 -0.33916,-0.356043 -0.64584,-0.740735 -0.68151,-0.854873 -0.0848,-0.271283 -0.18787,-0.331659 -0.56902,-0.333226 -0.26213,-0.0011 -0.3365,0.03966 -0.44087,0.241483 -0.1089,0.210586 -0.10954,0.263915 -0.005,0.402167 0.0664,0.08766 0.12189,0.19986 0.12337,0.249326 0.003,0.105839 -0.58203,0.111803 -0.74347,0.0076 -0.12562,-0.0811 -0.43917,0.157327 -0.43917,0.333943 0,0.203633 -0.1824,0.222567 -0.31536,0.03274 -0.11856,-0.169275 -0.18424,-0.184468 -0.62479,-0.14452 -0.52446,0.04756 -0.71825,-0.04923 -0.61858,-0.308946 0.0296,-0.0772 0.0107,-0.137732 -0.043,-0.137732 -0.0527,0 -0.13116,-0.09296 -0.17436,-0.206574 -0.08559,-0.225104 -0.504132,-0.384793 -1.010715,-0.38562 -0.406133,-6.77e-4 -1.485696,0.605985 -1.971852,1.108061 -0.219062,0.226236 -0.752462,0.638934 -1.185333,0.917108 -0.778121,0.50004 -1.590383,1.296436 -1.711513,1.678081 -0.03242,0.102154 -0.22507,0.463132 -0.428106,0.802172 -0.364909,0.609344 -0.368129,0.621575 -0.279894,1.062665 0.10433,0.521549 0.02402,0.660182 -0.526213,0.9083 -0.305011,0.13754 -0.350547,0.139036 -0.535883,0.0176 -0.175347,-0.114892 -0.246681,-0.117542 -0.53118,-0.01974 -0.26261,0.09028 -0.343807,0.169897 -0.404167,0.396294 -0.126718,0.47529 -0.09721,0.864889 0.09491,1.253201 0.195886,0.395919 0.184082,0.511783 -0.05214,0.511783 -0.08149,0 -0.222111,0.05594 -0.312503,0.124307 -0.09039,0.06837 -0.244936,0.125519 -0.343431,0.127001 -0.258423,0.0039 -0.62525,0.322008 -0.62525,0.542236 0,0.22041 -0.147283,0.391788 -0.336704,0.391788 -0.07343,0 -0.39816,0.2667 -0.721629,0.592667 -0.323469,0.325967 -0.655181,0.592667 -0.737136,0.592667 -0.09505,0 -0.229604,-0.160957 -0.371575,-0.4445 -0.12241,-0.244475 -0.316098,-0.56912 -0.430417,-0.721435 -0.290819,-0.387474 -0.232246,-0.604926 0.226794,-0.841973 0.262692,-0.135654 0.481082,-0.347403 0.703304,-0.68192 0.18643,-0.280638 0.436282,-0.538875 0.592667,-0.612559 0.252849,-0.119135 0.273105,-0.161538 0.312696,-0.654579 0.05908,-0.735794 0.310589,-0.978257 1.202931,-1.159684 0.358928,-0.07298 0.818469,-0.132684 1.021202,-0.132684 0.245176,0 0.426454,-0.05389 0.541367,-0.160953 0.349687,-0.325783 0.773641,-0.908018 0.941324,-1.292763 0.471532,-1.081918 1.298892,-1.938824 2.582288,-2.674504 0.836531,-0.479524 1.59292,-1.153218 1.829083,-1.629113 0.241353,-0.486354 0.378042,-0.70444 0.629712,-1.004697 0.131398,-0.156766 0.301343,-0.423466 0.377654,-0.592666 0.201472,-0.446712 0.343428,-0.591695 0.53125,-0.542578 0.107502,0.02811 0.164523,1.69e-4 0.164523,-0.08073 0,-0.06806 0.0762,-0.192712 0.169333,-0.276997 0.255897,-0.231584 0.215759,-0.385434 -0.09396,-0.360156 -0.173723,0.01418 -0.295466,-0.02809 -0.357866,-0.124246 -0.07852,-0.120997 -0.03742,-0.199211 0.242125,-0.460769 0.295119,-0.276128 0.315788,-0.31866 0.167367,-0.344395 -0.468249,-0.08119 -0.550334,-0.120186 -0.550334,-0.261447 0,-0.230316 0.169241,-0.349773 0.423496,-0.298922 0.283395,0.05668 0.368856,-0.112065 0.241614,-0.477073 -0.112466,-0.322615 -0.0521,-0.488274 0.190914,-0.523926 0.282085,-0.04138 0.275753,-0.178695 -0.0159,-0.344714 -0.366456,-0.208603 -0.318986,-0.508593 0.09121,-0.576369 0.162983,-0.02693 0.391587,-0.101459 0.507997,-0.165618 l 0.21167,-0.116655 -0.254,-0.06411 c -0.1397,-0.03526 -0.353952,-0.08458 -0.476116,-0.109612 -0.150912,-0.03092 -0.257163,-0.134062 -0.331445,-0.32175 -0.06013,-0.151934 -0.163935,-0.340517 -0.230678,-0.419075 -0.06674,-0.07856 -0.09952,-0.178151 -0.07284,-0.221318 0.07922,-0.128175 -0.271596,-0.765561 -0.50583,-0.919038 -0.119289,-0.07816 -0.409772,-0.192144 -0.645518,-0.253296 -0.236468,-0.06134 -0.482324,-0.187845 -0.548401,-0.282184 -0.06587,-0.09405 -0.168641,-0.170999 -0.228368,-0.170999 -0.05973,0 -0.22994,-0.13335 -0.378252,-0.296334 -0.148311,-0.162983 -0.300017,-0.296333 -0.337124,-0.296333 -0.142473,0 -0.858613,-0.766497 -1.029982,-1.102408 -0.210979,-0.413553 -0.244615,-0.412285 -1.23818,0.04665 -0.586999,0.27114 -0.652212,0.284071 -0.903303,0.179113 -0.148846,-0.06222 -0.321,-0.173865 -0.382565,-0.248103 -0.131973,-0.159137 -0.102663,-0.647733 0.04844,-0.807466 0.05821,-0.06153 0.105833,-0.184481 0.105833,-0.273216 0,-0.196056 -0.349611,-0.442213 -0.529839,-0.373052 -0.0717,0.02751 -0.155518,0.0093 -0.186261,-0.04041 -0.03074,-0.04974 -0.131388,-0.09044 -0.223659,-0.09044 -0.09227,0 -0.276594,-0.08046 -0.409607,-0.178802 -0.133013,-0.09834 -0.357446,-0.184616 -0.498737,-0.191722 -0.141293,-0.0071 -0.284921,-0.04095 -0.319174,-0.0752 -0.03425,-0.03425 -0.128804,-0.06228 -0.210111,-0.06228 -0.203344,0 -0.988437,-0.510799 -1.347946,-0.877003 C 88.947005,55.987791 88.78358,55.940494 87.726611,55.91773 86.859818,55.89906 86.831795,55.89229 86.604777,55.646772 86.457259,55.48705 86.3721,55.300848 86.3721,55.137669 c 0,-0.144413 -0.187517,-0.616767 -0.427442,-1.076725 -0.36427,-0.698337 -0.419645,-0.865603 -0.374679,-1.131752 0.02902,-0.171769 0.106427,-0.332899 0.172015,-0.358068 0.06559,-0.02517 0.09976,-0.09654 0.07595,-0.158611 -0.04463,-0.116315 0.356812,-0.527454 0.517485,-0.52998 0.04968,-7.62e-4 0.220865,-0.143656 0.380414,-0.3175 0.287475,-0.313233 0.502927,-0.406748 0.502927,-0.218291 0,0.05421 0.08097,0.02592 0.181703,-0.0635 0.131377,-0.116617 0.192004,-0.131831 0.218898,-0.05493 0.02046,0.0585 0.0695,0.0864 0.108973,0.062 0.03948,-0.0244 0.255298,-0.0788 0.479602,-0.120899 0.359883,-0.06754 0.437682,-0.05415 0.661824,0.113913 0.431876,0.323824 0.826733,0.48971 0.896591,0.376676 0.03378,-0.05465 0.04289,-0.147622 0.02026,-0.206606 -0.02591,-0.06752 0.04615,-0.117407 0.194545,-0.134678 0.178277,-0.02075 0.310497,-0.140881 0.542719,-0.493099 0.550519,-0.83499 1.067904,-1.645397 1.228171,-1.923751 0.08637,-0.150012 0.263307,-0.309795 0.393189,-0.355072 0.129883,-0.04528 0.981498,-0.64644 1.892479,-1.335917 1.814635,-1.373409 3.372571,-2.441771 3.770398,-2.585571 0.07316,-0.02644 0.339858,-0.336576 0.592667,-0.689184 0.330524,-0.461002 0.563118,-0.692612 0.827952,-0.824456 0.24513,-0.122034 0.396853,-0.26526 0.453679,-0.428274 0.04696,-0.134706 0.194757,-0.301482 0.32844,-0.370612 0.26919,-0.139205 2.10925,-1.948459 2.10925,-2.07394 0,-0.100183 -0.63453,-0.504557 -0.79173,-0.504557 -0.1416,0 -2.601999,1.080809 -2.720212,1.194939 -0.04562,0.04404 -0.14328,0.234402 -0.217028,0.423023 -0.122558,0.313463 -0.196332,0.370663 -0.858046,0.665287 -0.460808,0.205171 -0.801908,0.307437 -0.938407,0.281343 -0.134712,-0.02575 -0.58031,0.103718 -1.198424,0.348207 -0.778467,0.307915 -1.088699,0.389201 -1.485401,0.389201 -0.275785,0 -0.518428,-0.02857 -0.539207,-0.0635 -0.02078,-0.03493 -0.122961,-0.5588 -0.227069,-1.164167 -0.104109,-0.605367 -0.219928,-1.181564 -0.257375,-1.280438 -0.0819,-0.216254 -0.414956,-0.315471 -0.697885,-0.207901 -0.178322,0.0678 -0.213408,0.149947 -0.262225,0.613971 -0.1831,1.740431 -0.208438,1.824818 -0.9742,3.244614 -0.368868,0.683916 -0.621658,1.015375 -1.312334,1.720738 -0.806458,0.823608 -2.219593,1.963137 -3.122906,2.518262 -0.222629,0.136815 -0.542193,0.353529 -0.710143,0.481588 -0.167949,0.128058 -0.389467,0.232833 -0.492263,0.232833 -0.192714,0 -0.467147,0.237356 -0.467147,0.404033 0,0.0519 -0.08402,0.153215 -0.186712,0.225143 -0.169528,0.118742 -0.17732,0.15675 -0.08467,0.412979 0.215136,0.594947 0.01348,1.087992 -0.48583,1.187854 -0.186693,0.03734 -0.286463,0.127657 -0.374947,0.339431 -0.06631,0.158706 -0.162554,0.314505 -0.213872,0.346221 -0.05132,0.03172 -0.09331,0.245317 -0.09331,0.474667 0,0.34002 0.04509,0.467466 0.244253,0.690368 0.221034,0.24738 0.264971,0.263927 0.462194,0.174066 0.193911,-0.08835 0.236994,-0.07508 0.390746,0.120388 0.09504,0.120827 0.174018,0.281223 0.175499,0.356435 0.0015,0.07521 0.05863,0.210706 0.127,0.301098 0.185691,0.245505 0.161862,0.91842 -0.03896,1.10016 -0.232599,0.210498 -0.436623,0.114398 -0.894191,-0.421192 -0.314134,-0.367697 -0.446476,-0.462317 -0.646628,-0.462317 -0.307176,0 -0.711968,-0.198847 -0.783322,-0.384793 -0.09916,-0.258406 -0.05255,-0.66026 0.09557,-0.823928 0.11461,-0.126642 0.149194,-0.319905 0.1527,-0.853333 0.0036,-0.550244 0.04273,-0.758057 0.193534,-1.02828 0.270111,-0.484004 0.639375,-0.980415 0.793433,-1.06663 0.07271,-0.04069 0.156121,-0.201457 0.185349,-0.357254 0.05585,-0.29768 0.177198,-0.428499 0.833984,-0.899034 0.411437,-0.294762 0.464599,-0.407891 0.319279,-0.679425 -0.111272,-0.207914 0.09485,-0.378594 0.372933,-0.308801 0.323268,0.08113 0.330258,-0.07605 0.01566,-0.352266 C 85.22813,47.470123 84.983695,47.355684 84.751908,47.3208 84.431041,47.27251 84.312329,47.187806 83.849725,46.677052 83.259783,46.025708 82.89383,45.85807 82.253482,45.94584 81.884724,45.99638 81.80009,45.9274 81.80009,45.576266 c 0,-0.08892 -0.135948,-0.238185 -0.3175,-0.348602 -0.174625,-0.106204 -0.572932,-0.437729 -0.885127,-0.736723 -0.489814,-0.469103 -0.598282,-0.53593 -0.791265,-0.487494 -0.246058,0.06176 -0.461442,-0.06467 -0.461442,-0.270859 0,-0.174644 -0.387607,-0.984586 -0.526249,-1.099648 -0.06099,-0.05062 -0.262814,-0.104401 -0.448491,-0.119513 -0.279148,-0.02272 -0.360071,-0.07243 -0.467435,-0.287158 -0.163248,-0.326495 -0.465266,-0.713984 -0.556496,-0.713984 -0.03812,0 -0.153387,0.104775 -0.256159,0.232833 -0.185199,0.230767 -0.18936,0.23157 -0.468846,0.09048 -0.155095,-0.07829 -0.367756,-0.166599 -0.47258,-0.196234 -0.104825,-0.02963 -0.225914,-0.119884 -0.269088,-0.200555 -0.159448,-0.297932 -0.0898,-1.702031 0.09592,-1.933549 0.11839,-0.14759 1.150048,-0.702309 1.306145,-0.702309 0.07272,0 0.328584,-0.05738 0.568585,-0.127508 0.357879,-0.104573 0.504891,-0.21155 0.817364,-0.594768 0.291789,-0.357851 0.421858,-0.45742 0.555492,-0.425231 0.312006,0.07516 0.755195,-0.112903 1.084127,-0.460025 0.177098,-0.186891 0.366406,-0.345195 0.420688,-0.351787 0.05428,-0.0066 0.193943,-0.01612 0.31036,-0.02117 0.198321,-0.0086 0.218101,-0.05189 0.313725,-0.686514 0.05613,-0.372533 0.129031,-0.904034 0.161998,-1.181113 0.05857,-0.492252 0.07475,-0.517829 0.707001,-1.117881 0.355882,-0.337756 0.747455,-0.693074 0.870162,-0.789596 0.413368,-0.325155 0.388103,-0.476189 -0.175454,-1.048857 -0.65981,-0.670478 -0.757965,-1.0355 -0.355507,-1.322075 0.188946,-0.134542 0.33696,-0.175801 0.507973,-0.141599 0.164746,0.03295 0.277263,0.0049 0.354551,-0.08826 0.135009,-0.162798 0.591305,-0.364291 0.824965,-0.364291 0.111804,0 0.28623,0.181572 0.528677,0.550334 0.199003,0.302683 0.393109,0.550333 0.431347,0.550333 0.03824,0 0.257492,-0.09525 0.487229,-0.211667 0.504919,-0.255862 0.726461,-0.266939 0.846666,-0.04233 0.171262,0.320004 0.864439,0.135073 0.737141,-0.196661 -0.02409,-0.06278 -0.83798,-0.396643 -1.808639,-0.741911 L 83.7051,29.362618 69.565766,29.308715 c -7.776633,-0.02965 -14.215533,-0.05584 -14.308667,-0.0582 -0.09313,-0.0024 -2.998258,0.0146 -6.455833,0.03769 -7.093413,0.04738 -6.496708,0.109312 -6.063783,-0.629419 0.196103,-0.334624 0.216944,-0.441873 0.174398,-0.897482 -0.07153,-0.76596 -0.09137,-0.793039 -0.630368,-0.860383 -0.515746,-0.06444 -0.640438,-0.0184 -0.903112,0.333419 l -0.171195,0.229298 0.237939,0.189726 c 0.257227,0.205106 0.504566,0.89465 0.504996,1.407854 2.12e-4,0.255894 -0.08928,0.376662 -0.736827,0.994346 -0.405389,0.386691 -0.859428,0.764992 -1.008976,0.840669 -0.551266,0.27896 -0.806791,0.814202 -0.537895,1.126715 0.175152,0.203563 0.301355,0.649172 0.246037,0.868727 -0.06223,0.246995 -0.504102,1.04273 -0.643072,1.158064 -0.05736,0.04761 -0.440736,0.184054 -0.85194,0.303217 -0.675023,0.195613 -0.891235,0.216659 -2.225888,0.216659 -1.174757,0 -1.503311,-0.02507 -1.600346,-0.122103 -0.105179,-0.105179 -0.118086,-1.352052 -0.09312,-8.995834 0.01594,-4.880552 0.05363,-9.007081 0.08375,-9.170064 0.04204,-0.227485 0.03754,-0.247156 -0.01939,-0.08467 -0.04826,0.137735 -0.07711,-0.29846 -0.0826,-1.248833 l -0.0084,-1.4605 h 0.497633 c 0.581304,0 0.647022,0.05599 0.776976,0.661941 0.105916,0.493872 0.180098,0.52257 0.889232,0.344008 0.351285,-0.08845 0.376159,-0.113452 0.376159,-0.378022 0,-0.318388 0.174317,-0.458594 0.570167,-0.458594 0.133448,0 0.290369,-0.04763 0.348713,-0.105833 0.156269,-0.155906 11.689514,-0.105729 11.847377,0.05154 0.10511,0.104718 0.544642,1.519066 0.655175,2.108255 0.07027,0.374594 -0.08119,0.929288 -0.334019,1.223215 l -0.199455,0.23188 -0.538478,-0.112003 c -0.687118,-0.142919 -2.008274,-0.347762 -2.624182,-0.406874 -0.5036,-0.04833 -0.549341,-0.03204 -2.322508,0.827232 -0.579267,0.280712 -1.417044,0.987416 -1.60776,1.356219 -0.06987,0.135105 -0.196358,0.245033 -0.281955,0.245033 -0.08539,0 -0.322531,0.13298 -0.526993,0.295512 -0.204462,0.162531 -0.419373,0.295881 -0.477582,0.296333 -0.05821,4.49e-4 -0.105833,0.03164 -0.105833,0.06931 0,0.171098 0.253964,0.359482 0.75543,0.56036 0.496675,0.198959 0.650046,0.217822 1.771066,0.217822 0.675015,0 1.45902,0.03647 1.742236,0.08105 0.283214,0.04457 0.906632,0.125205 1.385374,0.179177 l 0.870439,0.09813 0.408166,0.434656 c 0.954776,1.016743 1.041208,1.14396 1.326429,1.952355 0.359746,1.019614 0.476853,1.241305 0.864681,1.636888 0.174082,0.177562 0.479159,0.500976 0.677949,0.718698 l 0.361438,0.395858 0.908562,-0.0179 0.908563,-0.0179 0.02531,-0.258764 c 0.05276,-0.539448 -0.287424,-0.945728 -0.403972,-0.482464 -0.06255,0.248633 -0.474102,0.552472 -0.665879,0.491604 -0.461749,-0.146553 -0.691123,-0.722622 -0.691123,-1.735744 0,-0.792974 0.06425,-0.935633 0.421398,-0.935633 0.219708,0 0.763935,0.418815 0.763935,0.587895 0,0.04919 0.05715,0.08944 0.127,0.08944 0.09072,0 0.126347,-0.0907 0.124711,-0.3175 -0.0016,-0.225673 -0.174726,-0.648077 -0.598505,-1.4605 -0.576922,-1.106012 -0.601375,-1.177809 -0.75566,-2.218668 -0.156162,-1.053525 -0.156161,-1.102327 8.5e-5,-2.370667 l 0.159562,-1.294999 -0.628389,-1.119208 c -0.345612,-0.615565 -0.638306,-1.168015 -0.650428,-1.227667 -0.01212,-0.05965 -0.06014,-0.13645 -0.106709,-0.170662 -0.04657,-0.03421 4.458758,-0.06279 10.011833,-0.0635 5.553075,-7.13e-4 10.090902,0.02728 10.084061,0.0622 -0.04771,0.243534 0.191903,0.895782 0.676299,1.840941 0.562523,1.097602 0.565352,1.101204 1.241772,1.580945 l 0.677965,0.480836 1.4274,0.267624 c 0.78507,0.147193 1.458537,0.235869 1.496594,0.197056 0.03806,-0.03881 0.26444,-0.705168 0.503075,-1.48079 l 0.433881,-1.410221 -0.344552,-0.685279 c -0.189502,-0.376903 -0.315551,-0.685862 -0.280106,-0.686575 0.03544,-7.14e-4 0.0073,-0.03823 -0.06256,-0.08337 -0.08344,-0.05392 0.814316,-0.08252 2.617612,-0.08337 1.509535,-7.13e-4 2.719127,0.02419 2.687981,0.05533 -0.03115,0.03115 -0.0024,0.116871 0.06387,0.1905 0.178785,0.198633 0.433466,0.895021 0.597083,1.63264 0.07956,0.358657 0.192098,0.691483 0.250093,0.739615 0.09524,0.07904 1.258175,0.412785 2.123032,0.609274 0.328927,0.07473 0.635029,0.169122 2.016057,0.621692 0.576008,0.18876 0.747865,0.209529 1.331223,0.160879 0.495234,-0.0413 0.706949,-0.09688 0.812232,-0.213212 0.143557,-0.15863 0.782386,-0.221276 1.082411,-0.106145 0.2265,0.08692 0.06215,0.194116 -0.226974,0.148043 -0.4622,-0.07365 -0.707478,0.07587 -0.770449,0.469667 -0.04315,0.269847 -0.110375,0.372147 -0.313612,0.477245 -0.492809,0.254842 -0.170815,0.400394 0.556445,0.251533 0.201187,-0.04118 0.303297,-0.0055 0.491086,0.171527 0.17303,0.163129 0.213333,0.252136 0.149171,0.329445 -0.112323,0.135342 -0.744283,0.32686 -0.854263,0.258889 -0.04594,-0.02839 -0.103815,0.0013 -0.128617,0.06589 -0.08899,0.231919 0.310194,0.931839 1.075578,1.885864 0.733149,0.913845 0.796602,0.97069 1.08356,0.97069 0.167645,0 0.391124,-0.06046 0.496621,-0.134352 0.175478,-0.122909 0.209757,-0.122595 0.402489,0.0037 0.170785,0.111903 0.417188,0.135136 1.301366,0.122709 0.599879,-0.0084 1.12267,-0.03867 1.161755,-0.06719 0.03909,-0.02852 0.169267,-0.204258 0.289293,-0.390525 0.120026,-0.186266 0.329214,-0.510116 0.464863,-0.719666 0.271651,-0.419647 0.437882,-0.763529 0.425278,-0.879773 -0.0097,-0.08962 0.110781,-0.157175 0.64767,-0.363098 0.419309,-0.160826 0.522943,-0.350148 0.233151,-0.425931 -0.110359,-0.02886 -0.169334,-0.115486 -0.169334,-0.24873 0,-0.238581 0.202922,-0.346927 0.377852,-0.201748 0.08031,0.06666 0.379421,0.09165 0.879624,0.07351 0.649745,-0.02357 0.783285,-0.0045 0.93556,0.133263 0.0977,0.08841 0.177631,0.193047 0.177631,0.232518 0,0.08425 0.65382,0.691981 0.793411,0.737482 0.05257,0.01714 0.267039,0.138359 0.476589,0.269382 0.34993,0.218798 1.03711,0.497159 2.96333,1.200379 0.39582,0.144503 0.76591,0.304062 0.82242,0.354574 0.14883,0.133016 -1.03041,3.246384 -1.95745,5.168008 -0.40336,0.836092 -0.72188,1.579042 -0.70783,1.651 0.0141,0.07196 0.10979,0.131933 0.21275,0.133276 0.24193,0.0032 0.37981,0.144041 0.31254,0.319348 -0.0425,0.110791 -0.12767,0.128222 -0.42639,0.08728 -0.34928,-0.04787 -0.39229,-0.03099 -0.66932,0.262746 -0.16283,0.172649 -0.29631,0.33977 -0.29663,0.37138 -3.4e-4,0.03161 -0.13367,0.148108 -0.296332,0.258885 -0.162665,0.110778 -0.295755,0.247747 -0.295755,0.304378 0,0.05663 -0.07836,0.173877 -0.174129,0.260549 -0.124273,0.112466 -0.159201,0.217064 -0.121989,0.365325 0.04588,0.182805 0.809075,1.350096 1.368875,2.09366 0.31886,0.423533 0.271,0.486917 -0.5708,0.755939 -0.422417,0.134997 -0.790177,0.281275 -0.817238,0.325062 -0.02706,0.04379 0.05186,0.15323 0.175372,0.243205 l 0.224576,0.163592 v 1.347606 c 0,0.741182 0.0322,1.347604 0.07154,1.347604 0.03935,0 0.141811,-0.07764 0.227692,-0.17254 0.162128,-0.17915 0.400768,-0.175715 0.892978,0.01285 0.36526,0.139936 0.83979,0.778991 0.83979,1.13097 0,0.366323 0.15528,0.451972 0.45882,0.25308 0.2025,-0.132683 0.23393,-0.133064 0.42905,-0.0052 0.20551,0.134658 0.21013,0.160651 0.19327,1.089238 -0.0171,0.940056 -0.0135,0.958969 0.29747,1.601905 l 0.31472,0.650618 v 2.090805 c 0,2.017272 -0.007,2.111444 -0.21167,2.677596 -0.28583,0.792395 -0.27518,1.016276 0.0635,1.335334 0.30019,0.282786 0.3702,0.284462 1.20963,0.02895 0.40397,-0.122961 0.48504,-0.118219 1.53708,0.0899 l 1.11061,0.219711 0.72929,-0.336934 c 0.40112,-0.185315 0.804,-0.336936 0.8953,-0.336936 0.11168,0 0.29208,0.191378 0.55131,0.584864 l 0.38531,0.584863 -0.26047,1.087303 c -0.45896,1.915908 -0.60792,2.329308 -1.37495,3.815926 -0.41392,0.802241 -0.72868,1.497302 -0.69946,1.544579 0.0292,0.04728 0.10356,0.280396 0.1652,0.518044 0.101,0.389348 0.0957,0.475244 -0.0533,0.86842 -0.091,0.239984 -0.32445,0.882022 -0.51888,1.426753 -0.40231,1.127144 -0.38477,1.243617 0.16443,1.091974 0.28541,-0.0788 0.34799,-0.06876 0.49642,0.07967 0.15671,0.156705 0.15995,0.187471 0.0419,0.397716 -0.10095,0.179862 -0.22797,0.247919 -0.60288,0.323022 -0.86668,0.173614 -0.98517,0.293068 -1.36108,1.372138 -0.31912,0.916066 -0.32682,0.963255 -0.19899,1.219507 0.0731,0.146613 0.13298,0.303028 0.13298,0.347591 0,0.04456 -0.16699,0.319903 -0.37108,0.611868 -0.2041,0.291965 -0.34698,0.569558 -0.3175,0.616873 0.0295,0.04732 0.21788,0.130179 0.41869,0.184142 0.22922,0.0616 0.49925,0.230296 0.72553,0.453262 0.4684,0.46156 0.9837,1.117059 0.9837,1.251343 0,0.05813 0.0223,0.08341 0.0495,0.05616 0.0734,-0.07336 0.54887,0.107456 0.83947,0.319207 0.37029,0.269824 1.02795,0.477892 1.60866,0.508946 0.61584,0.03293 1.48824,0.253199 1.5809,0.399154 0.27306,0.430096 -0.49569,0.913283 -1.16084,0.729628 -0.24798,-0.06847 -0.3474,-0.05318 -0.57707,0.08876 -0.1526,0.09431 -0.34753,0.248913 -0.43318,0.343549 -0.0856,0.09464 -0.23254,0.172067 -0.32643,0.172067 -0.36306,0 -0.45642,0.203154 -0.37912,0.824982 0.0391,0.31461 0.0513,0.655319 0.027,0.757133 -0.0677,0.284113 0.11677,1.008665 0.32252,1.266801 0.10132,0.127117 0.26317,0.385838 0.35966,0.574936 0.14519,0.284546 0.22434,0.348578 0.45916,0.37144 0.15606,0.01519 0.36286,-0.0081 0.45957,-0.05176 0.80314,-0.36262 0.76992,-0.357445 1.1133,-0.173405 0.23403,0.125433 0.40693,0.158188 0.63907,0.121066 0.17935,-0.02868 0.34113,-0.01386 0.37068,0.03396 0.0289,0.04667 0.12774,0.08485 0.21976,0.08485 0.24743,0 0.53972,0.220052 0.7854,0.591295 0.16563,0.250289 0.28241,0.33533 0.48836,0.355657 0.2135,0.02107 0.30921,0.09576 0.45303,0.353557 0.22939,0.411175 0.42021,0.525794 0.67904,0.407865 0.1455,-0.0663 0.23312,-0.05873 0.35059,0.03026 0.2375,0.179935 0.42157,0.150935 1.09361,-0.172302 0.33885,-0.162984 0.67184,-0.296334 0.73997,-0.296334 0.0681,0 0.18629,0.09525 0.26257,0.211667 0.18225,0.27815 0.34497,0.267852 0.46819,-0.02963 0.0563,-0.135786 0.32914,-0.400572 0.62411,-0.605554 0.46151,-0.320727 0.60812,-0.374872 1.22678,-0.453071 0.62792,-0.07937 0.73369,-0.07208 0.99483,0.06855 0.35136,0.189221 0.38635,0.343323 0.0594,0.26153 -0.61133,-0.152926 -0.7751,-0.148106 -1.02549,0.03018 -0.13791,0.0982 -0.50176,0.256083 -0.80856,0.350844 -0.49654,0.153366 -0.57659,0.209091 -0.72872,0.507281 -0.20836,0.408424 -0.31045,1.05166 -0.17973,1.13245 0.051,0.03149 0.2853,0.08007 0.52078,0.107956 0.3553,0.04208 0.4601,0.02172 0.61585,-0.119639 0.10324,-0.09369 0.28786,-0.193965 0.41027,-0.22283 0.33895,-0.07992 0.97145,0.149488 1.34661,0.488422 0.22056,0.199262 0.41955,0.303838 0.57815,0.303838 0.29068,0 1.02767,0.609484 1.02767,0.849882 0,0.172909 -0.42978,0.334131 -0.89296,0.334978 -0.36309,6.78e-4 -1.68442,-0.294104 -2.83237,-0.63186 -0.89082,-0.262098 -1.86667,-0.417274 -2.62467,-0.417361 -0.16298,-1.9e-5 -0.54398,0.11919 -0.84667,0.264908 -0.5173,0.249041 -0.88273,0.344257 -1.48166,0.386058 -0.20858,0.01456 -0.28807,0.08528 -0.4445,0.395501 -0.10478,0.207776 -0.1905,0.489105 -0.1905,0.625177 0,0.387303 0.18561,0.910637 0.39849,1.123508 0.10679,0.106798 0.19417,0.289819 0.19417,0.406715 0,0.125884 0.069,0.249484 0.16934,0.30316 0.18232,0.09758 0.24393,0.621238 0.0847,0.719667 -0.25782,0.159342 0.0494,0.92334 0.4828,1.200735 0.30534,0.195423 0.44248,0.369056 0.44585,0.56447 0.006,0.339501 0.28355,0.734466 0.69401,0.987024 0.27385,0.168501 0.4707,0.367849 0.5662,0.573373 0.0805,0.173286 0.23041,0.448415 0.33312,0.611398 0.41918,0.665233 0.12533,0.803707 -0.32064,0.151096 -0.52254,-0.76465 -1.094,-1.327504 -1.40752,-1.386322 -0.3042,-0.05707 -0.33712,-0.11938 -0.19921,-0.377061 0.0745,-0.139154 0.0432,-0.179945 -0.22306,-0.291207 -0.301,-0.125763 -0.77604,-0.489015 -1.22869,-0.93954 -0.15357,-0.152855 -0.28145,-0.447268 -0.41429,-0.953865 -0.39957,-1.523697 -0.76684,-2.774441 -0.89309,-3.041414 -0.12118,-0.256247 -0.15389,-0.272996 -0.44365,-0.22716 -0.17205,0.02722 -0.8499,0.05646 -1.50631,0.06498 -1.43961,0.01869 -1.47352,0.03604 -1.47352,0.753933 0,0.432371 -0.044,0.577359 -0.3024,0.995968 -0.18049,0.292428 -0.38654,0.809539 -0.51113,1.282761 -0.2996,1.137989 -0.44958,1.570716 -0.58266,1.681167 -0.0643,0.05337 -0.14027,0.203327 -0.1688,0.333242 -0.0285,0.129915 -0.18338,0.440322 -0.34411,0.689794 -0.18475,0.28676 -0.29223,0.557887 -0.29223,0.737174 0,0.155973 -0.047,0.366808 -0.10443,0.468521 -0.0574,0.101714 -0.10506,0.280184 -0.10583,0.396601 -10e-4,0.18754 -0.0416,0.214595 -0.35428,0.237361 -0.33038,0.02406 -0.35142,0.01243 -0.33003,-0.182384 z m -4.31715,-13.763337 c 0.14901,-0.241105 -0.186,-0.437329 -0.4555,-0.266797 -0.10074,0.06375 -0.10259,0.09977 -0.0108,0.21037 0.12116,0.145995 0.39078,0.178621 0.4663,0.05643 z M 89.095933,41.287497 c 0.08516,-0.07707 0.154834,-0.170864 0.154834,-0.208436 0,-0.03757 0.128938,-0.345993 0.28653,-0.685378 0.612745,-1.319596 0.72947,-1.582388 0.72947,-1.642321 0,-0.179731 0.307226,-0.371743 0.594802,-0.371743 0.241385,0 0.450055,-0.09688 0.897044,-0.41646 0.320368,-0.229053 0.705229,-0.533853 0.855248,-0.677334 0.150019,-0.14348 0.32215,-0.260873 0.382513,-0.260873 0.06036,0 0.24418,-0.09135 0.408482,-0.202992 0.261039,-0.177381 0.312639,-0.272967 0.408964,-0.757578 0.10023,-0.504256 0.152199,-0.594275 0.572644,-0.991914 0.403266,-0.381392 0.495016,-0.430806 0.71734,-0.386342 0.387687,0.07754 0.768365,-0.149561 0.734953,-0.438446 -0.02044,-0.176687 -0.08157,-0.237149 -0.273338,-0.270326 -0.296937,-0.05137 -0.377902,-0.215149 -0.137447,-0.278029 0.119844,-0.03134 0.172795,-0.114873 0.172795,-0.272592 0,-0.125073 0.0762,-0.324278 0.169333,-0.442678 0.09313,-0.1184 0.169334,-0.262903 0.169334,-0.321117 0,-0.11658 -0.265303,-0.311004 -0.846667,-0.620469 -0.20955,-0.111545 -0.43815,-0.248857 -0.508,-0.305138 -0.219856,-0.177144 -3.787774,-2.332379 -3.861175,-2.332379 -0.03847,0 -0.59398,0.347565 -1.234456,0.772367 -1.188378,0.788204 -1.195473,0.790737 -1.741203,0.621593 -0.232206,-0.07197 -0.257287,0.126981 -0.06298,0.499552 0.101069,0.193791 0.126478,0.618639 0.126478,2.114732 0,1.427827 0.03347,2.027992 0.141024,2.52848 l 0.141023,0.65626 -0.437357,0.46244 c -0.479798,0.507316 -0.475194,0.497676 -0.349711,0.732142 0.06819,0.127409 0.178958,0.163768 0.498941,0.163768 0.292238,0 0.42578,0.03774 0.461331,0.130385 0.02752,0.07171 0.04806,0.709886 0.04565,1.418166 -0.0045,1.317497 0.02294,1.516339 0.24476,1.774615 0.159578,0.185805 0.339451,0.18849 0.538841,0.008 z M 39.339765,22.354067 c 0.26782,-0.07715 0.433821,-0.175212 0.451881,-0.26695 0.02638,-0.133996 0.0372,-0.133294 0.142467,0.0092 0.08113,0.109854 0.140397,0.1282 0.205907,0.06373 0.08612,-0.08475 -0.05004,-0.654102 -0.251712,-1.052479 -0.08651,-0.170902 -0.577024,-0.124963 -0.800137,0.07494 -0.272626,0.244262 -0.363285,0.277649 -0.952257,0.350692 -0.712445,0.08835 -0.877018,0.327917 -0.558854,0.813497 0.13584,0.207318 0.169447,0.215176 0.740834,0.173216 0.329196,-0.02417 0.789038,-0.09883 1.021871,-0.165894 z m -4.727593,-6.686283 c -0.02349,-0.05821 -0.0427,-0.01058 -0.0427,0.105834 0,0.116416 0.01922,0.164041 0.0427,0.105833 0.02349,-0.05821 0.02349,-0.153458 0,-0.211667 z m 77.640498,68.951747 c -0.34215,-0.134824 -0.1,-0.217189 0.6834,-0.232433 0.93964,-0.01828 1.13146,0.01277 1.06989,0.173226 -0.0496,0.129388 -0.45503,0.13379 -0.4571,0.005 -9e-4,-0.05644 -0.0221,-0.05644 -0.0636,0 -0.0823,0.112085 -0.46915,0.152819 -0.40079,0.04221 0.0287,-0.0465 -0.007,-0.08454 -0.0797,-0.08454 -0.0726,0 -0.13199,0.0381 -0.13199,0.08467 0,0.04657 -0.0594,0.08467 -0.132,0.08467 -0.0726,0 -0.10845,-0.0381 -0.0797,-0.08467 0.0288,-0.04657 0.012,-0.08467 -0.0373,-0.08467 -0.0493,0 -0.0897,0.0381 -0.0897,0.08467 0,0.09624 -0.0609,0.09881 -0.28143,0.01191 z M 142.41,84.55152 c -0.0517,-0.06228 -0.18047,-0.113232 -0.28621,-0.113232 -0.10573,0 -0.21357,-0.0556 -0.23965,-0.123557 -0.0525,-0.136955 -0.60226,-0.431742 -1.60785,-0.862243 -0.43974,-0.188252 -0.89756,-0.310637 -1.35756,-0.362907 -0.38173,-0.04338 -1.13548,-0.161128 -1.67498,-0.261672 -1.29269,-0.240909 -1.62732,-0.450277 -1.91802,-1.200054 -0.11385,-0.293645 -0.23076,-0.75848 -0.25981,-1.032965 l -0.0528,-0.499064 -0.35617,-0.104757 c -0.1959,-0.05761 -0.50115,-0.219579 -0.67835,-0.359918 -0.33914,-0.268603 -0.79111,-0.366715 -2.24157,-0.486587 -0.66776,-0.05519 -0.89419,-0.174839 -0.79922,-0.422332 0.0418,-0.108947 0.16435,-0.121351 0.75031,-0.07595 1.55283,0.120318 2.13665,0.244243 2.49057,0.528661 0.18196,0.146232 0.5394,0.327394 0.79431,0.402582 0.64207,0.18939 0.66483,0.218053 0.61865,0.779039 -0.0481,0.584404 0.2337,1.392196 0.57445,1.646594 0.23308,0.174025 1.33189,0.411182 2.78402,0.600875 0.7641,0.09982 1.0373,0.183299 1.94452,0.594193 l 1.05551,0.478061 h 6.83965 c 4.11944,0 6.83966,-0.03106 6.83966,-0.07809 0,-0.06757 -0.69924,-0.307638 -2.0108,-0.690366 -0.56617,-0.165212 -4.42209,-3.369308 -4.95776,-4.119679 -0.46078,-0.645462 -0.66397,-0.884901 -0.71099,-0.837873 -0.034,0.03397 0.36369,1.104566 0.49155,1.323343 0.35712,0.611062 0.44399,0.859494 0.48105,1.375662 0.0368,0.513474 0.0183,0.605641 -0.18323,0.910167 -0.25899,0.391377 -0.44374,0.424803 -0.87494,0.158306 -0.21763,-0.1345 -0.28085,-0.223601 -0.24794,-0.349443 0.0243,-0.0929 -0.0102,-0.251835 -0.0766,-0.35319 -0.0919,-0.140214 -0.10077,-0.253919 -0.0372,-0.475499 0.1505,-0.524752 0.10639,-0.654958 -0.38215,-1.128133 -0.25611,-0.248063 -0.46566,-0.494669 -0.46566,-0.548013 0,-0.05334 -0.16503,-0.174561 -0.36673,-0.26937 -0.2017,-0.09481 -0.4735,-0.31408 -0.60398,-0.487267 -0.1305,-0.173188 -0.4014,-0.416807 -0.60199,-0.541376 -0.23089,-0.14338 -0.43209,-0.360857 -0.54833,-0.592667 -0.20745,-0.413741 -0.56973,-0.831844 -0.72077,-0.831844 -0.0554,0 -0.14788,0.05673 -0.20543,0.126068 -0.13449,0.162061 -0.22908,0.09931 -0.37434,-0.248337 -0.0643,-0.154012 -0.31142,-0.49471 -0.54905,-0.757106 -0.41719,-0.460672 -0.43205,-0.494317 -0.43205,-0.978043 0,-0.433752 0.0284,-0.523335 0.21205,-0.667754 0.11663,-0.09174 0.23585,-0.285797 0.26494,-0.431241 0.0291,-0.145444 0.0861,-0.28495 0.12662,-0.310013 0.14343,-0.08865 0.0711,-0.204907 -0.12758,-0.204907 -0.2771,0 -0.40163,-0.180243 -0.37702,-0.54571 0.017,-0.252729 -0.0247,-0.346509 -0.22961,-0.515679 -0.13772,-0.113725 -0.33443,-0.229942 -0.43713,-0.25826 -0.15729,-0.04336 -0.17895,-0.09359 -0.13737,-0.318419 0.0272,-0.146812 0.1936,-0.533632 0.36991,-0.859599 0.1763,-0.325967 0.41273,-0.764117 0.5254,-0.973667 0.11267,-0.20955 0.43424,-0.8001 0.7146,-1.312333 l 0.50973,-0.931334 0.23111,-1.947333 c 0.48152,-4.057261 0.53773,-4.390337 1.27014,-7.526172 l 0.72953,-3.123505 -0.89901,-2.376638 c -0.49445,-1.307151 -0.9908,-2.557783 -1.10299,-2.779181 -0.11219,-0.221399 -0.20399,-0.462222 -0.20399,-0.535164 0,-0.07294 -0.40781,-1.188634 -0.90624,-2.479314 -0.84051,-2.176469 -0.90505,-2.385574 -0.88968,-2.882701 0.0174,-0.564545 -0.0496,-0.769088 -0.3653,-1.114993 -0.14722,-0.161285 -0.49961,-1.320066 -1.48051,-4.868333 -0.70802,-2.561167 -1.3308,-4.699858 -1.38395,-4.752645 -0.22138,-0.219842 -2.06881,-0.651385 -3.39519,-0.793083 -0.70949,-0.0758 -0.66887,-0.02812 -1.35929,-1.595619 -0.42904,-0.974094 -0.5408,-1.160488 -0.71031,-1.184592 -0.17697,-0.02516 -0.19327,-0.0048 -0.13559,0.169334 0.12645,0.381665 0.14743,1.087782 0.0363,1.221679 -0.16219,0.195425 -0.66378,0.378274 -0.88522,0.322697 -0.10811,-0.02713 -0.25717,-0.116297 -0.33123,-0.198141 -0.17596,-0.194427 -0.34452,-0.876303 -0.33941,-1.372986 0.004,-0.343758 -0.0262,-0.411871 -0.23283,-0.533953 -0.13029,-0.07696 -0.23689,-0.177822 -0.23689,-0.224132 0,-0.121107 -0.54058,-0.32956 -0.85464,-0.32956 -0.26186,0 -1.17346,-0.407657 -1.43802,-0.643064 -0.0735,-0.06542 -0.17239,-0.118936 -0.21972,-0.118936 -0.0473,0 -0.155,-0.0762 -0.23929,-0.169333 -0.0843,-0.09313 -0.2027,-0.169334 -0.26313,-0.169334 -0.20092,0 -0.5412,-0.194867 -0.5412,-0.309924 0,-0.06237 0.0336,-0.113409 0.0746,-0.113409 0.13948,0 1.23716,0.436391 1.36475,0.542564 0.34191,0.284518 0.83276,0.484083 1.38236,0.56203 0.53921,0.07647 0.64411,0.123139 0.94864,0.422027 0.50445,0.49507 0.9831,0.427989 1.32937,-0.186303 l 0.17513,-0.310682 -0.43609,-1.01605 c -0.23984,-0.558827 -0.43607,-1.083066 -0.43607,-1.164974 0,-0.08191 -0.0427,-0.284978 -0.0948,-0.451267 -0.29506,-0.940818 -0.45654,-1.066673 -1.4764,-1.150725 -0.36843,-0.03036 -0.70838,-0.079 -0.75544,-0.108088 -0.0777,-0.048 -0.45718,-0.08377 -1.08117,-0.101914 -0.18812,-0.0055 -0.23283,-0.04619 -0.23283,-0.212047 0,-0.261081 -0.0565,-0.288434 -1.48167,-0.717488 -1.62331,-0.488703 -1.57632,-0.450672 -1.51104,-1.222911 0.0503,-0.594762 0.0371,-0.661524 -0.26227,-1.332322 -0.17335,-0.388401 -0.37001,-0.815544 -0.43701,-0.949207 -0.09,-0.179612 -0.0974,-0.272442 -0.0282,-0.35577 0.13451,-0.162078 0.0237,-0.42754 -0.2641,-0.632439 -0.2206,-0.157084 -0.24903,-0.22732 -0.24931,-0.616033 0,-0.441431 -0.23586,-0.989068 -0.42539,-0.989068 -0.0493,0 -0.26889,-0.166437 -0.48808,-0.369859 -0.54489,-0.505672 -0.89977,-0.675024 -1.30159,-0.621128 -0.29801,0.03997 -0.34967,0.01498 -0.61872,-0.299352 -0.16146,-0.188631 -0.33575,-0.470772 -0.3873,-0.62698 -0.0516,-0.156208 -0.12976,-0.284015 -0.1738,-0.284015 -0.1017,0 -7.92705,2.427443 -8.18266,2.538285 -0.18052,0.07828 -0.18966,0.126744 -0.17973,0.952261 0.01,0.82163 0.0233,0.883851 0.24145,1.123788 0.22956,0.252429 0.35462,0.558619 0.6916,1.693333 0.31233,1.051668 0.37659,1.175243 0.7485,1.439334 0.31809,0.225881 0.36062,0.296178 0.38418,0.635 0.0246,0.354574 0.0734,0.425043 0.70304,1.016 0.37212,0.34925 0.71275,0.7112 0.75698,0.804333 0.0442,0.09313 0.0761,0.750355 0.0709,1.460493 -0.009,1.233375 -0.002,1.291801 0.15989,1.305534 0.43341,0.0368 0.93512,-0.04493 1.17546,-0.191489 0.36062,-0.219898 0.824,-0.202329 1.3222,0.05013 0.22974,0.116417 0.5041,0.211667 0.60968,0.211667 0.10559,0 0.38307,0.0924 0.61665,0.205332 0.23357,0.112932 0.59612,0.270141 0.80567,0.349353 0.443,0.167455 1.1758,0.52972 1.34408,0.664449 0.064,0.05126 0.29262,0.153445 0.508,0.227079 0.2934,0.100309 0.39873,0.182628 0.42006,0.328293 0.0267,0.182229 0.008,0.190675 -0.29633,0.134769 -0.17865,-0.0328 -0.49626,-0.164172 -0.70581,-0.291931 -0.37807,-0.230509 -0.8243,-0.450848 -1.31233,-0.648012 -0.1397,-0.05644 -0.4445,-0.188945 -0.67733,-0.294456 -0.23284,-0.105512 -0.55669,-0.220586 -0.71967,-0.255721 -0.32337,-0.06971 -0.80413,-0.230195 -1.03602,-0.345837 -0.22416,-0.111789 -0.3776,-0.08994 -0.76652,0.109167 -0.44499,0.227807 -1.45992,0.252778 -1.75903,0.04328 -0.25153,-0.176182 -0.46815,-0.06301 -1.18547,0.61934 -0.49984,0.475476 -0.56899,0.514323 -0.84096,0.472419 -0.16298,-0.02511 -0.56331,-0.04608 -0.88962,-0.04659 l -0.59329,-9.31e-4 -0.7928,-0.622477 c -0.77767,-0.610592 -0.81483,-0.628621 -1.94671,-0.944416 -1.7667,-0.492908 -1.68663,-0.445505 -2.46017,-1.45653 -0.45923,-0.600222 -0.68278,-0.966007 -0.68148,-1.115073 0.002,-0.228014 0.45017,-1.967887 0.54749,-2.125354 0.0299,-0.04838 0.58881,-0.454586 1.24201,-0.902673 l 1.18765,-0.814705 -0.0596,-1.06822 c -0.0572,-1.025133 -0.0718,-1.088711 -0.36209,-1.57622 -0.59874,-1.005659 -2.02834,-3.143735 -2.45772,-3.67571 -0.24107,-0.298673 -0.43831,-0.593027 -0.43831,-0.654119 0,-0.08623 -0.31728,-0.116761 -1.41816,-0.136482 -0.77999,-0.01397 9.47843,-0.03456 22.7965,-0.04575 13.31806,-0.01119 26.93882,-0.04394 30.26833,-0.07279 l 6.05367,-0.05244 v 35.648928 c 0,28.509533 -0.0212,35.631341 -0.10583,35.561112 -0.074,-0.06137 -0.10584,-0.0592 -0.10584,0.0072 0,0.05227 -0.0857,0.09445 -0.1905,0.09374 -0.15404,-0.0011 -0.1662,-0.017 -0.0635,-0.08337 0.0763,-0.04932 0.0868,-0.08259 0.0262,-0.08337 -0.0554,-6.78e-4 -0.12438,0.0368 -0.15316,0.08337 -0.0288,0.04657 -0.10947,0.08467 -0.17932,0.08467 -0.0698,0 -0.10346,-0.0381 -0.0747,-0.08467 0.0288,-0.04657 0.012,-0.08467 -0.0373,-0.08467 -0.0493,0 -0.0897,0.0381 -0.0897,0.08467 0,0.1225 -0.31665,0.10425 -0.36726,-0.02117 -0.0342,-0.08467 -0.044,-0.08467 -0.0494,0 -0.004,0.05821 -0.0988,0.105834 -0.2113,0.105834 -0.11253,0 -0.22393,-0.04762 -0.24754,-0.105834 -0.0323,-0.07966 -0.0647,-0.07453 -0.13072,0.02075 -0.0765,0.110283 -0.10212,0.106963 -0.19918,-0.02577 -0.11037,-0.150947 -0.40327,-0.125348 -0.40327,0.03525 0,0.04158 -0.0857,0.07502 -0.1905,0.07431 -0.15405,-0.0011 -0.16621,-0.017 -0.0635,-0.08337 0.10217,-0.06603 0.0888,-0.08233 -0.0685,-0.08337 -0.10902,-7.62e-4 -0.17235,0.03616 -0.14317,0.08337 0.0302,0.04886 -0.0482,0.08412 -0.18551,0.08337 -0.18466,-0.001 -0.20944,-0.01964 -0.11082,-0.08337 0.1027,-0.06637 0.0905,-0.08232 -0.0635,-0.08337 -0.10478,-6.78e-4 -0.1905,0.0368 -0.1905,0.08337 0,0.04657 -0.0975,0.08467 -0.21667,0.08467 -0.12288,0 -0.19401,-0.03665 -0.16433,-0.08467 0.0288,-0.04657 0.0152,-0.08467 -0.0303,-0.08467 -0.0454,0 -0.10194,0.04763 -0.12555,0.105834 -0.0333,0.08215 -0.061,0.08001 -0.12381,-0.0096 -0.0683,-0.09744 -0.088,-0.09744 -0.12676,0 -0.0326,0.08194 -0.0478,0.08472 -0.0526,0.0096 -0.008,-0.128599 -0.34535,-0.143363 -0.34535,-0.01512 0,0.04989 -0.0599,0.03084 -0.13304,-0.04233 -0.16582,-0.165815 -0.24426,-0.166986 -0.40519,-0.006 -0.16229,0.162282 -0.21668,0.159656 -0.41525,-0.02004 -0.15471,-0.140012 -0.16834,-0.139019 -0.28517,0.02075 -0.106,0.144954 -0.13465,0.150564 -0.21047,0.04121 -0.0661,-0.09529 -0.0984,-0.100418 -0.13072,-0.02075 -0.0236,0.05821 -0.13726,0.105833 -0.25255,0.105833 -0.11818,0 -0.18678,-0.03693 -0.15727,-0.08467 0.0288,-0.04657 0.012,-0.08467 -0.0373,-0.08467 -0.0493,0 -0.0897,0.0381 -0.0897,0.08467 0,0.1225 -0.31666,0.10425 -0.36726,-0.02117 -0.0342,-0.08467 -0.044,-0.08467 -0.0494,0 -0.004,0.05821 -0.0638,0.105833 -0.13368,0.105833 -0.0699,0 -0.12758,-0.04762 -0.12829,-0.105833 -8.5e-4,-0.07077 -0.0289,-0.06376 -0.0847,0.02117 -0.0741,0.112888 -0.0926,0.112888 -0.16674,0 -0.0557,-0.08492 -0.0838,-0.09194 -0.0847,-0.02117 -8.5e-4,0.05821 -0.087,0.10525 -0.19179,0.104537 -0.15405,-0.001 -0.16621,-0.017 -0.0635,-0.08337 0.1027,-0.06637 0.0905,-0.08232 -0.0635,-0.08337 -0.10478,-6.77e-4 -0.1905,0.0368 -0.1905,0.08337 0,0.04657 -0.0857,0.08408 -0.1905,0.08337 -0.15405,-0.001 -0.16621,-0.017 -0.0635,-0.08337 0.10348,-0.06688 0.093,-0.08231 -0.0564,-0.08337 -0.10089,-6.77e-4 -0.20277,0.04633 -0.22638,0.104537 -0.0323,0.07969 -0.0655,0.07446 -0.13407,-0.02117 -0.081,-0.112889 -0.10051,-0.112889 -0.17577,0 -0.0753,0.112888 -0.0939,0.112888 -0.16804,0 -0.0557,-0.08492 -0.0838,-0.09194 -0.0847,-0.02117 -8.4e-4,0.05821 -0.0775,0.105833 -0.17062,0.105833 -0.0931,0 -0.16934,-0.0381 -0.16934,-0.08467 0,-0.04657 -0.10477,-0.08408 -0.23283,-0.08337 -0.18143,0.001 -0.2048,0.01942 -0.10583,0.08337 0.10348,0.06688 0.093,0.08231 -0.0564,0.08337 -0.10089,6.77e-4 -0.20567,-0.04633 -0.23284,-0.104537 -0.0395,-0.08467 -0.0593,-0.08467 -0.0988,0 -0.0272,0.05821 -0.13194,0.10525 -0.23283,0.104537 -0.14948,-0.0011 -0.15994,-0.01649 -0.0565,-0.08337 0.1027,-0.06637 0.0905,-0.08232 -0.0635,-0.08337 -0.10477,-6.77e-4 -0.1905,0.0368 -0.1905,0.08337 0,0.122489 -0.31661,0.104253 -0.36749,-0.02117 -0.0323,-0.07969 -0.0655,-0.07446 -0.13407,0.02117 -0.081,0.112888 -0.10037,0.112888 -0.17448,0 -0.0557,-0.08492 -0.0838,-0.09194 -0.0847,-0.02117 -8.5e-4,0.05821 -0.0607,0.105833 -0.13329,0.105833 -0.0726,0 -0.10845,-0.0381 -0.0797,-0.08467 0.0288,-0.04657 -0.0284,-0.08467 -0.127,-0.08467 -0.0986,0 -0.15578,0.0381 -0.127,0.08467 0.0828,0.133941 -0.0949,0.09841 -0.21167,-0.04233 -0.058,-0.06985 -0.17421,-0.127 -0.25832,-0.127 -0.0841,0 -0.21007,0.05715 -0.27992,0.127 -0.1545,0.154497 -0.36357,0.164985 -0.42192,0.02117 -0.0323,-0.07966 -0.0647,-0.07453 -0.13072,0.02075 -0.0762,0.109976 -0.10285,0.105967 -0.20268,-0.03056 -0.10281,-0.140608 -0.12844,-0.1436 -0.24361,-0.02844 -0.0845,0.08451 -0.16976,0.102716 -0.24827,0.05302 -0.17651,-0.111737 -0.5646,-0.09432 -0.61406,0.02755 -0.0324,0.0799 -0.0668,0.07472 -0.1405,-0.02117 -0.0737,-0.09589 -0.10808,-0.101072 -0.14051,-0.02117 -0.0236,0.05821 -0.11279,0.105833 -0.19816,0.105833 -0.0854,0 -0.17744,-0.04762 -0.20461,-0.105833 -0.0395,-0.08467 -0.0593,-0.08467 -0.0988,0 -0.0272,0.05821 -0.11925,0.105833 -0.20462,0.105833 -0.0854,0 -0.17744,-0.04762 -0.20461,-0.105833 -0.0395,-0.08467 -0.0593,-0.08467 -0.0988,0 -0.0272,0.05821 -0.14372,0.105833 -0.25901,0.105833 -0.11818,0 -0.18678,-0.03693 -0.15728,-0.08467 0.0288,-0.04657 0.0152,-0.08467 -0.0303,-0.08467 -0.0454,0 -0.10194,0.04762 -0.12555,0.105833 -0.0324,0.0799 -0.0669,0.07472 -0.14051,-0.02117 -0.0737,-0.09589 -0.10808,-0.101072 -0.1405,-0.02117 -0.0236,0.05821 -0.1128,0.105833 -0.19817,0.105833 -0.0854,0 -0.17744,-0.04762 -0.20461,-0.105833 -0.0395,-0.08467 -0.0593,-0.08467 -0.0988,0 -0.0272,0.05821 -0.11925,0.105833 -0.20462,0.105833 -0.0854,0 -0.17744,-0.04762 -0.20461,-0.105833 -0.0395,-0.08467 -0.0593,-0.08467 -0.0988,0 -0.0272,0.05821 -0.14371,0.105833 -0.25901,0.105833 -0.11817,0 -0.18678,-0.03693 -0.15727,-0.08467 0.0288,-0.04657 0.012,-0.08467 -0.0373,-0.08467 -0.0493,0 -0.0897,0.0381 -0.0897,0.08467 0,0.122956 -0.48484,0.104067 -0.54328,-0.02117 -0.0395,-0.08467 -0.0593,-0.08467 -0.0988,0 -0.0272,0.05821 -0.14372,0.105833 -0.25901,0.105833 -0.11818,0 -0.18678,-0.03693 -0.15728,-0.08467 0.0288,-0.04657 -0.0284,-0.08467 -0.127,-0.08467 -0.0986,0 -0.15577,0.0381 -0.127,0.08467 0.0288,0.04657 0.0142,0.08467 -0.0323,0.08467 -0.0466,0 -0.10821,-0.0381 -0.13699,-0.08467 -0.0288,-0.04657 -0.0904,-0.08467 -0.13699,-0.08467 -0.0466,0 -0.0609,0.0385 -0.0318,0.08556 0.081,0.131009 -0.70588,0.07607 -0.81632,-0.057 z m 4.55217,-8.135399 c -0.2042,-0.314325 -0.41752,-0.747141 -0.47403,-0.961814 -0.0866,-0.329107 -0.1944,-0.465195 -0.68726,-0.867834 -0.5529,-0.451695 -0.75478,-0.561807 -0.75478,-0.411691 0,0.148201 0.26287,0.426041 0.44675,0.472192 0.11071,0.02778 0.25471,0.170826 0.32938,0.327175 0.073,0.152793 0.2711,0.443335 0.44027,0.645649 0.16918,0.202314 0.3076,0.457987 0.3076,0.568162 0,0.110175 0.0598,0.249445 0.13287,0.309489 0.0731,0.06005 0.2133,0.194897 0.31161,0.299672 0.34112,0.363589 0.3169,0.18746 -0.0524,-0.381 z m 1.87276,8.220094 c 0.0582,-0.02349 0.15346,-0.02349 0.21167,0 0.0582,0.02349 0.0106,0.0427 -0.10583,0.0427 -0.11642,0 -0.16404,-0.01922 -0.10584,-0.0427 z M 80.153569,84.530186 c -0.02726,-0.04411 -0.01348,-0.102502 0.03063,-0.129762 0.04411,-0.02726 0.102502,-0.01348 0.129762,0.03063 0.02726,0.04411 0.01348,0.102501 -0.03063,0.129761 -0.04411,0.02726 -0.102501,0.01348 -0.129762,-0.03063 z m 4.317147,-5.335381 c -0.06261,-0.101312 0.09666,-0.201696 0.209432,-0.131997 0.09469,0.05852 0.03253,0.210813 -0.08605,0.210813 -0.04107,0 -0.09659,-0.03547 -0.123384,-0.07882 z m -0.03044,-0.520485 c -0.06905,-0.110563 -0.08096,-0.212839 -0.03206,-0.275167 0.04281,-0.05456 0.102577,-0.288646 0.132822,-0.520194 0.037,-0.283274 0.137769,-0.524002 0.30803,-0.735869 0.139172,-0.17318 0.253039,-0.408281 0.253039,-0.522446 0,-0.27061 0.194168,-0.337628 0.54884,-0.189437 0.248633,0.103886 0.292887,0.169333 0.343723,0.508326 0.09432,0.628989 -0.162813,1.148755 -0.568306,1.148755 -0.155433,0 -0.320736,0.07883 -0.443842,0.211666 -0.107892,0.116417 -0.241989,0.211667 -0.297996,0.211667 -0.0633,0 -0.08149,0.06407 -0.04809,0.169333 0.07042,0.221884 -0.05612,0.217604 -0.196161,-0.0066 z M 65.615763,76.927766 c -0.2939,-0.04511 -0.662914,-0.577545 -0.759834,-1.096332 -0.05894,-0.315504 -0.04378,-0.458418 0.07421,-0.699653 0.129102,-0.263933 0.19247,-0.306413 0.489734,-0.328297 0.295412,-0.02175 0.387882,0.01821 0.685869,0.296333 0.281151,0.262416 0.354373,0.396451 0.398589,0.729633 0.05072,0.382223 0.03425,0.431995 -0.259297,0.783167 -0.172405,0.206252 -0.333971,0.369296 -0.359035,0.362318 -0.02506,-0.007 -0.146673,-0.0282 -0.270241,-0.04717 z M 82.583339,75.10855 c -0.93001,-0.992127 -1.002351,-1.121283 -0.74681,-1.333362 0.0967,-0.08026 0.13934,-0.06641 0.211666,0.06873 0.04981,0.09308 0.09057,0.213508 0.09057,0.267622 0,0.05411 0.21559,0.343948 0.479088,0.644077 0.324045,0.369093 0.451284,0.573495 0.393171,0.631608 -0.05811,0.05811 -0.196522,-0.03207 -0.427687,-0.278678 z m -0.597678,-1.598613 c 0.01669,-0.05006 0.06653,-0.09102 0.110772,-0.09102 0.04424,0 0.09409,0.04096 0.110772,0.09102 0.01669,0.05006 -0.03316,0.09102 -0.110772,0.09102 -0.07761,0 -0.127459,-0.04096 -0.110772,-0.09102 z m 6.407521,-0.158764 c -0.168988,-0.0919 -0.402919,-0.280776 -0.519845,-0.419736 -0.241045,-0.286464 -0.531164,-1.120678 -0.456979,-1.314001 0.05981,-0.155866 0.409957,-0.253687 0.672337,-0.187834 0.227662,0.05714 1.664831,1.127845 1.725269,1.285343 0.04408,0.114862 -0.168818,0.587583 -0.301574,0.669631 -0.231783,0.14325 -0.827025,0.125485 -1.119208,-0.0334 z M 83.3241,72.838954 c -0.130499,-0.1397 -0.278157,-0.254 -0.328128,-0.254 -0.04997,0 -0.149964,-0.1143 -0.222205,-0.254 -0.168927,-0.326666 -0.296334,-0.324273 -0.296334,0.0056 0,0.30666 -0.144706,0.612314 -0.257024,0.542898 -0.04356,-0.02692 -0.08107,-0.247062 -0.08336,-0.489205 -0.0023,-0.242143 -0.0081,-0.592659 -0.01297,-0.778926 -0.0166,-0.638705 0.15969,-1.747626 0.30017,-1.888106 0.124571,-0.124571 0.172487,-0.122854 0.581305,0.02082 0.641413,0.225423 0.740909,0.287386 0.8276,0.515399 0.0918,0.241455 0.463921,0.36115 0.687905,0.22127 0.309241,-0.193124 0.399431,-0.114184 0.586252,0.513123 0.281985,0.946857 0.116241,1.644435 -0.423746,1.783436 -0.160343,0.04127 -0.368845,0.129197 -0.463339,0.195383 -0.285783,0.200173 -0.632608,0.148444 -0.89613,-0.133658 z m 3.358283,-1.574704 c -0.217222,-0.214154 -0.39495,-0.424036 -0.39495,-0.466406 0,-0.04354 -0.201892,-0.05331 -0.464305,-0.02247 -0.495894,0.05828 -0.721028,-0.03587 -0.721028,-0.301536 0,-0.210937 0.482263,-0.538371 0.709093,-0.481441 0.191171,0.04798 1.407574,1.405171 1.407574,1.570487 0,0.169743 -0.140817,0.09134 -0.536384,-0.298638 z m -18.30195,-7.658634 c -0.186267,-0.08812 -0.403181,-0.161221 -0.482033,-0.162442 -0.07885,-0.0012 -0.199028,-0.08169 -0.267059,-0.178817 -0.117537,-0.167808 -0.13434,-0.169622 -0.337584,-0.03645 -0.202635,0.132771 -0.223113,0.130925 -0.389108,-0.03507 -0.09637,-0.09637 -0.175216,-0.2445 -0.175216,-0.329182 0,-0.08468 -0.05913,-0.353077 -0.131399,-0.596434 -0.09547,-0.321482 -0.186667,-0.463482 -0.333519,-0.519315 -0.286849,-0.10906 -0.4046,-0.376466 -0.338376,-0.768437 0.0451,-0.266944 0.02811,-0.342888 -0.08654,-0.386885 -0.07846,-0.03011 -0.213793,-0.220693 -0.300736,-0.42352 -0.08694,-0.202827 -0.215238,-0.368776 -0.285105,-0.368776 -0.184822,0 -0.302321,-0.273756 -0.302321,-0.704363 0,-0.307088 -0.03862,-0.402135 -0.208688,-0.513566 -0.305889,-0.200427 -0.38672,-0.171612 -0.328946,0.117262 0.04249,0.21243 0.0239,0.254 -0.113537,0.254 -0.197076,0 -0.488831,-0.661629 -0.577208,-1.308968 -0.03153,-0.230982 -0.13054,-0.513032 -0.220011,-0.626775 -0.129974,-0.165236 -0.152108,-0.286468 -0.110109,-0.603078 0.08328,-0.627781 -0.276175,-1.518758 -0.859412,-2.130221 -0.253416,-0.26568 -0.460756,-0.541692 -0.460756,-0.613361 0,-0.07167 -0.0762,-0.171087 -0.169333,-0.220931 -0.104824,-0.0561 -0.16982,-0.178189 -0.170609,-0.320478 -6.77e-4,-0.12642 -0.05618,-0.382255 -0.123283,-0.568522 -0.0671,-0.186266 -0.123682,-0.506251 -0.125726,-0.711079 -0.0027,-0.27458 -0.101266,-0.5526 -0.375058,-1.058333 -0.574236,-1.060695 -1.274963,-2.756483 -1.178771,-2.852674 0.143059,-0.14306 0.338377,0.0052 0.490732,0.372573 0.370908,0.894299 1.09807,2.403138 1.231911,2.55618 0.08145,0.09313 0.264377,0.420485 0.406506,0.727447 0.321327,0.693986 1.055948,1.405632 1.670572,1.618328 0.546258,0.189037 1.137059,0.626589 1.137059,0.842116 0,0.330568 0.154003,0.493942 0.416182,0.441506 0.276323,-0.05526 0.599818,0.19488 0.599818,0.463814 0,0.08592 0.08009,0.228689 0.177972,0.317273 0.144148,0.130452 0.169068,0.226014 0.131128,0.502823 -0.04041,0.294822 -0.02125,0.352995 0.139529,0.42356 0.166511,0.07308 0.186371,0.144957 0.186371,0.674467 0,0.464117 0.04056,0.657874 0.186983,0.893303 0.115051,0.184982 0.168404,0.371686 0.138687,0.485325 -0.03779,0.144497 0.001,0.20344 0.178362,0.270863 0.370908,0.141019 0.680258,0.09961 1.02932,-0.137797 0.181123,-0.123185 0.443615,-0.255798 0.583315,-0.294696 0.1397,-0.0389 0.44199,-0.22623 0.671757,-0.416293 0.343698,-0.284307 0.45627,-0.334388 0.635,-0.282495 0.297957,0.08651 0.572874,0.0719 1.021576,-0.05429 0.436469,-0.122747 0.677334,-0.301419 0.677334,-0.502443 0,-0.386229 0.567206,-0.458633 1.04624,-0.133551 0.604958,0.410536 0.859506,0.596421 0.909212,0.663959 0.02775,0.0377 0.114352,-0.02897 0.192452,-0.148167 0.08367,-0.127696 0.221348,-0.216718 0.335169,-0.216718 0.230571,0 0.818927,0.513688 0.818927,0.714998 0,0.128821 0.388054,0.718943 0.710595,1.080617 0.07093,0.07954 0.231111,0.298963 0.355952,0.487609 0.196516,0.296957 0.220798,0.402921 0.180904,0.789454 -0.04697,0.455087 -0.261613,0.911143 -0.649699,1.380422 -0.119214,0.144155 -0.254852,0.325314 -0.301419,0.402575 -0.04657,0.07726 -0.25948,0.172321 -0.473139,0.211244 -0.21366,0.03892 -0.570803,0.196216 -0.793651,0.349539 -0.222849,0.153324 -0.524286,0.310101 -0.669861,0.348394 -0.145575,0.03829 -0.480676,0.124313 -0.744669,0.191157 -0.263991,0.06684 -0.530691,0.154261 -0.592666,0.194262 -0.06198,0.04 -0.455581,0.07935 -0.874681,0.08745 -1.120425,0.02164 -1.284538,0.05052 -1.480119,0.260449 -0.104672,0.112353 -0.277479,0.1905 -0.421254,0.1905 -0.134078,0 -0.294519,0.01595 -0.356535,0.03544 -0.06202,0.01949 -0.265158,-0.03666 -0.451425,-0.12478 z M 34.577265,59.82888 c -0.07923,-0.03197 -0.105833,-0.430177 -0.105833,-1.583965 0,-1.537398 4.77e-4,-1.541298 0.1905,-1.556454 0.387037,-0.03087 2.128749,0.583156 2.751667,0.970076 0.720081,0.447271 0.793846,0.647417 0.288738,0.783429 -0.398903,0.107413 -2.777459,1.241101 -2.849927,1.358356 -0.05599,0.0906 -0.108009,0.096 -0.275145,0.02856 z M 137.4261,59.122953 c 0,-0.04657 0.0381,-0.08467 0.0847,-0.08467 0.0466,0 0.0847,0.0381 0.0847,0.08467 0,0.04657 -0.0381,0.08467 -0.0847,0.08467 -0.0466,0 -0.0847,-0.0381 -0.0847,-0.08467 z m 0.84667,-2.928055 c 0,-0.07373 0.0452,-0.118975 0.10054,-0.100542 0.15699,0.05233 0.18303,0.234597 0.0335,0.234597 -0.0737,0 -0.13405,-0.06032 -0.13405,-0.134055 z m -1.93441,-0.596123 c -0.27002,-0.11786 -0.28128,-0.140509 -0.2383,-0.479926 0.12792,-1.010337 0.1946,-1.096097 0.82361,-1.059392 0.60452,0.03527 0.69281,0.186042 0.41515,0.708928 -0.58595,1.103457 -0.51319,1.043066 -1.00046,0.83039 z M 35.783765,53.145232 c -0.798129,-0.233642 -1.143,-0.3864 -1.143,-0.506282 0,-0.066 -0.0381,-0.119997 -0.08467,-0.119997 -0.05577,0 -0.08375,-2.347705 -0.08197,-6.879167 0.0022,-5.585967 0.02384,-6.907021 0.115167,-7.027334 0.09329,-0.122893 0.248081,-0.147822 0.907474,-0.146146 0.43725,0.0011 0.947399,0.04187 1.133666,0.09059 0.452118,0.118237 3.478047,0.244455 3.780562,0.157694 0.132106,-0.03789 0.494839,-0.02956 0.811496,0.01863 0.314935,0.04793 1.001592,0.082 1.525905,0.07573 0.886679,-0.01061 0.993639,0.0063 1.530607,0.241972 0.317521,0.139362 0.745788,0.279231 0.951704,0.310821 0.205916,0.03159 0.469643,0.104103 0.58606,0.161138 0.116416,0.05704 0.582487,0.124845 1.035712,0.150687 0.862296,0.04916 1.119375,0.137939 2.139288,0.738735 0.232833,0.137154 0.522423,0.250261 0.643532,0.251349 0.439521,0.0039 0.754164,0.179422 0.926124,0.516492 0.190777,0.373954 0.382992,0.501486 0.755831,0.501486 0.341088,0 0.763568,0.181801 0.976513,0.420214 0.123875,0.138689 0.180698,0.351857 0.211666,0.794053 0.04805,0.68613 0.139167,0.762363 0.631784,0.528601 0.155545,-0.07381 0.436271,-0.134201 0.623838,-0.134201 0.33978,0 0.341517,0.0017 0.474037,0.457531 0.07315,0.251642 0.133008,0.538334 0.133008,0.637095 0,0.260549 0.308176,0.344707 1.262257,0.344707 0.587265,0 0.960951,0.04584 1.285655,0.157703 0.745371,0.25679 2.17938,1.011965 2.312533,1.217822 0.192222,0.297176 0.251651,0.642786 0.13475,0.783643 -0.132198,0.159289 -0.227124,0.09847 -0.372707,-0.23879 -0.08891,-0.205977 -0.26962,-0.348614 -0.767796,-0.606038 -0.59963,-0.309848 -0.658202,-0.32471 -0.735489,-0.186608 -0.129232,0.230926 -0.978937,0.572787 -1.636307,0.658333 -0.519277,0.06758 -0.627742,0.114195 -0.889,0.382101 l -0.297562,0.305137 0.465666,-0.04105 c 0.455866,-0.04018 0.47324,-0.03348 0.8255,0.318542 0.507369,0.507023 0.485534,0.683711 -0.160465,1.298468 -0.484106,0.460694 -0.524867,0.528796 -0.585963,0.979016 -0.09739,0.717648 -0.14769,0.752643 -0.982009,0.683144 -0.805704,-0.06711 -0.778531,-0.09119 -0.951187,0.842791 -0.110178,0.59601 -0.316287,1.041619 -0.553748,1.19721 -0.231226,0.151504 -0.72766,0.03032 -1.134774,-0.277009 -0.325274,-0.245549 -1.029354,-1.602713 -1.029354,-1.984154 0,-0.264921 -0.232458,-0.460988 -0.644179,-0.543332 -0.22238,-0.04448 -0.290953,-0.0068 -0.545907,0.299769 -0.692685,0.832974 -0.813432,0.933966 -1.116658,0.933966 -0.343905,0 -0.518197,-0.165101 -0.690833,-0.654405 -0.253378,-0.71815 -0.566746,-0.954935 -1.489756,-1.125682 -0.20955,-0.03876 -0.5334,-0.1113 -0.719667,-0.161191 -0.186267,-0.04989 -0.681587,-0.08429 -1.100712,-0.07643 -0.918886,0.01722 -1.099679,-0.06326 -1.332275,-0.59303 -0.305084,-0.694869 -0.585871,-0.709979 -1.247558,-0.06713 -0.466584,0.453297 -0.910858,0.68185 -1.148302,0.590733 -0.165744,-0.0636 -0.378153,0.44378 -0.378153,0.903294 0,0.190075 -0.05813,0.457998 -0.129174,0.595386 -0.18619,0.360052 -0.461951,0.326029 -1.054771,-0.130136 -0.442315,-0.340354 -0.519744,-0.448397 -0.743283,-1.037167 -0.172253,-0.453687 -0.264226,-0.877299 -0.296974,-1.367798 -0.04171,-0.624821 -0.07464,-0.737203 -0.272879,-0.931334 l -0.225439,-0.22077 -0.22624,0.292161 c -0.124432,0.160688 -0.464597,0.574079 -0.755923,0.918647 -0.567332,0.67102 -0.659176,0.876887 -0.583657,1.308255 0.139314,0.795771 0.217363,1.017413 0.618572,1.756604 0.695834,1.282015 0.782338,1.79717 0.361272,2.151474 -0.294137,0.2475 -0.449421,0.259823 -1.051838,0.08347 z m 82.941875,-1.671515 c -0.052,-0.06265 -0.11881,-0.243622 -0.14848,-0.402167 -0.0819,-0.437326 -0.42491,-1.651566 -0.66465,-2.352513 -0.11756,-0.343704 -0.21374,-0.694989 -0.21374,-0.780635 0,-0.225699 -0.46855,-1.118333 -0.98264,-1.87202 -0.31224,-0.457768 -0.45792,-0.761426 -0.48742,-1.016 -0.0232,-0.199703 -0.0819,-0.702001 -0.13054,-1.116218 -0.0524,-0.446278 -0.16082,-0.89196 -0.26607,-1.093889 -0.26788,-0.513941 -0.64149,-1.582497 -0.70771,-2.024147 -0.0348,-0.232049 -0.15467,-0.512568 -0.29387,-0.687733 -0.17042,-0.214451 -0.27555,-0.501496 -0.38217,-1.04347 -0.0809,-0.411201 -0.19957,-0.938139 -0.26373,-1.170973 -0.0642,-0.232833 -0.16306,-0.651933 -0.21978,-0.931333 -0.0567,-0.2794 -0.16989,-0.5842 -0.25149,-0.677333 -0.0816,-0.09313 -0.20596,-0.302684 -0.27635,-0.465667 l -0.12799,-0.296334 0.0476,0.525855 c 0.0455,0.50229 0.0321,0.551614 -0.29717,1.100667 -0.18962,0.316147 -0.40776,0.746262 -0.48475,0.955812 -0.077,0.20955 -0.196,0.515871 -0.26446,0.680713 -0.11013,0.265179 -0.10929,0.372495 0.007,0.931334 0.0725,0.347391 0.1318,0.778988 0.13184,0.959104 4e-5,0.199316 0.13064,0.617461 0.33369,1.068408 0.18349,0.407509 0.4725,1.098341 0.64224,1.535183 0.16975,0.436842 0.34347,0.830453 0.38605,0.874692 0.0426,0.04424 0.0774,0.217931 0.0774,0.385984 0,0.168053 0.0559,0.379508 0.12431,0.4699 0.0684,0.09039 0.12575,0.278649 0.12752,0.418349 0.002,0.1397 0.0587,0.360385 0.12652,0.49041 0.0678,0.130025 0.14827,0.369438 0.17878,0.532027 0.0305,0.16259 0.15168,0.437206 0.2693,0.610257 0.11761,0.173052 0.40595,0.676589 0.64075,1.118973 0.2348,0.442383 0.51638,0.923926 0.62574,1.070094 0.27884,0.372699 0.3402,1.006366 0.1546,1.596437 -0.22056,0.70123 -0.35705,0.607776 -0.40121,-0.274698 -0.0402,-0.804154 -0.0409,-0.805779 -1.25499,-2.8575 -0.22043,-0.372533 -0.42947,-0.810683 -0.46454,-0.973667 -0.0351,-0.162983 -0.11603,-0.371486 -0.17993,-0.463339 -0.0639,-0.09185 -0.11619,-0.271809 -0.11619,-0.399901 0,-0.128093 -0.0719,-0.395841 -0.15976,-0.594995 -0.2078,-0.47099 -0.43385,-1.172278 -0.43332,-1.344321 2.5e-4,-0.07456 -0.0995,-0.322206 -0.22162,-0.550334 -0.69602,-1.300173 -0.91896,-2.166985 -1.17575,-4.571392 l -0.0551,-0.515948 0.56792,-0.91879 0.56792,-0.91879 -0.0139,-0.653239 c -0.009,-0.442101 0.0446,-0.867754 0.16721,-1.316929 0.27683,-1.014193 0.28131,-1.044836 0.15249,-1.043393 -0.0636,6.78e-4 -0.16493,0.03253 -0.22509,0.0707 -0.15051,0.09548 -0.61028,1.247861 -0.61028,1.529608 0,0.23125 -0.25235,0.527844 -0.67733,0.796078 -0.11642,0.07348 -0.46459,0.159437 -0.77373,0.191018 -0.4749,0.04852 -0.61275,0.03056 -0.889,-0.115787 -0.46673,-0.247269 -0.66779,-0.273668 -1.11613,-0.146552 -0.21788,0.06178 -0.54854,0.137012 -0.73481,0.167191 -0.47581,0.07709 -1.85978,0.691581 -2.3487,1.042835 -0.36901,0.26511 -0.4523,0.290421 -0.83476,0.253672 -0.46276,-0.04447 -0.53418,-0.08945 -0.6267,-0.394739 -0.0577,-0.190381 -0.0451,-0.199737 0.20215,-0.150284 0.30868,0.06174 0.77168,-0.01447 0.77168,-0.127009 0,-0.129465 0.4544,-0.487811 0.6222,-0.49068 0.0861,-0.0015 0.2766,-0.05682 0.42333,-0.122998 0.96689,-0.436056 2.28415,-0.748166 3.0608,-0.725222 0.79436,0.02347 0.99329,0.05344 1.33118,0.200608 0.29524,0.128584 0.33119,0.127535 0.56818,-0.01659 0.35063,-0.21323 0.56728,-0.513034 0.62326,-0.862477 0.14589,-0.910597 0.20854,-1.054333 0.61634,-1.41415 0.2218,-0.195699 0.48257,-0.367149 0.57949,-0.381 0.13031,-0.01862 0.18313,-0.09686 0.20275,-0.30035 0.0334,-0.346485 0.12231,-0.347196 0.36745,-0.0029 0.15478,0.217373 0.19566,0.392246 0.20287,0.867833 0.006,0.429188 0.073,0.760056 0.23788,1.18417 0.17891,0.460104 0.21696,0.667896 0.17435,0.952034 -0.0415,0.276882 -0.0119,0.454123 0.12437,0.744012 0.0984,0.2093 0.17948,0.466685 0.1802,0.571967 7.7e-4,0.105283 0.0598,0.420023 0.13132,0.699423 0.0715,0.2794 0.20074,0.83185 0.28722,1.227666 0.0865,0.395817 0.28093,0.956918 0.43214,1.246892 0.15121,0.289974 0.30451,0.690024 0.34066,0.889 0.10105,0.556089 0.41047,1.356681 0.60543,1.566461 0.17344,0.18663 0.32949,0.960945 0.45679,2.266648 0.0389,0.399516 0.11741,0.607443 0.36739,0.973667 0.17483,0.256116 0.39992,0.637116 0.50021,0.846666 0.19797,0.413667 0.64887,1.085487 0.9278,1.382398 0.0962,0.102435 0.23181,0.322275 0.30128,0.488532 0.0695,0.166256 0.39363,0.704239 0.72039,1.195518 0.32674,0.491279 0.65938,1.030172 0.7392,1.197541 0.13629,0.285817 0.13641,0.313919 0.002,0.4625 -0.28684,0.316945 -1.44956,0.485429 -1.65357,0.239609 z m 22.59513,-0.690431 c 0,-0.07761 0.041,-0.127459 0.091,-0.110772 0.0501,0.01669 0.091,0.06653 0.091,0.110772 0,0.04424 -0.041,0.09409 -0.091,0.110772 -0.05,0.01669 -0.091,-0.03316 -0.091,-0.110772 z m 0.85751,-1.234149 c -0.19224,-0.241434 -0.34951,-0.472093 -0.34951,-0.512578 0,-0.04048 -0.0543,-0.07361 -0.12066,-0.07361 -0.0664,0 -0.20924,-0.159463 -0.3175,-0.354362 -0.13086,-0.235579 -0.27666,-0.3755 -0.43497,-0.417425 -0.13096,-0.03469 -0.40634,-0.218123 -0.61193,-0.407639 -0.29239,-0.26951 -0.44001,-0.344574 -0.67762,-0.344574 -0.40517,0 -0.59965,-0.115998 -0.67051,-0.399933 -0.0323,-0.129287 -0.10962,-0.292217 -0.17189,-0.362067 -0.0745,-0.08362 -0.13007,-0.478747 -0.16253,-1.156689 -0.0536,-1.118712 -0.0706,-1.196703 -0.35842,-1.637311 -0.19612,-0.300265 -0.22438,-0.498853 -0.16866,-1.185334 0.019,-0.23391 -0.0161,-0.457117 -0.0908,-0.578161 -0.083,-0.134309 -0.10389,-0.303 -0.0657,-0.529167 0.0543,-0.321219 0.0483,-0.332048 -0.18418,-0.333301 -0.29828,-0.0016 -0.38533,-0.06263 -0.51717,-0.362521 -0.17346,-0.394563 -0.13616,-0.652183 0.0944,-0.652183 0.23308,0 0.37178,0.148972 0.65331,0.701746 0.11808,0.231829 0.3243,0.475302 0.48165,0.568644 0.1993,0.118223 0.27517,0.224618 0.27517,0.385857 0,0.122445 0.0667,0.336108 0.14816,0.474809 0.14212,0.241886 0.14172,0.256921 -0.01,0.368206 -0.22216,0.163202 -0.25233,0.74102 -0.0566,1.084078 0.0844,0.147946 0.17884,0.413871 0.20984,0.590943 0.0548,0.31312 0.29874,0.531592 0.36652,0.328283 0.0623,-0.186804 0.26975,-0.10082 0.32078,0.132934 0.028,0.128058 0.0901,0.336868 0.13821,0.464023 0.11839,0.313251 0.0214,0.644181 -0.22117,0.754709 -0.23773,0.108316 -0.41675,0.410814 -0.37412,0.632176 0.0232,0.120582 0.14208,0.176064 0.49519,0.231155 0.25821,0.04029 0.57747,0.15843 0.71862,0.265934 0.36483,0.277853 1.1361,1.063988 1.48167,1.510221 0.16298,0.210463 0.45951,0.508042 0.65895,0.661287 0.399,0.30659 0.4346,0.525213 0.092,0.565072 -0.17922,0.02085 -0.28768,-0.05767 -0.57078,-0.413226 z m -2.72018,-4.272163 c 0,-0.02164 -0.0762,-0.03936 -0.16933,-0.03936 -0.0958,0 -0.16934,0.05644 -0.16934,0.129979 0,0.103743 0.0342,0.111686 0.16934,0.03936 0.0931,-0.04984 0.16933,-0.108334 0.16933,-0.129979 z m 0.55481,0.983877 c -0.0273,-0.04411 -0.0135,-0.102502 0.0306,-0.129762 0.0441,-0.02726 0.10249,-0.01348 0.12976,0.03063 0.0273,0.04411 0.0135,0.102502 -0.0306,0.129762 -0.0441,0.02726 -0.1025,0.01348 -0.12976,-0.03063 z m -7.27826,-5.450827 c 0.0377,-0.367756 0.0249,-0.563861 -0.0394,-0.603573 -0.0523,-0.03235 -0.0965,-0.180402 -0.0982,-0.328996 -0.002,-0.148593 -0.0575,-0.365419 -0.124,-0.481836 -0.0665,-0.116417 -0.12235,-0.288765 -0.124,-0.382997 -0.002,-0.09532 -0.17442,-0.320691 -0.38941,-0.508 -0.92377,-0.80486 -0.96826,-0.865393 -0.96826,-1.317514 0,-0.230149 0.0468,-0.493326 0.10392,-0.584837 0.0833,-0.133435 0.0799,-0.221233 -0.0171,-0.443351 -0.0665,-0.152333 -0.12539,-0.492677 -0.13078,-0.75632 -0.009,-0.456051 -0.0295,-0.498493 -0.41491,-0.873095 -0.37997,-0.36928 -0.42117,-0.388157 -0.66311,-0.303815 -0.37232,0.129792 -1.58536,0.117885 -1.62041,-0.01591 -0.0152,-0.05821 -0.0765,-0.256474 -0.13606,-0.440592 -0.082,-0.253462 -0.0842,-0.342816 -0.009,-0.367932 0.0547,-0.01825 0.21645,-0.131562 0.35936,-0.251816 0.35223,-0.296385 0.52915,-0.183881 0.56443,0.358924 l 0.0262,0.403071 0.27014,-0.05307 c 0.14857,-0.02919 0.37876,-0.132738 0.51154,-0.230114 0.37988,-0.278612 0.9742,-0.07285 0.98357,0.340531 10e-4,0.06536 0.15436,0.258864 0.33975,0.430007 0.32834,0.303128 0.33655,0.324482 0.3175,0.82651 -0.0165,0.433846 0.0106,0.547462 0.17094,0.71845 0.2478,0.264201 0.25234,0.725742 0.0102,1.033617 -0.15674,0.19925 -0.16618,0.255705 -0.0722,0.43128 0.0595,0.11111 0.26444,0.27633 0.4555,0.367154 0.5086,0.241774 0.72794,0.481075 0.73108,0.797609 0.001,0.149527 0.0586,0.345825 0.127,0.436217 0.0684,0.09039 0.1243,0.255963 0.1243,0.367936 0,0.111974 0.0597,0.304717 0.13267,0.428318 0.10761,0.182281 0.1196,0.344676 0.0635,0.85973 -0.0667,0.612247 -0.0776,0.63597 -0.30496,0.662077 l -0.2358,0.02708 z m -29.42922,-2.574497 c -0.0699,-0.02754 -0.15746,-0.101634 -0.1947,-0.164656 -0.0372,-0.06302 -0.17878,-0.114585 -0.31452,-0.114585 -0.27073,0 -0.32856,-0.07526 -0.54009,-0.702934 -0.17557,-0.520976 -0.11181,-0.756142 0.27831,-1.026494 0.37935,-0.262888 0.9135,-0.293003 1.19233,-0.06722 0.30721,0.248762 0.49524,0.918348 0.43498,1.549005 l -0.052,0.543977 -0.33867,0.01649 c -0.18627,0.0091 -0.39582,-0.006 -0.46567,-0.03358 z m 5.60496,-5.630222 c -0.48324,-0.852739 -0.88809,-2.516102 -0.58846,-2.417712 0.0582,0.01911 0.11848,0.142689 0.13394,0.274614 0.0155,0.131924 0.0823,0.322512 0.14844,0.423528 0.0662,0.101016 0.18058,0.39019 0.2542,0.642608 0.0736,0.252418 0.20535,0.582405 0.29273,0.733303 0.18988,0.327922 0.24572,0.710547 0.11064,0.758111 -0.0535,0.01883 -0.21165,-0.167675 -0.35149,-0.414452 z m 4.20695,-1.479693 c -0.17824,-0.450397 -0.0803,-0.983961 0.2713,-1.477718 0.20687,-0.290521 0.47246,-0.313344 0.78504,-0.06746 0.28757,0.226203 0.28074,0.341441 -0.0307,0.518683 -0.24204,0.137726 -0.40126,0.40777 -0.56366,0.956016 -0.10117,0.341523 -0.34022,0.377999 -0.46193,0.07048 z m -5.6091,-0.678739 c -0.0953,-0.09535 -0.0581,-0.195254 0.0729,-0.195254 0.0698,0 0.127,0.03585 0.127,0.07967 0,0.106763 -0.13221,0.183227 -0.19986,0.115585 z m 17.23479,-4.445521 c -0.151,-0.151002 -0.1249,-0.270321 0.10671,-0.487907 0.17324,-0.16276 0.26892,-0.187561 0.56853,-0.147375 0.40417,0.05421 0.63377,0.271128 0.48136,0.454769 -0.0515,0.06203 -0.16288,0.112779 -0.24756,0.112779 -0.0847,0 -0.17752,0.0381 -0.2063,0.08467 -0.0731,0.118226 -0.57978,0.106015 -0.70274,-0.01693 z M 91.9601,21.630377 c 0,-0.135779 0.618749,-0.607426 0.796876,-0.607426 0.0253,0 -0.119327,0.1524 -0.321402,0.338667 -0.367626,0.338866 -0.475474,0.399826 -0.475474,0.268759 z m 1.314127,-1.210656 c 0.142281,-0.459521 0.608902,-1.240089 1.01466,-1.697337 0.299483,-0.337485 0.286806,-0.450104 -0.08394,-0.745654 -0.332822,-0.26532 -0.333991,-0.268206 -0.08467,-0.208962 0.139049,0.03304 0.334653,0.134262 0.434677,0.224937 0.17049,0.154556 0.198124,0.156453 0.441989,0.03035 0.143072,-0.07399 0.3007,-0.210324 0.350286,-0.302975 0.104929,-0.196062 0.253531,-0.223287 0.253531,-0.04645 0,0.0671 -0.2286,0.32323 -0.508,0.569168 -0.2794,0.245938 -0.508,0.517389 -0.508,0.603225 0,0.273339 -0.166484,0.483599 -0.382914,0.483599 -0.171976,0 -0.258324,0.100676 -0.502914,0.586367 -0.302672,0.601026 -0.543151,0.886249 -0.424712,0.503736 z m 2.596768,-1.096453 c 0.01669,-0.05006 0.06653,-0.09102 0.110772,-0.09102 0.04424,0 0.09409,0.04096 0.110772,0.09102 0.01669,0.05006 -0.03316,0.09102 -0.110772,0.09102 -0.07761,0 -0.127459,-0.04096 -0.110772,-0.09102 z M 92.9761,17.674956 c -0.302683,-0.05778 -0.674158,-0.109173 -0.8255,-0.1142 -0.151342,-0.005 -0.275167,-0.05209 -0.275167,-0.104577 0,-0.06616 0.136349,-0.07738 0.4445,-0.03657 0.244475,0.03238 0.654051,0.08485 0.910167,0.116605 0.256117,0.03176 0.458999,0.09489 0.45085,0.140288 -0.02095,0.116734 -0.08603,0.116591 -0.70485,-0.0015 z m 2.624667,-0.277308 c 0,-0.102324 0.16063,-0.221623 0.219346,-0.162907 0.02131,0.02131 -0.01932,0.08694 -0.0903,0.145845 -0.08047,0.06678 -0.129046,0.0732 -0.129046,0.01706 z m -5.08,-0.10003 c 0,-0.04657 0.1143,-0.08467 0.254,-0.08467 0.1397,0 0.254,0.0381 0.254,0.08467 0,0.04657 -0.1143,0.08467 -0.254,0.08467 -0.1397,0 -0.254,-0.0381 -0.254,-0.08467 z m 5.441397,-0.552227 c 0.08657,-0.659744 0.296129,-1.430838 0.398085,-1.464823 0.05698,-0.01899 0.234532,-0.149496 0.394566,-0.290008 0.160035,-0.140513 0.311918,-0.234532 0.337518,-0.208932 0.04788,0.04788 -0.114086,0.212569 -0.46246,0.470261 -0.197912,0.146396 -0.321395,0.525663 -0.40992,1.259038 -0.02366,0.19597 -0.101278,0.404668 -0.172496,0.463773 -0.113474,0.09418 -0.124021,0.06582 -0.08529,-0.229309 z m 1.266673,-2.257648 c 0.01843,-0.0553 0.07878,-0.115632 0.134113,-0.134075 0.06187,-0.02062 0.08079,0.01808 0.04915,0.100542 -0.05906,0.153899 -0.234059,0.185921 -0.183262,0.03353 z m 0.333937,-0.540086 c 0.01521,-0.129423 0.07029,-0.249287 0.122393,-0.266366 0.05987,-0.01962 0.07952,0.04853 0.05339,0.185222 -0.05768,0.301731 -0.209977,0.372033 -0.175784,0.08114 z\"\n               id=\"path3284-6-8\" />\n            <path\n               style=\"fill:${colors[18]};stroke:${colors[19]};stroke-width:0.08466667;stroke-opacity:1\"\n               d=\"m 76.073647,84.565972 c -0.07847,-0.204489 0.01409,-0.951507 0.136121,-1.098541 0.05925,-0.0714 0.235539,-0.12981 0.391747,-0.12981 0.399948,0 0.55552,0.261121 0.50955,0.855259 l -0.03536,0.457075 -0.475157,0.02542 c -0.372521,0.01993 -0.486334,-0.0037 -0.526896,-0.109405 z m 11.083944,-0.04021 c -0.0095,-0.125595 0.05374,-0.176989 0.257149,-0.209105 0.223119,-0.03523 2.323026,-0.01444 2.534527,0.02509 0.08604,0.01608 0.07784,0.113071 -0.02246,0.265868 -0.07411,0.112889 -0.09278,0.112889 -0.168037,0 -0.07046,-0.105687 -0.09716,-0.107631 -0.159085,-0.01159 -0.06283,0.09744 -0.0816,0.09744 -0.120554,0 -0.03789,-0.09479 -0.06357,-0.09272 -0.143695,0.01159 -0.07366,0.09589 -0.108078,0.101072 -0.140501,0.02117 -0.05099,-0.125668 -0.282832,-0.143018 -0.282832,-0.02117 0,0.04657 -0.04035,0.08467 -0.08966,0.08467 -0.04931,0 -0.06612,-0.0381 -0.03734,-0.08467 0.02878,-0.04657 -0.0071,-0.08467 -0.07967,-0.08467 -0.0726,0 -0.13258,0.04763 -0.133293,0.105833 -8.63e-4,0.07055 -0.02865,0.0635 -0.08337,-0.02117 -0.04514,-0.06985 -0.08266,-0.0878 -0.08337,-0.03988 -6.77e-4,0.0482 -0.207949,0.0897 -0.463965,0.0929 -0.254467,0.0032 -0.442718,-0.0265 -0.418336,-0.06595 0.02438,-0.03945 0.0062,-0.07173 -0.04033,-0.07173 -0.04657,0 -0.108213,0.0381 -0.136993,0.08467 -0.08451,0.136747 -0.174663,0.09753 -0.188176,-0.08186 z m 17.877939,-0.0325 c 0.0126,-0.114443 0.1041,-0.335556 0.20342,-0.491361 0.0993,-0.155805 0.25263,-0.435683 0.34068,-0.621949 0.0881,-0.186267 0.34174,-0.719667 0.56374,-1.185334 0.39533,-0.829266 0.40382,-0.864221 0.41268,-1.700823 0.009,-0.815716 0.0219,-0.874777 0.29458,-1.312333 0.28176,-0.452141 0.2848,-0.467569 0.23123,-1.171099 -0.0622,-0.816759 -0.14408,-0.968301 -0.48295,-0.893872 -0.31874,0.07001 -0.58414,-0.08534 -0.58414,-0.341905 0,-0.225494 0.0773,-0.257012 0.79189,-0.322911 0.51255,-0.04726 0.7191,-0.223756 0.58367,-0.498725 -0.0523,-0.106149 -0.11202,-0.326349 -0.13275,-0.489332 -0.0872,-0.686038 -0.34691,-1.317797 -0.72577,-1.765729 -0.21091,-0.249367 -0.46834,-0.485658 -0.57205,-0.52509 -0.10372,-0.03943 -0.32753,-0.288912 -0.49736,-0.5544 -0.16983,-0.265486 -0.58627,-0.77401 -0.92543,-1.130053 -0.33916,-0.356043 -0.64584,-0.740735 -0.68151,-0.854873 -0.0848,-0.271283 -0.18787,-0.331659 -0.56902,-0.333226 -0.26213,-0.0011 -0.3365,0.03966 -0.44087,0.241483 -0.1089,0.210586 -0.10954,0.263915 -0.005,0.402167 0.0664,0.08766 0.12189,0.19986 0.12337,0.249326 0.003,0.105839 -0.58203,0.111803 -0.74347,0.0076 -0.12562,-0.0811 -0.43917,0.157327 -0.43917,0.333943 0,0.203633 -0.1824,0.222567 -0.31536,0.03274 -0.11856,-0.169275 -0.18424,-0.184468 -0.62479,-0.14452 -0.52446,0.04756 -0.71825,-0.04923 -0.61858,-0.308946 0.0296,-0.0772 0.0107,-0.137732 -0.043,-0.137732 -0.0527,0 -0.13116,-0.09296 -0.17436,-0.206574 -0.08559,-0.225104 -0.504132,-0.384793 -1.010715,-0.38562 -0.406133,-6.77e-4 -1.485696,0.605985 -1.971852,1.108061 -0.219062,0.226236 -0.752462,0.638934 -1.185333,0.917108 -0.778121,0.50004 -1.590383,1.296436 -1.711513,1.678081 -0.03242,0.102154 -0.22507,0.463132 -0.428106,0.802172 -0.364909,0.609344 -0.368129,0.621575 -0.279894,1.062665 0.10433,0.521549 0.02402,0.660182 -0.526213,0.9083 -0.305011,0.13754 -0.350547,0.139036 -0.535883,0.0176 -0.175347,-0.114892 -0.246681,-0.117542 -0.53118,-0.01974 -0.26261,0.09028 -0.343807,0.169897 -0.404167,0.396294 -0.126718,0.47529 -0.09721,0.864889 0.09491,1.253201 0.195886,0.395919 0.184082,0.511783 -0.05214,0.511783 -0.08149,0 -0.222111,0.05594 -0.312503,0.124307 -0.09039,0.06837 -0.244936,0.125519 -0.343431,0.127001 -0.258423,0.0039 -0.62525,0.322008 -0.62525,0.542236 0,0.22041 -0.147283,0.391788 -0.336704,0.391788 -0.07343,0 -0.39816,0.2667 -0.721629,0.592667 -0.323469,0.325967 -0.655181,0.592667 -0.737136,0.592667 -0.09505,0 -0.229604,-0.160957 -0.371575,-0.4445 -0.12241,-0.244475 -0.316098,-0.56912 -0.430417,-0.721435 -0.290819,-0.387474 -0.232246,-0.604926 0.226794,-0.841973 0.262692,-0.135654 0.481082,-0.347403 0.703304,-0.68192 0.18643,-0.280638 0.436282,-0.538875 0.592667,-0.612559 0.252849,-0.119135 0.273105,-0.161538 0.312696,-0.654579 0.05908,-0.735794 0.310589,-0.978257 1.202931,-1.159684 0.358928,-0.07298 0.818469,-0.132684 1.021202,-0.132684 0.245176,0 0.426454,-0.05389 0.541367,-0.160953 0.349687,-0.325783 0.773641,-0.908018 0.941324,-1.292763 0.471532,-1.081918 1.298892,-1.938824 2.582288,-2.674504 0.836531,-0.479524 1.59292,-1.153218 1.829083,-1.629113 0.241353,-0.486354 0.378042,-0.70444 0.629712,-1.004697 0.131398,-0.156766 0.301343,-0.423466 0.377654,-0.592666 0.201472,-0.446712 0.343428,-0.591695 0.53125,-0.542578 0.107502,0.02811 0.164523,1.69e-4 0.164523,-0.08073 0,-0.06806 0.0762,-0.192712 0.169333,-0.276997 0.255897,-0.231584 0.215759,-0.385434 -0.09396,-0.360156 -0.173723,0.01418 -0.295466,-0.02809 -0.357866,-0.124246 -0.07852,-0.120997 -0.03742,-0.199211 0.242125,-0.460769 0.295119,-0.276128 0.315788,-0.31866 0.167367,-0.344395 -0.468249,-0.08119 -0.550334,-0.120186 -0.550334,-0.261447 0,-0.230316 0.169241,-0.349773 0.423496,-0.298922 0.283395,0.05668 0.368856,-0.112065 0.241614,-0.477073 -0.112466,-0.322615 -0.0521,-0.488274 0.190914,-0.523926 0.282085,-0.04138 0.275753,-0.178695 -0.0159,-0.344714 -0.372875,-0.212257 -0.318877,-0.509025 0.105084,-0.577533 0.170617,-0.02757 0.410723,-0.11599 0.533583,-0.196487 0.13745,-0.09006 0.3438,-0.136354 0.53645,-0.120346 0.29971,0.0249 0.31747,0.0441 0.41586,0.449347 0.10671,0.439521 0.4363,0.813587 0.87089,0.988415 0.39911,0.160553 1.13625,0.114064 1.47091,-0.09277 0.1689,-0.104386 0.30709,-0.226604 0.30709,-0.271596 0,-0.04499 0.0894,-0.16571 0.19866,-0.268262 0.11355,-0.106577 0.2211,-0.331545 0.25104,-0.525123 0.0441,-0.285165 0.0127,-0.397527 -0.19866,-0.711241 -0.13807,-0.204916 -0.25118,-0.395416 -0.25136,-0.423333 -1.7e-4,-0.02792 -0.16656,-0.119115 -0.36974,-0.202659 -0.49565,-0.203794 -0.64798,-0.385143 -1.117,-1.329768 -0.21965,-0.442383 -0.4937,-0.928033 -0.60899,-1.079221 -0.20471,-0.268447 -0.20659,-0.28432 -0.0804,-0.677333 0.25067,-0.780686 0.41904,-1.829562 0.36999,-2.30481 -0.0557,-0.54001 -0.21064,-0.699697 -0.64274,-0.662571 -0.27297,0.02345 -0.30439,0.05964 -0.52916,0.609304 -0.13143,0.321403 -0.23955,0.664303 -0.24026,0.762 -6.8e-4,0.0977 -0.0388,0.234781 -0.0847,0.304631 -0.13226,0.20148 -0.24986,-0.05043 -0.2514,-0.538498 -0.001,-0.374041 -0.0355,-0.445228 -0.377155,-0.782041 -0.333698,-0.328978 -0.370641,-0.402702 -0.329335,-0.657238 0.05329,-0.328412 -0.05152,-0.433822 -0.355506,-0.357528 -0.305394,0.07665 -0.422583,0.350616 -0.257649,0.602337 0.178246,0.272039 0.167591,0.490101 -0.03281,0.67146 -0.129433,0.117135 -0.17124,0.282598 -0.1905,0.753956 -0.01376,0.336828 -0.06212,0.600353 -0.109342,0.595897 -0.04657,-0.0044 -0.218554,-0.252045 -0.382193,-0.550334 -0.294331,-0.536516 -0.302128,-0.542907 -0.725669,-0.594749 -0.235478,-0.02882 -0.511166,-0.09684 -0.61264,-0.151146 -0.130281,-0.06972 -0.232622,-0.07298 -0.348265,-0.01109 -0.31853,0.170472 -0.578611,0.102071 -0.821196,-0.215972 -0.210832,-0.276416 -0.262421,-0.300463 -0.575808,-0.268402 -0.189326,0.01937 -0.416769,0.06707 -0.505429,0.106011 -0.148455,0.0652 -0.15728,0.04123 -0.11162,-0.303099 0.04099,-0.309103 0.116724,-0.432579 0.437056,-0.71256 0.213111,-0.186266 0.387165,-0.401181 0.386787,-0.477588 -3.39e-4,-0.07641 -0.07605,-0.305005 -0.168163,-0.508 -0.184569,-0.406752 -0.214995,-0.793182 -0.08862,-1.125567 0.09185,-0.241589 0.234787,-0.26646 0.656005,-0.114146 0.368077,0.133099 0.51449,0.03996 0.672645,-0.427914 0.177049,-0.523759 0.126997,-0.715684 -0.2042,-0.783016 -0.37518,-0.07627 -0.529688,-0.223607 -0.529688,-0.505089 0,-0.130672 -0.06113,-0.29871 -0.135833,-0.373418 -0.240434,-0.240636 -0.779742,-0.468925 -1.109442,-0.46972 -0.17648,-4.23e-4 -0.511373,-0.09448 -0.744206,-0.209019 C 93.497573,50.81535 93.209348,50.74537 92.91183,50.7436 c -0.376162,-0.0022 -0.484521,0.03486 -0.69816,0.239027 -0.212297,0.202883 -0.374271,0.259073 -1.009122,0.350068 -1.052334,0.150836 -1.097547,0.119532 -0.697971,-0.483251 0.527752,-0.796146 1.077265,-1.655433 1.245471,-1.947575 0.08637,-0.150012 0.263307,-0.309795 0.393189,-0.355072 0.129883,-0.04528 0.981498,-0.64644 1.892479,-1.335917 1.814635,-1.373409 3.372571,-2.441771 3.770398,-2.585571 0.07316,-0.02644 0.339858,-0.336576 0.592667,-0.689184 0.330524,-0.461002 0.563118,-0.692612 0.827952,-0.824456 0.24513,-0.122034 0.396853,-0.26526 0.453679,-0.428274 0.04696,-0.134706 0.194757,-0.301482 0.328438,-0.370612 0.26919,-0.139205 2.10925,-1.948459 2.10925,-2.07394 0,-0.100183 -0.63453,-0.504557 -0.79173,-0.504557 -0.1416,0 -2.601997,1.080809 -2.72021,1.194939 -0.04562,0.04404 -0.14328,0.234402 -0.217028,0.423023 -0.122558,0.313463 -0.196332,0.370663 -0.858046,0.665287 -0.460808,0.205171 -0.801908,0.307437 -0.938407,0.281343 -0.134712,-0.02575 -0.58031,0.103718 -1.198424,0.348207 -0.778467,0.307915 -1.088699,0.389201 -1.485401,0.389201 -0.275785,0 -0.518428,-0.02857 -0.539207,-0.0635 -0.02078,-0.03493 -0.122961,-0.5588 -0.227069,-1.164167 -0.104109,-0.605367 -0.219928,-1.181564 -0.257375,-1.280438 -0.0819,-0.216254 -0.414956,-0.315471 -0.697885,-0.207901 -0.178322,0.0678 -0.213408,0.149947 -0.262225,0.613971 -0.1831,1.740431 -0.208438,1.824818 -0.9742,3.244614 -0.368868,0.683916 -0.621658,1.015375 -1.312334,1.720738 -0.806458,0.823608 -2.219593,1.963137 -3.122906,2.518262 -0.222629,0.136815 -0.542193,0.353529 -0.710143,0.481588 -0.167949,0.128058 -0.389467,0.232833 -0.492263,0.232833 -0.192714,0 -0.467147,0.237356 -0.467147,0.404033 0,0.0519 -0.08402,0.153215 -0.186712,0.225143 -0.169528,0.118742 -0.17732,0.15675 -0.08467,0.412979 0.215136,0.594947 0.01348,1.087992 -0.48583,1.187854 -0.186693,0.03734 -0.286463,0.127657 -0.374947,0.339431 -0.06631,0.158706 -0.162554,0.314505 -0.213872,0.346221 -0.05132,0.03172 -0.09331,0.245317 -0.09331,0.474667 0,0.34002 0.04509,0.467466 0.244253,0.690368 0.221034,0.24738 0.264971,0.263927 0.462194,0.174066 0.193911,-0.08835 0.236994,-0.07508 0.390746,0.120388 0.09504,0.120827 0.174018,0.281223 0.175499,0.356435 0.0015,0.07521 0.05863,0.210706 0.127,0.301098 0.185691,0.245505 0.161862,0.91842 -0.03896,1.10016 -0.232599,0.210498 -0.436623,0.114398 -0.894191,-0.421192 -0.314134,-0.367697 -0.446476,-0.462317 -0.646628,-0.462317 -0.307176,0 -0.711968,-0.198847 -0.783322,-0.384793 -0.09916,-0.258406 -0.05255,-0.66026 0.09557,-0.823928 0.11461,-0.126642 0.149194,-0.319905 0.1527,-0.853333 0.0036,-0.550244 0.04273,-0.758057 0.193534,-1.02828 0.270111,-0.484004 0.639375,-0.980415 0.793433,-1.06663 0.07271,-0.04069 0.156121,-0.201457 0.185349,-0.357254 0.05585,-0.29768 0.177198,-0.428499 0.833984,-0.899034 0.411437,-0.294762 0.464599,-0.407891 0.319279,-0.679425 -0.111272,-0.207914 0.09485,-0.378594 0.372933,-0.308801 0.323268,0.08113 0.330258,-0.07605 0.01566,-0.352266 -0.17967,-0.157752 -0.424105,-0.272191 -0.655892,-0.307075 -0.320867,-0.04829 -0.439579,-0.132994 -0.902183,-0.643748 -0.589942,-0.651344 -0.955895,-0.818982 -1.596243,-0.731212 -0.368758,0.05054 -0.453392,-0.01844 -0.453392,-0.369574 0,-0.08892 -0.135948,-0.238185 -0.3175,-0.348602 -0.174625,-0.106204 -0.572932,-0.437729 -0.885127,-0.736723 -0.489814,-0.469103 -0.598282,-0.53593 -0.791265,-0.487494 -0.246058,0.06176 -0.461442,-0.06467 -0.461442,-0.270859 0,-0.174644 -0.387607,-0.984586 -0.526249,-1.099648 -0.06099,-0.05062 -0.262814,-0.104401 -0.448491,-0.119513 -0.279148,-0.02272 -0.360071,-0.07243 -0.467435,-0.287158 -0.163248,-0.326495 -0.465266,-0.713984 -0.556496,-0.713984 -0.03812,0 -0.153387,0.104775 -0.256159,0.232833 -0.185199,0.230767 -0.18936,0.23157 -0.468846,0.09048 -0.155095,-0.07829 -0.367756,-0.166599 -0.47258,-0.196234 -0.104825,-0.02963 -0.225914,-0.119884 -0.269088,-0.200555 -0.163746,-0.305962 -0.0888,-1.703667 0.104214,-1.943546 0.04957,-0.06161 0.23556,-0.186211 0.4133,-0.276887 L 76.7201,39.053511 v 0.217592 c 0,0.119676 0.05656,0.326964 0.125686,0.460643 0.176339,0.341001 0.799252,0.828772 1.10198,0.862903 0.185478,0.02091 0.255569,0.07432 0.259817,0.19797 0.01212,0.352848 0.144124,0.558595 0.462633,0.721087 0.422392,0.215488 0.76371,0.213015 1.044132,-0.0076 0.187073,-0.147151 0.223085,-0.242818 0.223085,-0.592629 0,-0.573332 -0.223196,-1.817005 -0.425341,-2.370051 -0.25007,-0.684164 -0.227908,-0.818335 0.15207,-0.920652 0.18807,-0.05064 0.452098,-0.226046 0.64214,-0.426597 0.17751,-0.187325 0.367156,-0.345986 0.421438,-0.352579 0.05428,-0.0066 0.193943,-0.01612 0.31036,-0.02117 0.198321,-0.0086 0.218101,-0.05189 0.313725,-0.686514 0.05613,-0.372533 0.129031,-0.904034 0.161998,-1.181113 0.05857,-0.492253 0.07475,-0.51783 0.707001,-1.117881 0.355882,-0.337756 0.747455,-0.693075 0.870162,-0.789596 0.413368,-0.325155 0.388103,-0.476189 -0.175454,-1.048857 -0.65981,-0.670479 -0.757965,-1.0355 -0.355507,-1.322075 0.188946,-0.134542 0.33696,-0.175801 0.507973,-0.141599 0.164746,0.03295 0.277263,0.0049 0.354551,-0.08826 0.135009,-0.162798 0.591305,-0.364291 0.824965,-0.364291 0.111804,0 0.28623,0.181572 0.528677,0.550333 0.199003,0.302684 0.393109,0.550334 0.431347,0.550334 0.03824,0 0.257492,-0.09525 0.487229,-0.211667 0.504919,-0.255863 0.726461,-0.26694 0.846666,-0.04233 0.171262,0.320004 0.864439,0.135073 0.737141,-0.196662 -0.02409,-0.06278 -0.83798,-0.396643 -1.808639,-0.741911 L 83.7051,29.362618 69.565766,29.308715 c -7.776633,-0.02965 -14.215533,-0.05584 -14.308667,-0.0582 -0.09313,-0.0024 -2.998258,0.0146 -6.455833,0.03769 -7.093413,0.04738 -6.496708,0.109312 -6.063783,-0.629419 0.196103,-0.334624 0.216944,-0.441873 0.174398,-0.897482 -0.07153,-0.76596 -0.09137,-0.793039 -0.630368,-0.860383 -0.515746,-0.06444 -0.640438,-0.0184 -0.903112,0.333419 l -0.171195,0.229298 0.237939,0.189726 c 0.257227,0.205106 0.504566,0.89465 0.504996,1.407854 2.12e-4,0.255894 -0.08928,0.376662 -0.736827,0.994346 -0.405389,0.386691 -0.859428,0.764992 -1.008976,0.840669 -0.551266,0.27896 -0.806791,0.814202 -0.537895,1.126715 0.175152,0.203563 0.301355,0.649172 0.246037,0.868727 -0.06223,0.246995 -0.504102,1.04273 -0.643072,1.158064 -0.05736,0.04761 -0.440736,0.184054 -0.85194,0.303217 -0.675023,0.195613 -0.891235,0.216659 -2.225888,0.216659 -1.168255,0 -1.503607,-0.02536 -1.599196,-0.120953 -0.168277,-0.168277 -0.183272,-8.308482 -0.01512,-8.207459 0.08277,0.04973 0.08246,0.03472 -0.0014,-0.0689 -0.08452,-0.104389 -0.100663,-1.117631 -0.07615,-4.778753 0.01711,-2.55545 0.06008,-4.789673 0.09549,-4.96494 0.04118,-0.20385 0.02999,-0.360099 -0.03106,-0.433661 -0.06177,-0.07442 -0.09266,-0.53702 -0.08757,-1.311168 l 0.0079,-1.196171 h 0.49114 c 0.574169,0 0.640797,0.05724 0.770482,0.661941 0.08483,0.395545 0.116315,0.438679 0.319907,0.438253 0.1242,-2.62e-4 0.372033,-0.04107 0.550741,-0.0907 0.279644,-0.07765 0.342415,-0.06874 0.450438,0.06397 0.113901,0.139932 0.121244,0.117332 0.07937,-0.244287 -0.05611,-0.484492 -0.02035,-0.515629 0.648105,-0.564378 0.08149,-0.0059 0.148166,-0.06253 0.148166,-0.125755 0,-0.197681 1.590539,-0.238126 6.829161,-0.173655 3.842929,0.04729 4.960433,0.0848 5.030173,0.168833 0.09241,0.11135 0.5343,1.574865 0.630765,2.08907 0.07027,0.374594 -0.08119,0.929288 -0.334019,1.223215 l -0.199455,0.23188 -0.538478,-0.112003 c -0.687118,-0.142919 -2.008274,-0.347762 -2.624182,-0.406874 -0.5036,-0.04833 -0.549341,-0.03204 -2.322508,0.827232 -0.579267,0.280712 -1.417044,0.987416 -1.60776,1.356219 -0.06987,0.135105 -0.196358,0.245033 -0.281955,0.245033 -0.08539,0 -0.322531,0.13298 -0.526993,0.295512 -0.204462,0.162531 -0.419373,0.295881 -0.477582,0.296333 -0.05821,4.49e-4 -0.105833,0.03164 -0.105833,0.06931 0,0.171098 0.253964,0.359482 0.75543,0.56036 0.496675,0.198959 0.650046,0.217822 1.771066,0.217822 0.675015,0 1.45902,0.03647 1.742236,0.08105 0.283214,0.04457 0.906632,0.125205 1.385374,0.179177 l 0.870439,0.09813 0.408166,0.434656 c 0.954776,1.016743 1.041208,1.14396 1.326429,1.952355 0.359746,1.019614 0.476853,1.241305 0.864681,1.636888 0.174082,0.177562 0.479159,0.500976 0.677949,0.718698 l 0.361438,0.395858 0.908562,-0.0179 0.908563,-0.0179 0.02531,-0.258764 c 0.05276,-0.539448 -0.287424,-0.945728 -0.403972,-0.482464 -0.06255,0.248633 -0.474102,0.552472 -0.665879,0.491604 -0.461749,-0.146553 -0.691123,-0.722622 -0.691123,-1.735744 0,-0.792974 0.06425,-0.935633 0.421398,-0.935633 0.219708,0 0.763935,0.418815 0.763935,0.587895 0,0.04919 0.05715,0.08944 0.127,0.08944 0.09072,0 0.126347,-0.0907 0.124711,-0.3175 -0.0016,-0.225673 -0.174726,-0.648077 -0.598505,-1.4605 -0.576922,-1.106012 -0.601375,-1.177809 -0.75566,-2.218668 -0.156162,-1.053525 -0.156161,-1.102327 8.5e-5,-2.370667 l 0.159562,-1.294999 -0.628389,-1.119208 c -0.345612,-0.615565 -0.638306,-1.168015 -0.650428,-1.227667 -0.01212,-0.05965 -0.06014,-0.13645 -0.106709,-0.170662 -0.04657,-0.03421 4.458758,-0.06279 10.011833,-0.0635 5.553075,-7.13e-4 10.090902,0.02728 10.084061,0.0622 -0.04771,0.243534 0.191903,0.895782 0.676299,1.840941 0.562523,1.097602 0.565352,1.101204 1.241772,1.580945 l 0.677965,0.480836 1.4274,0.267624 c 0.78507,0.147193 1.458537,0.235869 1.496594,0.197056 0.03806,-0.03881 0.26444,-0.705168 0.503075,-1.48079 l 0.433881,-1.410221 -0.344552,-0.685279 c -0.189502,-0.376903 -0.315551,-0.685862 -0.280106,-0.686575 0.03544,-7.14e-4 0.0073,-0.03823 -0.06256,-0.08337 -0.08344,-0.05392 0.814316,-0.08252 2.617612,-0.08337 1.509535,-7.13e-4 2.719127,0.02419 2.687981,0.05533 -0.03115,0.03115 -0.0024,0.116871 0.06387,0.1905 0.178785,0.198633 0.433466,0.895021 0.597083,1.63264 0.07956,0.358657 0.192098,0.691483 0.250093,0.739615 0.09524,0.07904 1.258175,0.412785 2.123032,0.609274 0.328927,0.07473 0.635029,0.169122 2.016057,0.621692 0.576008,0.18876 0.747865,0.209529 1.331223,0.160879 0.495234,-0.0413 0.706949,-0.09688 0.812232,-0.213212 0.143557,-0.15863 0.782386,-0.221276 1.082411,-0.106145 0.2265,0.08692 0.06215,0.194116 -0.226974,0.148043 -0.4622,-0.07365 -0.707478,0.07587 -0.770449,0.469667 -0.04315,0.269847 -0.110375,0.372147 -0.313612,0.477245 -0.492809,0.254842 -0.170815,0.400394 0.556445,0.251533 0.201187,-0.04118 0.303297,-0.0055 0.491086,0.171527 0.17303,0.163129 0.213333,0.252136 0.149171,0.329445 -0.112323,0.135342 -0.744283,0.32686 -0.854263,0.258889 -0.04594,-0.02839 -0.103815,0.0013 -0.128617,0.06589 -0.08899,0.231919 0.310194,0.931839 1.075578,1.885864 0.735394,0.916645 0.795871,0.97069 1.086217,0.97069 0.169105,0 0.381421,-0.05594 0.471813,-0.124308 0.210027,-0.158857 0.291349,-0.160806 0.291349,-0.007 0,0.101809 0.213977,0.122112 1.256433,0.119215 0.691038,-0.0019 1.29122,-0.02856 1.333738,-0.05921 0.04252,-0.03064 0.187588,-0.227165 0.322379,-0.436715 0.134791,-0.20955 0.344473,-0.5334 0.46596,-0.719667 0.121486,-0.186267 0.294769,-0.4936 0.385072,-0.682963 0.175984,-0.369033 0.454517,-0.521252 1.104751,-0.603748 0.621342,-0.07883 0.595306,-0.209706 -0.0635,-0.319196 -0.267598,-0.04447 -0.3175,-0.08585 -0.3175,-0.263253 0,-0.243755 0.201198,-0.354396 0.377852,-0.207786 0.08031,0.06666 0.379421,0.09165 0.879624,0.07351 0.828291,-0.03004 1.042838,0.0606 1.149523,0.485669 0.02836,0.11299 0.101344,0.205436 0.162189,0.205436 0.06085,0 0.200111,0.09525 0.309479,0.211666 0.109368,0.116417 0.236499,0.211667 0.282513,0.211667 0.04601,0 0.258448,0.111697 0.472074,0.248215 0.356337,0.227714 1.022017,0.498932 2.970747,1.21037 0.39582,0.144504 0.76591,0.304062 0.82242,0.354575 0.14883,0.133016 -1.03041,3.246384 -1.95745,5.168008 -0.40336,0.836091 -0.72188,1.579041 -0.70783,1.651 0.0141,0.07196 0.10979,0.131932 0.21275,0.133276 0.24193,0.0032 0.37981,0.144041 0.31254,0.319347 -0.0425,0.110792 -0.12767,0.128222 -0.42639,0.08728 -0.34928,-0.04787 -0.39229,-0.03099 -0.66932,0.262747 -0.16283,0.172649 -0.29631,0.33977 -0.29663,0.371379 -3.4e-4,0.03161 -0.13367,0.148109 -0.296336,0.258886 -0.162665,0.110778 -0.295755,0.247747 -0.295755,0.304377 0,0.05663 -0.07836,0.173878 -0.174129,0.260549 -0.124273,0.112466 -0.159201,0.217064 -0.121989,0.365326 0.04588,0.182805 0.809079,1.350095 1.368879,2.093659 0.31886,0.423534 0.271,0.486918 -0.5708,0.755939 -0.422421,0.134998 -0.790181,0.281276 -0.817242,0.325063 -0.02706,0.04379 0.05186,0.153229 0.175372,0.243205 l 0.224576,0.163592 v 1.347605 c 0,0.741182 0.0322,1.347605 0.07154,1.347605 0.03935,0 0.141811,-0.07764 0.227692,-0.172541 0.162122,-0.179149 0.400762,-0.175714 0.892972,0.01285 0.36526,0.139936 0.83979,0.778991 0.83979,1.130969 0,0.366323 0.15528,0.451972 0.45882,0.253081 0.2025,-0.132683 0.23393,-0.133065 0.42905,-0.0052 0.20551,0.134658 0.21013,0.160651 0.19327,1.089238 -0.0171,0.940055 -0.0135,0.958969 0.29747,1.601905 l 0.31472,0.650617 v 2.090806 c 0,2.017271 -0.007,2.111444 -0.21167,2.677595 -0.28583,0.792396 -0.27518,1.016276 0.0635,1.335335 0.30019,0.282786 0.3702,0.284461 1.20963,0.02895 0.40397,-0.122962 0.48504,-0.11822 1.53708,0.0899 l 1.11061,0.219711 0.72929,-0.336935 c 0.40112,-0.185311 0.804,-0.336932 0.8953,-0.336932 0.11168,0 0.29208,0.191378 0.55131,0.584864 l 0.38531,0.584863 -0.26047,1.087303 c -0.45896,1.915908 -0.60792,2.329308 -1.37495,3.815926 -0.41392,0.802241 -0.72868,1.497302 -0.69946,1.544579 0.0292,0.04728 0.10356,0.280396 0.1652,0.518044 0.101,0.389348 0.0957,0.475244 -0.0533,0.86842 -0.091,0.239984 -0.32445,0.882022 -0.51888,1.426753 -0.40231,1.127144 -0.38477,1.243617 0.16443,1.091974 0.28541,-0.0788 0.34799,-0.06876 0.49642,0.07967 0.15671,0.156705 0.15995,0.187471 0.0419,0.397716 -0.10095,0.179862 -0.22797,0.247919 -0.60288,0.323022 -0.86668,0.173614 -0.98517,0.293068 -1.36108,1.372138 -0.31912,0.916066 -0.32682,0.963255 -0.19899,1.219507 0.0731,0.146613 0.13298,0.300905 0.13298,0.342872 0,0.04197 -0.16109,0.312339 -0.35797,0.600826 -0.19688,0.288486 -0.34948,0.564044 -0.33909,0.612349 0.0104,0.0483 -0.0952,0.155235 -0.23469,0.23762 -0.13947,0.08239 -0.25358,0.186539 -0.25358,0.231453 0,0.201199 -0.56431,1.211757 -0.74149,1.327851 -0.31363,0.205498 -0.3716,0.388179 -0.26707,0.841631 0.20739,0.899692 0.26656,1.066323 0.55107,1.551757 0.3041,0.518878 0.6205,0.759527 0.99863,0.759527 0.22985,0 0.30388,-0.07971 0.43254,-0.465667 0.0777,-0.233127 0.13614,-0.264437 0.71104,-0.381 0.6659,-0.135014 0.88944,-0.305154 0.70031,-0.533033 -0.0566,-0.06814 -0.21626,-0.146582 -0.35492,-0.174314 -0.2884,-0.05768 -0.35512,-0.349213 -0.0986,-0.430643 0.2759,-0.08756 0.78311,-0.612306 0.72876,-0.753942 -0.13546,-0.352974 0.32243,-0.313718 0.85337,0.07316 0.37028,0.269824 1.02795,0.477892 1.60866,0.508946 0.61584,0.03293 1.48824,0.253199 1.5809,0.399154 0.27306,0.430096 -0.49569,0.913283 -1.16084,0.729628 -0.24798,-0.06847 -0.3474,-0.05318 -0.57707,0.08876 -0.15261,0.09431 -0.34754,0.248913 -0.43318,0.343549 -0.0856,0.09464 -0.23254,0.172067 -0.32643,0.172067 -0.36306,0 -0.45642,0.203154 -0.37912,0.824982 0.0391,0.31461 0.0513,0.655319 0.027,0.757133 -0.0677,0.284113 0.11677,1.008665 0.32252,1.266801 0.10132,0.127117 0.26317,0.385838 0.35966,0.574936 0.14519,0.284546 0.22434,0.348578 0.45916,0.37144 0.15606,0.01519 0.36286,-0.0081 0.45957,-0.05176 0.80314,-0.36262 0.76992,-0.357445 1.1133,-0.173405 0.23403,0.125433 0.40693,0.158188 0.63907,0.121066 0.17935,-0.02868 0.34113,-0.01386 0.37067,0.03396 0.0289,0.04667 0.12775,0.08485 0.21976,0.08485 0.24743,0 0.53972,0.220052 0.7854,0.591295 0.16563,0.250289 0.28241,0.33533 0.48836,0.355657 0.2135,0.02107 0.30921,0.09576 0.45303,0.353557 0.22939,0.411175 0.42021,0.525794 0.67904,0.407865 0.1455,-0.0663 0.23312,-0.05873 0.35059,0.03026 0.2375,0.179935 0.42157,0.150935 1.09361,-0.172302 0.33885,-0.162984 0.67184,-0.296334 0.73997,-0.296334 0.0681,0 0.18629,0.09525 0.26257,0.211667 0.18225,0.27815 0.34497,0.267852 0.46819,-0.02963 0.0563,-0.135786 0.32914,-0.400572 0.62411,-0.605554 0.46151,-0.320727 0.60812,-0.374872 1.22678,-0.453071 0.62792,-0.07937 0.73369,-0.07208 0.99483,0.06855 0.35136,0.189221 0.38635,0.343323 0.0594,0.26153 -0.61133,-0.152926 -0.7751,-0.148106 -1.02549,0.03018 -0.13791,0.0982 -0.50176,0.256083 -0.80856,0.350844 -0.49654,0.153366 -0.57659,0.209091 -0.72872,0.507281 -0.20836,0.408424 -0.31045,1.05166 -0.17973,1.13245 0.051,0.03149 0.2853,0.08007 0.52078,0.107956 0.3553,0.04208 0.4601,0.02172 0.61585,-0.119639 0.10324,-0.09369 0.28786,-0.193965 0.41027,-0.22283 0.33895,-0.07992 0.97145,0.149488 1.34661,0.488422 0.22056,0.199262 0.41955,0.303838 0.57815,0.303838 0.29068,0 1.02767,0.609484 1.02767,0.849882 0,0.172909 -0.42978,0.334131 -0.89296,0.334978 -0.36309,6.78e-4 -1.68442,-0.294104 -2.83237,-0.63186 -0.89082,-0.262098 -1.86667,-0.417274 -2.62467,-0.417361 -0.16298,-1.9e-5 -0.54398,0.11919 -0.84667,0.264908 -0.5173,0.249041 -0.88273,0.344257 -1.48166,0.386058 -0.20858,0.01456 -0.28807,0.08528 -0.4445,0.395501 -0.10478,0.207776 -0.1905,0.489105 -0.1905,0.625177 0,0.387303 0.18561,0.910637 0.39849,1.123508 0.10679,0.106798 0.19417,0.289819 0.19417,0.406715 0,0.125884 0.069,0.249484 0.16934,0.30316 0.18232,0.09758 0.24393,0.621238 0.0847,0.719667 -0.25782,0.159342 0.0494,0.92334 0.4828,1.200735 0.30534,0.195423 0.44248,0.369056 0.44585,0.56447 0.006,0.339501 0.28355,0.734466 0.69401,0.987024 0.27385,0.168501 0.4707,0.367849 0.5662,0.573373 0.0805,0.173286 0.23041,0.448415 0.33312,0.611398 0.41918,0.665233 0.12533,0.803707 -0.32064,0.151096 -0.52254,-0.76465 -1.094,-1.327504 -1.40752,-1.386322 -0.3042,-0.05707 -0.33712,-0.11938 -0.19921,-0.377061 0.0745,-0.139154 0.0432,-0.179945 -0.22306,-0.291207 -0.301,-0.125763 -0.77604,-0.489015 -1.22869,-0.93954 -0.15357,-0.152855 -0.28145,-0.447268 -0.41429,-0.953865 -0.39957,-1.523697 -0.76684,-2.774441 -0.89309,-3.041414 -0.12118,-0.256247 -0.15389,-0.272996 -0.44365,-0.22716 -0.17205,0.02722 -0.8499,0.05646 -1.50631,0.06498 -1.43961,0.01869 -1.47352,0.03604 -1.47352,0.753933 0,0.432371 -0.044,0.577359 -0.3024,0.995968 -0.18049,0.292428 -0.38654,0.809539 -0.51113,1.282761 -0.2996,1.137989 -0.44958,1.570716 -0.58266,1.681167 -0.0643,0.05337 -0.14027,0.203327 -0.1688,0.333242 -0.0285,0.129915 -0.18338,0.440322 -0.34411,0.689794 -0.18475,0.28676 -0.29223,0.557887 -0.29223,0.737174 0,0.155973 -0.047,0.366808 -0.10443,0.468521 -0.0574,0.101714 -0.10506,0.280184 -0.10583,0.396601 -10e-4,0.18754 -0.0416,0.214595 -0.35428,0.237361 -0.33038,0.02406 -0.35142,0.01243 -0.33003,-0.182384 z m -4.31715,-13.763337 c 0.14901,-0.241105 -0.186,-0.437329 -0.4555,-0.266797 -0.10074,0.06375 -0.10259,0.09977 -0.0108,0.21037 0.12116,0.145995 0.39078,0.178621 0.4663,0.05643 z M 86.147363,46.66136 c 0.146889,-0.101709 0.403529,-0.305363 0.570313,-0.452565 0.180231,-0.159072 0.438729,-0.289306 0.637236,-0.321048 0.430905,-0.06891 1.352959,-0.818421 1.700845,-1.382578 0.139241,-0.225803 0.445918,-0.664838 0.681505,-0.975635 0.680908,-0.898285 0.792969,-1.478692 0.377439,-1.954923 -0.180306,-0.206647 -0.644945,-0.115749 -1.056569,0.206698 -0.175798,0.137713 -0.491373,0.326355 -0.701275,0.419205 -0.381328,0.168679 -0.381867,0.168679 -0.655281,-3.39e-4 -0.341213,-0.21088 -0.593057,-0.547786 -0.909219,-1.216312 -0.266225,-0.562932 -0.366885,-0.989593 -0.490452,-2.078855 -0.07836,-0.690736 -0.238376,-1.033389 -0.482596,-1.033389 -0.05677,0 -0.27196,0.09431 -0.478205,0.209586 -0.340029,0.190047 -0.662337,0.627812 -0.662337,0.899602 0,0.04809 -0.09525,0.212322 -0.211667,0.364953 -0.116417,0.15263 -0.211667,0.389057 -0.211667,0.525394 0,0.147048 -0.09804,0.367665 -0.241004,0.542341 -0.265462,0.32434 -0.436329,0.618016 -0.436329,0.749938 0,0.04709 0.103293,0.135317 0.22954,0.196066 0.487074,0.234378 0.372087,1.095245 -0.17045,1.27609 -0.490603,0.163535 -0.905757,-0.105975 -0.905757,-0.588 0,-0.411182 -0.430795,-0.958637 -0.754356,-0.958637 -0.133144,0 -0.305717,0.08123 -0.404707,0.1905 -0.256232,0.282839 -0.710583,1.265401 -0.761836,1.64752 l -0.04479,0.333932 0.511892,0.186645 c 0.405037,0.147684 0.551852,0.252375 0.703318,0.501525 0.316264,0.520225 0.697017,0.965016 0.888956,1.038464 0.09945,0.03805 0.348892,0.346388 0.554325,0.685186 0.345361,0.569566 0.411353,0.631208 0.875514,0.817798 0.944121,0.379533 1.475286,0.428647 1.847613,0.170838 z m 2.94857,-5.373863 c 0.08516,-0.07707 0.154834,-0.170864 0.154834,-0.208436 0,-0.03757 0.128938,-0.345993 0.28653,-0.685378 0.612745,-1.319596 0.72947,-1.582388 0.72947,-1.642321 0,-0.179731 0.307226,-0.371743 0.594802,-0.371743 0.241385,0 0.450055,-0.09688 0.897044,-0.41646 0.320368,-0.229053 0.705229,-0.533853 0.855248,-0.677334 0.150019,-0.14348 0.32215,-0.260873 0.382513,-0.260873 0.06036,0 0.24418,-0.09135 0.408482,-0.202992 0.261039,-0.177381 0.312639,-0.272967 0.408964,-0.757578 0.10023,-0.504256 0.152199,-0.594275 0.572644,-0.991914 0.403266,-0.381392 0.495016,-0.430806 0.71734,-0.386342 0.387687,0.07754 0.768365,-0.149561 0.734953,-0.438446 -0.02044,-0.176687 -0.08157,-0.237149 -0.273338,-0.270326 -0.296937,-0.05137 -0.377902,-0.215149 -0.137447,-0.278029 0.119844,-0.03134 0.172795,-0.114873 0.172795,-0.272592 0,-0.125073 0.0762,-0.324278 0.169333,-0.442678 0.09313,-0.1184 0.169334,-0.262903 0.169334,-0.321117 0,-0.11658 -0.265303,-0.311004 -0.846667,-0.620469 -0.20955,-0.111545 -0.43815,-0.248857 -0.508,-0.305138 -0.219856,-0.177144 -3.787774,-2.332379 -3.861175,-2.332379 -0.03847,0 -0.59398,0.347565 -1.234456,0.772367 -1.188378,0.788204 -1.195473,0.790737 -1.741203,0.621593 -0.232206,-0.07197 -0.257287,0.126981 -0.06298,0.499552 0.101069,0.193791 0.126478,0.618639 0.126478,2.114732 0,1.427827 0.03347,2.027992 0.141024,2.52848 l 0.141023,0.65626 -0.437357,0.46244 c -0.479798,0.507316 -0.475194,0.497676 -0.349711,0.732142 0.06819,0.127409 0.178958,0.163768 0.498941,0.163768 0.292238,0 0.42578,0.03774 0.461331,0.130385 0.02752,0.07171 0.04806,0.709886 0.04565,1.418166 -0.0045,1.317497 0.02294,1.516339 0.24476,1.774615 0.159578,0.185805 0.339451,0.18849 0.538841,0.008 z M 39.339765,22.354067 c 0.26782,-0.07715 0.433821,-0.175212 0.451881,-0.26695 0.02638,-0.133996 0.0372,-0.133294 0.142467,0.0092 0.08113,0.109854 0.140397,0.1282 0.205907,0.06373 0.08612,-0.08475 -0.05004,-0.654102 -0.251712,-1.052479 -0.08651,-0.170902 -0.577024,-0.124963 -0.800137,0.07494 -0.272626,0.244262 -0.363285,0.277649 -0.952257,0.350692 -0.712445,0.08835 -0.877018,0.327917 -0.558854,0.813497 0.13584,0.207318 0.169447,0.215176 0.740834,0.173216 0.329196,-0.02417 0.789038,-0.09883 1.021871,-0.165894 z m -4.724993,-6.727005 c -0.02147,-0.08238 -0.04044,-0.03548 -0.04217,0.104222 -0.0017,0.1397 0.01584,0.207101 0.03903,0.149779 0.02319,-0.05732 0.0246,-0.171623 0.0031,-0.254001 z m 77.637898,68.992469 c -0.34215,-0.134824 -0.1,-0.217189 0.6834,-0.232433 0.93964,-0.01828 1.13146,0.01277 1.06989,0.173226 -0.0496,0.129388 -0.45503,0.13379 -0.4571,0.005 -9e-4,-0.05644 -0.0221,-0.05644 -0.0636,0 -0.0823,0.112085 -0.46915,0.152819 -0.40079,0.04221 0.0287,-0.0465 -0.007,-0.08454 -0.0797,-0.08454 -0.0726,0 -0.13199,0.0381 -0.13199,0.08467 0,0.04657 -0.0594,0.08467 -0.132,0.08467 -0.0726,0 -0.10845,-0.0381 -0.0797,-0.08467 0.0288,-0.04657 0.012,-0.08467 -0.0373,-0.08467 -0.0493,0 -0.0897,0.0381 -0.0897,0.08467 0,0.09624 -0.0609,0.09881 -0.28143,0.01191 z m 30.16046,-0.06425 c -0.0534,-0.06435 -0.1836,-0.116994 -0.28934,-0.116994 -0.10573,0 -0.21357,-0.0556 -0.23965,-0.123557 -0.0525,-0.136955 -0.60226,-0.431742 -1.60785,-0.862243 -0.43974,-0.188252 -0.89756,-0.310637 -1.35756,-0.362907 -0.38173,-0.04338 -1.13548,-0.161128 -1.67498,-0.261672 -1.29269,-0.240909 -1.62732,-0.450277 -1.91802,-1.200054 -0.11385,-0.293645 -0.23076,-0.75848 -0.25981,-1.032965 l -0.0528,-0.499064 -0.35617,-0.104757 c -0.1959,-0.05761 -0.50115,-0.219579 -0.67835,-0.359918 -0.33914,-0.268603 -0.79111,-0.366715 -2.24157,-0.486587 -0.66776,-0.05519 -0.89419,-0.174839 -0.79922,-0.422332 0.0418,-0.108947 0.16435,-0.121351 0.75031,-0.07595 1.55283,0.120318 2.13665,0.244243 2.49057,0.528661 0.18196,0.146232 0.5394,0.327394 0.79431,0.402582 0.64207,0.18939 0.66483,0.218053 0.61865,0.779039 -0.0481,0.584404 0.2337,1.392196 0.57445,1.646594 0.23308,0.174025 1.33189,0.411182 2.78402,0.600875 0.7641,0.09982 1.0373,0.183299 1.94452,0.594193 l 1.05551,0.478061 h 6.83965 c 4.11944,0 6.83966,-0.03106 6.83966,-0.07809 0,-0.06757 -0.69924,-0.307638 -2.0108,-0.690366 -0.56617,-0.165212 -4.42209,-3.369308 -4.95776,-4.119679 -0.46078,-0.645462 -0.66397,-0.884901 -0.71099,-0.837873 -0.034,0.03397 0.36369,1.104566 0.49155,1.323343 0.35712,0.611062 0.44399,0.859494 0.48105,1.375662 0.0368,0.513474 0.0183,0.605641 -0.18323,0.910167 -0.25899,0.391377 -0.44374,0.424803 -0.87494,0.158306 -0.21763,-0.1345 -0.28085,-0.223601 -0.24794,-0.349443 0.0243,-0.0929 -0.0102,-0.251835 -0.0766,-0.35319 -0.0919,-0.140214 -0.10077,-0.253919 -0.0372,-0.475499 0.1505,-0.524752 0.10639,-0.654958 -0.38215,-1.128133 -0.25611,-0.248063 -0.46566,-0.494669 -0.46566,-0.548013 0,-0.05334 -0.16503,-0.174561 -0.36673,-0.26937 -0.2017,-0.09481 -0.4735,-0.31408 -0.60398,-0.487267 -0.1305,-0.173188 -0.4014,-0.416807 -0.60199,-0.541376 -0.23089,-0.14338 -0.43209,-0.360857 -0.54833,-0.592667 -0.20745,-0.413741 -0.56973,-0.831844 -0.72077,-0.831844 -0.0554,0 -0.14788,0.05673 -0.20543,0.126068 -0.13449,0.162061 -0.22908,0.09931 -0.37434,-0.248337 -0.0643,-0.154012 -0.31142,-0.49471 -0.54905,-0.757106 -0.41719,-0.460672 -0.43205,-0.494317 -0.43205,-0.978043 0,-0.433752 0.0284,-0.523335 0.21205,-0.667754 0.11663,-0.09174 0.23585,-0.285797 0.26494,-0.431241 0.0291,-0.145444 0.0861,-0.28495 0.12662,-0.310013 0.14343,-0.08865 0.0711,-0.204907 -0.12758,-0.204907 -0.2771,0 -0.40163,-0.180243 -0.37702,-0.54571 0.017,-0.252729 -0.0247,-0.346509 -0.22961,-0.515679 -0.13772,-0.113725 -0.33443,-0.229942 -0.43713,-0.25826 -0.15729,-0.04336 -0.17895,-0.09359 -0.13737,-0.318419 0.0272,-0.146812 0.1936,-0.533632 0.36991,-0.859599 0.1763,-0.325967 0.41273,-0.764117 0.5254,-0.973667 0.11267,-0.20955 0.43424,-0.8001 0.7146,-1.312333 l 0.50973,-0.931334 0.23111,-1.947333 c 0.48152,-4.057261 0.53773,-4.390337 1.27014,-7.526172 l 0.72953,-3.123505 -0.89901,-2.376638 c -0.49445,-1.307151 -0.9908,-2.557783 -1.10299,-2.779181 -0.11219,-0.221399 -0.20399,-0.462222 -0.20399,-0.535164 0,-0.07294 -0.40781,-1.188634 -0.90624,-2.479314 -0.84051,-2.176469 -0.90505,-2.385574 -0.88968,-2.882701 0.0174,-0.564545 -0.0496,-0.769088 -0.3653,-1.114993 -0.14722,-0.161285 -0.49961,-1.320066 -1.48051,-4.868333 -0.70802,-2.561167 -1.3308,-4.699858 -1.38395,-4.752645 -0.22087,-0.219343 -2.06767,-0.651158 -3.38974,-0.792584 -0.67584,-0.0723 -0.75393,-0.143136 -1.12057,-1.016438 -0.12708,-0.302684 -0.36338,-0.836084 -0.5251,-1.185334 -0.16172,-0.34925 -0.28717,-0.7112 -0.27876,-0.804333 0.014,-0.155377 0.008,-0.157122 -0.076,-0.02117 -0.0502,0.08149 -0.16556,0.148167 -0.25638,0.148167 -0.19768,0 -0.20976,0.149077 -0.0386,0.477155 0.28301,0.542651 0.0893,1.07219 -0.42774,1.169184 -0.55566,0.104242 -0.80873,-0.239961 -0.80582,-1.096006 0.002,-0.469615 0.0891,-0.626669 0.47486,-0.852768 0.21015,-0.123157 0.42066,-0.295991 0.4678,-0.384076 0.12589,-0.235223 0.29858,-0.195477 0.41955,0.09656 0.0585,0.141193 0.12306,0.239984 0.14351,0.219535 0.0739,-0.07391 -0.23671,-0.560917 -0.35776,-0.560917 -0.0683,0 -0.17206,0.07778 -0.23066,0.172851 -0.0586,0.09507 -0.26694,0.267224 -0.46297,0.38257 l -0.35642,0.20972 -0.46725,-0.467237 c -0.36593,-0.36594 -0.52728,-0.469188 -0.74424,-0.476237 -0.56633,-0.0184 -1.04304,-0.139169 -1.17447,-0.297536 -0.0533,-0.06424 -0.14351,-0.116797 -0.20045,-0.116797 -0.0569,0 -0.17449,-0.07844 -0.26125,-0.174303 -0.10299,-0.113803 -0.24713,-0.168508 -0.41529,-0.157609 -0.14165,0.0092 -0.33375,-0.0112 -0.42688,-0.0453 -0.0931,-0.0341 -0.27411,-0.101145 -0.40217,-0.148997 -0.21355,-0.0798 -0.3324,-0.320458 -0.15825,-0.320458 0.13948,0 1.23716,0.436391 1.36475,0.542564 0.34191,0.284518 0.83276,0.484083 1.38236,0.56203 0.53921,0.07647 0.64411,0.123139 0.94864,0.422027 0.50445,0.49507 0.9831,0.427989 1.32937,-0.186303 l 0.17513,-0.310682 -0.43609,-1.01605 c -0.23984,-0.558827 -0.43607,-1.083066 -0.43607,-1.164974 0,-0.08191 -0.0427,-0.284978 -0.0948,-0.451267 -0.29506,-0.940818 -0.45654,-1.066673 -1.4764,-1.150725 -0.36843,-0.03036 -0.70838,-0.079 -0.75544,-0.108088 -0.0777,-0.048 -0.45718,-0.08377 -1.08117,-0.101914 -0.18812,-0.0055 -0.23283,-0.04619 -0.23283,-0.212047 0,-0.261081 -0.0565,-0.288434 -1.48167,-0.717488 -1.62331,-0.488703 -1.57632,-0.450672 -1.51104,-1.222911 0.0503,-0.594762 0.0371,-0.661524 -0.26227,-1.332322 -0.17335,-0.388401 -0.37001,-0.815544 -0.43701,-0.949207 -0.09,-0.179612 -0.0974,-0.272442 -0.0282,-0.35577 0.13451,-0.162078 0.0237,-0.42754 -0.2641,-0.632439 -0.2206,-0.157084 -0.24903,-0.22732 -0.24931,-0.616033 0,-0.441431 -0.23586,-0.989068 -0.42539,-0.989068 -0.0493,0 -0.26889,-0.166437 -0.48808,-0.369859 -0.54489,-0.505672 -0.89977,-0.675024 -1.30159,-0.621128 -0.29762,0.03992 -0.34979,0.01484 -0.61601,-0.296184 -0.15997,-0.186887 -0.35788,-0.526178 -0.43979,-0.753979 -0.0819,-0.227801 -0.18354,-0.414184 -0.22584,-0.414184 -0.0698,0 -4.32227,1.309266 -7.31585,2.25242 l -1.20319,0.379078 -0.18398,0.504584 c -0.10119,0.277522 -0.21923,0.504585 -0.2623,0.504585 -0.0431,0 -0.0475,0.04763 -0.01,0.105834 0.0377,0.05821 0.11332,0.296333 0.16811,0.529166 l 0.0996,0.423334 -0.0424,-0.508 c -0.0556,-0.666547 0.1911,-1.386629 0.47815,-1.395753 0.0233,-7.37e-4 0.036,0.413755 0.0284,0.9211 -0.0139,0.916175 -0.0123,0.924054 0.23284,1.15889 0.13573,0.130044 0.24679,0.275035 0.24679,0.322203 0,0.0491 -0.0434,0.04233 -0.1016,-0.01584 -0.0559,-0.05588 -0.1416,-0.101017 -0.1905,-0.100304 -0.0489,7.11e-4 -0.0347,0.03557 0.0315,0.07747 0.0662,0.0419 0.14715,0.241337 0.1799,0.443203 l 0.0596,0.367031 0.0143,-0.338667 0.0143,-0.338667 0.12734,0.338667 c 0.07,0.186267 0.20609,0.605367 0.30236,0.931333 0.30972,1.048825 0.37525,1.175001 0.7475,1.439334 0.31809,0.225881 0.36062,0.296178 0.38418,0.635 0.0246,0.354574 0.0734,0.425043 0.70304,1.016 0.37212,0.34925 0.71275,0.7112 0.75698,0.804333 0.0442,0.09313 0.0761,0.750355 0.0709,1.460493 -0.009,1.233375 -0.002,1.291801 0.15989,1.305534 0.43341,0.0368 0.93512,-0.04493 1.17546,-0.191489 0.36062,-0.219898 0.824,-0.202329 1.3222,0.05013 0.22974,0.116417 0.5041,0.211667 0.60968,0.211667 0.10559,0 0.38307,0.0924 0.61665,0.205332 0.23357,0.112932 0.59612,0.270141 0.80567,0.349353 0.46328,0.175123 1.18136,0.532711 1.35467,0.6746 0.0698,0.05719 0.2794,0.151493 0.46567,0.209572 0.36655,0.114294 0.58044,0.256776 0.37676,0.250986 -0.0675,-0.0019 -0.29421,-0.09307 -0.50376,-0.202561 -0.86266,-0.450738 -1.69171,-0.834793 -2.37067,-1.098202 -1.31996,-0.512093 -1.67058,-0.587884 -1.57569,-0.340596 0.0362,0.09445 0.008,0.12496 -0.0968,0.104968 -0.0813,-0.0155 -0.15963,-0.110297 -0.17399,-0.210658 -0.0391,-0.273048 -0.24173,-0.302869 -0.6804,-0.100127 -0.90368,0.417665 -1.73446,0.329836 -2.02345,-0.213917 -0.10844,-0.204029 -0.14732,-0.230311 -0.17172,-0.116073 -0.0173,0.08122 0.0541,0.271722 0.15882,0.423333 0.1047,0.151611 0.15977,0.248601 0.12238,0.215533 -0.11308,-0.100008 -0.49392,0.14726 -1.06822,0.69356 -0.49984,0.475476 -0.56899,0.514323 -0.84096,0.472419 -0.16298,-0.02511 -0.56331,-0.04608 -0.88962,-0.04659 l -0.59329,-9.31e-4 -0.7928,-0.622477 c -0.77767,-0.610592 -0.81483,-0.628621 -1.94671,-0.944416 -1.7667,-0.492908 -1.68663,-0.445505 -2.46017,-1.45653 -0.45923,-0.600222 -0.68278,-0.966007 -0.68148,-1.115073 0.002,-0.228014 0.45017,-1.967887 0.54749,-2.125354 0.0299,-0.04838 0.58881,-0.454586 1.24201,-0.902673 l 1.18765,-0.814705 -0.0596,-1.06822 c -0.0572,-1.025133 -0.0718,-1.088711 -0.36209,-1.57622 -0.59874,-1.005659 -2.02834,-3.143735 -2.45772,-3.67571 -0.24107,-0.298673 -0.43831,-0.593027 -0.43831,-0.654119 0,-0.08623 -0.31728,-0.116761 -1.41816,-0.136482 -0.77999,-0.01397 9.47843,-0.03456 22.7965,-0.04575 13.31806,-0.01119 26.93882,-0.04394 30.26833,-0.07278 l 6.05367,-0.05244 v 35.648924 c 0,28.509528 -0.0212,35.631337 -0.10583,35.561112 -0.074,-0.06137 -0.10584,-0.0592 -0.10584,0.0072 0,0.05227 -0.0857,0.09445 -0.1905,0.09374 -0.15404,-0.0011 -0.1662,-0.017 -0.0635,-0.08337 0.0763,-0.04932 0.0868,-0.08259 0.0262,-0.08337 -0.0554,-6.78e-4 -0.12438,0.0368 -0.15316,0.08337 -0.0288,0.04657 -0.10947,0.08467 -0.17932,0.08467 -0.0698,0 -0.10346,-0.0381 -0.0747,-0.08467 0.0288,-0.04657 0.012,-0.08467 -0.0373,-0.08467 -0.0493,0 -0.0897,0.0381 -0.0897,0.08467 0,0.1225 -0.31665,0.10425 -0.36726,-0.02117 -0.0342,-0.08467 -0.044,-0.08467 -0.0494,0 -0.004,0.05821 -0.0988,0.105833 -0.2113,0.105833 -0.11253,0 -0.22393,-0.04762 -0.24754,-0.105833 -0.0323,-0.07966 -0.0647,-0.07453 -0.13072,0.02075 -0.0765,0.110283 -0.10212,0.106963 -0.19918,-0.02577 -0.11037,-0.150947 -0.40327,-0.125348 -0.40327,0.03525 0,0.04158 -0.0857,0.07502 -0.1905,0.07431 -0.15405,-0.0011 -0.16621,-0.017 -0.0635,-0.08337 0.10348,-0.06688 0.093,-0.08231 -0.0565,-0.08337 -0.10089,-6.78e-4 -0.20567,0.04633 -0.23284,0.104537 -0.0395,0.08467 -0.0593,0.08467 -0.0988,0 -0.0586,-0.125529 -0.37394,-0.14338 -0.37394,-0.02117 0,0.04657 -0.0975,0.08467 -0.21667,0.08467 -0.12288,0 -0.19401,-0.03665 -0.16433,-0.08467 0.0288,-0.04657 0.0152,-0.08467 -0.0303,-0.08467 -0.0454,0 -0.10194,0.04763 -0.12555,0.105833 -0.0333,0.08215 -0.061,0.08001 -0.12381,-0.0096 -0.0683,-0.09744 -0.088,-0.09744 -0.12676,0 -0.0326,0.08194 -0.0478,0.08472 -0.0526,0.0096 -0.008,-0.128599 -0.34535,-0.143363 -0.34535,-0.01512 0,0.04989 -0.0599,0.03084 -0.13304,-0.04233 -0.16582,-0.165815 -0.24426,-0.166986 -0.40519,-0.006 -0.15681,0.156803 -0.25984,0.160564 -0.38154,0.01393 -0.0516,-0.06219 -0.24546,-0.119014 -0.43077,-0.126275 -0.26701,-0.01046 -0.32687,0.013 -0.28846,0.113074 0.034,0.08849 -0.008,0.126275 -0.139,0.126275 -0.13183,0 -0.17299,-0.03768 -0.13872,-0.127 0.0376,-0.09798 -0.019,-0.127 -0.2476,-0.127 -0.1853,0 -0.31458,0.04758 -0.34506,0.127 -0.06,0.156315 -0.28462,0.168822 -0.28462,0.01585 0,-0.156198 -2.04338,-0.151011 -2.0955,0.0053 -0.0194,0.05821 -0.0743,0.105833 -0.12194,0.105833 -0.0477,0 -0.0681,-0.04849 -0.0453,-0.107758 0.0314,-0.08187 -0.12668,-0.107757 -0.65823,-0.107757 -0.53154,0 -0.68965,0.02588 -0.65823,0.107757 0.0258,0.06724 -0.0291,0.107757 -0.1461,0.107757 -0.13135,0 -0.17295,-0.03779 -0.139,-0.126257 0.0404,-0.105312 -0.0479,-0.123354 -0.53249,-0.108748 -0.48529,0.01463 -0.558,0.03497 -0.44157,0.123565 0.0767,0.05833 0.0964,0.107266 0.0439,0.108748 -0.0525,0.0015 -0.14259,-0.05409 -0.20018,-0.123495 -0.12921,-0.155679 -0.67616,-0.137599 -0.61573,0.02035 0.0249,0.06499 -0.0318,0.105833 -0.14695,0.105833 -0.12299,0 -0.1723,-0.03948 -0.1434,-0.114804 0.0356,-0.09269 -0.14014,-0.113474 -0.91228,-0.107906 -0.73798,0.0053 -0.9469,0.03154 -0.91495,0.114803 0.0255,0.06639 -0.0272,0.107907 -0.13698,0.107907 -0.19464,0 -0.24212,-0.129509 -0.0726,-0.197927 0.0582,-0.02349 0.002,-0.04571 -0.12434,-0.04939 -0.17128,-0.005 -0.2177,0.02581 -0.18144,0.120316 0.0343,0.08932 -0.007,0.127 -0.13872,0.127 -0.13183,0 -0.17299,-0.03768 -0.13872,-0.127 0.033,-0.08595 -0.004,-0.127 -0.11528,-0.127 -0.111,0 -0.14827,0.04104 -0.11528,0.127 0.0343,0.08932 -0.007,0.127 -0.13872,0.127 -0.13183,0 -0.17299,-0.03768 -0.13872,-0.127 0.0382,-0.09964 -0.0231,-0.127 -0.28461,-0.127 -0.26153,0 -0.32285,0.02736 -0.28462,0.127 0.0338,0.08813 -0.006,0.127 -0.12966,0.127 -0.19464,0 -0.24212,-0.129509 -0.0726,-0.197927 0.0582,-0.02349 0.002,-0.04571 -0.12434,-0.04939 -0.17128,-0.005 -0.2177,0.02581 -0.18144,0.120316 0.0343,0.08932 -0.007,0.127 -0.13872,0.127 -0.13183,0 -0.17299,-0.03768 -0.13871,-0.127 0.033,-0.08595 -0.004,-0.127 -0.11529,-0.127 -0.111,0 -0.14826,0.04104 -0.11528,0.127 0.0343,0.08932 -0.007,0.127 -0.13872,0.127 -0.13183,0 -0.17299,-0.03768 -0.13871,-0.127 0.033,-0.08595 -0.004,-0.127 -0.11529,-0.127 -0.111,0 -0.14826,0.04104 -0.11528,0.127 0.0369,0.0961 -0.0153,0.127 -0.21432,0.127 -0.26362,0 -0.35581,-0.116756 -0.15723,-0.199115 0.0582,-0.02414 -0.20532,-0.03153 -0.58561,-0.01641 -0.3803,0.01512 -0.73899,0.05686 -0.7971,0.09278 -0.18582,0.114849 -0.57846,0.106603 -0.67876,-0.01425 z m 4.54904,-8.139161 c -0.2042,-0.314325 -0.41752,-0.747141 -0.47403,-0.961814 -0.0866,-0.329107 -0.1944,-0.465195 -0.68726,-0.867834 -0.5529,-0.451695 -0.75478,-0.561807 -0.75478,-0.411691 0,0.148201 0.26287,0.426041 0.44675,0.472192 0.11071,0.02778 0.25471,0.170826 0.32938,0.327175 0.073,0.152793 0.2711,0.443335 0.44027,0.645649 0.16918,0.202314 0.3076,0.457987 0.3076,0.568162 0,0.110175 0.0598,0.249445 0.13287,0.309489 0.0731,0.06005 0.2133,0.194897 0.31161,0.299672 0.34112,0.363589 0.3169,0.18746 -0.0524,-0.381 z m 3.13693,-30.713807 c 0.0136,-0.132115 0.008,-0.136462 -0.0264,-0.0202 -0.024,0.08149 -0.098,0.148167 -0.16447,0.148167 -0.20172,0 -0.17143,-3.062522 0.0376,-3.800872 0.29215,-1.031992 0.42422,-1.739119 0.48403,-2.591462 0.0327,-0.465666 0.11147,-0.995485 0.17509,-1.177374 0.0636,-0.181888 0.10008,-0.346282 0.0811,-0.365318 -0.0894,-0.08944 -0.29808,0.863484 -0.34702,1.585026 -0.0552,0.813995 -0.18969,1.531335 -0.47781,2.549128 -0.1295,0.457466 -0.15837,0.852361 -0.15837,2.166056 0,0.883626 0.0267,1.633311 0.0594,1.665965 0.10979,0.109795 0.31953,0.01075 0.33696,-0.159121 z m 0.0884,-0.907678 c -0.0188,-0.152176 -0.0346,-0.04808 -0.0351,0.231317 -8.5e-4,0.2794 0.0149,0.403907 0.0343,0.276683 0.0193,-0.127225 0.0197,-0.355825 8.4e-4,-0.508 z m 1.60223,-0.278964 c 0.0273,-0.07111 -0.0501,-0.273178 -0.17199,-0.449052 -0.12188,-0.175873 -0.2216,-0.367238 -0.2216,-0.425256 0,-0.05802 -0.0662,-0.22742 -0.14717,-0.376449 -0.081,-0.14903 -0.19278,-0.480512 -0.2485,-0.736629 l -0.10132,-0.465667 0.0467,0.458739 c 0.0257,0.252305 0.11833,0.576155 0.20585,0.719666 0.0875,0.143511 0.15925,0.320201 0.15943,0.392646 0,0.07244 0.0956,0.260822 0.21198,0.418616 0.23322,0.31612 0.2756,0.535447 0.0952,0.493041 -0.14138,-0.03324 -0.89957,-0.911117 -0.89957,-1.041579 0,-0.05114 -0.0709,-0.232057 -0.15756,-0.402028 -0.14126,-0.277086 -0.14718,-0.368656 -0.0572,-0.885735 0.0552,-0.317184 0.1665,-0.703082 0.24734,-0.85755 0.0808,-0.154468 0.13006,-0.344968 0.10936,-0.423333 -0.029,-0.109857 -0.0399,-0.102567 -0.0474,0.03184 -0.005,0.09587 -0.0658,0.248275 -0.13413,0.338666 -0.12001,0.158662 -0.12436,0.157025 -0.12584,-0.04732 -0.002,-0.3126 0.0893,-0.597394 0.1751,-0.544385 0.0413,0.02551 0.0751,-0.138896 0.0751,-0.365343 0,-0.360404 0.0374,-0.447991 0.30022,-0.702715 0.24672,-0.239132 0.29577,-0.342779 0.27517,-0.581564 -0.0138,-0.159814 -0.0736,-0.300184 -0.13301,-0.311932 -0.0594,-0.01175 -0.0689,-0.002 -0.0212,0.02168 0.18317,0.09084 0.0921,0.584811 -0.15068,0.817421 -0.13061,0.125129 -0.26323,0.227507 -0.29472,0.227507 -0.0315,0 -0.0336,-0.180975 -0.005,-0.402166 0.029,-0.221192 0.0305,-0.382197 0.003,-0.357788 -0.0271,0.02441 -0.0891,0.405409 -0.13771,0.846667 -0.17661,1.601649 -0.34499,2.67227 -0.47444,3.016597 -0.0895,0.238031 -0.12271,0.552611 -0.10282,0.973667 l 0.0294,0.622024 0.0168,-0.682318 c 0.01,-0.407385 0.062,-0.744132 0.129,-0.835726 0.10223,-0.139803 0.12822,-0.116117 0.29306,0.267066 0.20214,0.46989 0.92529,1.377978 1.09734,1.377978 0.0613,0 0.13373,-0.05818 0.16102,-0.129281 z m -0.56292,-3.909996 c 0,-0.501331 0.0222,-0.570233 0.254,-0.786724 0.15848,-0.148043 0.254,-0.321543 0.254,-0.461364 0,-0.136193 0.0913,-0.307946 0.23283,-0.437874 l 0.23284,-0.213782 -0.27517,0.191432 c -0.20326,0.141408 -0.27517,0.255644 -0.27517,0.43715 0,0.167046 -0.0813,0.317078 -0.254,0.468598 -0.23624,0.2073 -0.25421,0.264475 -0.257,0.817861 -0.002,0.35531 -0.0517,0.680243 -0.124,0.806646 -0.0665,0.116417 -0.12151,0.268817 -0.12214,0.338667 -8.5e-4,0.06985 0.0742,-0.03909 0.16634,-0.242079 0.11173,-0.246241 0.16747,-0.55195 0.16747,-0.918531 z m -0.22014,-1.907261 c 0.0574,-0.03837 0.0364,-0.0627 -0.055,-0.0635 -0.0995,-8.72e-4 -0.14597,0.06122 -0.14148,0.189204 0.004,0.127291 0.0227,0.148361 0.055,0.0635 0.0266,-0.06985 0.0902,-0.154992 0.14148,-0.189204 z m 1.49014,-0.234129 c 0.0995,-0.1397 0.16181,-0.254 0.13853,-0.254 -0.0233,0 -0.12372,0.1143 -0.2232,0.254 -0.0995,0.1397 -0.16181,0.254 -0.13853,0.254 0.0233,0 0.12372,-0.1143 0.2232,-0.254 z m 0.40698,-0.467907 c -0.0261,-0.02607 -0.0734,0.02092 -0.1052,0.104422 -0.046,0.120667 -0.0362,0.130391 0.0474,0.0474 0.0579,-0.05743 0.0839,-0.12575 0.0578,-0.151818 z m 0.0157,-0.524267 c -0.0917,-0.142958 -0.0942,-0.142735 -0.048,0.0043 0.0268,0.0853 0.0531,0.21865 0.0585,0.296333 0.009,0.127244 0.0136,0.126821 0.048,-0.0043 0.021,-0.08003 -0.005,-0.213379 -0.0585,-0.296334 z m -1.849,-0.135404 c 0.099,-0.194749 0.26985,-0.437995 0.37979,-0.540546 0.10994,-0.102552 0.19749,-0.254952 0.19453,-0.338667 -0.004,-0.11154 -0.0279,-0.09583 -0.0895,0.05881 -0.0463,0.116063 -0.13649,0.240307 -0.20045,0.276097 -0.064,0.03579 -0.22954,0.274181 -0.36796,0.529757 -0.13843,0.255575 -0.21672,0.443071 -0.17398,0.416658 0.0427,-0.02641 0.15865,-0.207364 0.25759,-0.402112 z m 2.01903,-0.608089 0.21166,-0.254 -0.23283,0.205258 c -0.12806,0.112893 -0.23283,0.243068 -0.23283,0.289278 0,0.04621 0.01,0.06814 0.0212,0.04874 0.0116,-0.0194 0.11642,-0.149578 0.23284,-0.289278 z m 0.11546,-0.647742 c -0.0858,-0.09475 -0.23253,-0.209938 -0.32618,-0.25597 -0.0937,-0.04603 -0.0465,0.01741 0.10488,0.140979 0.15134,0.12357 0.27817,0.288586 0.28185,0.366703 0.004,0.0956 0.0212,0.10583 0.051,0.0313 0.0244,-0.0609 -0.0258,-0.188257 -0.11158,-0.28301 z m -1.26778,-0.245408 c 0.0517,-0.07213 0.008,-0.04143 -0.0965,0.06822 -0.10477,0.109655 -0.18934,0.244872 -0.18792,0.300483 0.001,0.05561 0.0448,0.02491 0.0965,-0.06822 0.0517,-0.09313 0.13623,-0.22835 0.18792,-0.300483 z m 0.49615,-0.221257 c -0.0582,-0.02349 -0.15346,-0.02349 -0.21167,0 -0.0582,0.02349 -0.0106,0.0427 0.10584,0.0427 0.11641,0 0.16404,-0.01922 0.10583,-0.0427 z m -38.58744,-8.324958 c 0.0297,-0.04799 -0.004,-0.06219 -0.0797,-0.03327 -0.14667,0.05628 -0.17351,0.116972 -0.0517,0.116972 0.0438,0 0.10294,-0.03766 0.13139,-0.0837 z m -0.29839,-5.280648 c 10e-4,-0.03997 -0.0926,-0.04877 -0.20901,-0.01955 -0.17765,0.04459 -0.21324,0.02225 -0.22148,-0.138987 -0.008,-0.153594 -0.0178,-0.161063 -0.0498,-0.03725 -0.022,0.08517 -0.0166,0.248135 0.012,0.362134 0.0511,0.203517 0.0558,0.204545 0.25883,0.0568 0.11375,-0.08276 0.20802,-0.183172 0.20948,-0.223146 z m 0.42599,0.293404 c 0,-0.04158 -0.0603,-0.09873 -0.13392,-0.127 -0.20712,-0.07948 -0.23449,-0.06225 -0.12008,0.07561 0.11681,0.140748 0.254,0.168505 0.254,0.05139 z m -0.92099,-0.912875 c -0.0998,-0.171638 -0.12391,-0.116701 -0.0422,0.09621 0.029,0.07567 0.0706,0.119741 0.0924,0.09794 0.0218,-0.0218 -7.6e-4,-0.109168 -0.0502,-0.194152 z m -0.0372,-0.805392 c -0.027,-0.06754 -0.0471,-0.04748 -0.0512,0.05115 -0.004,0.08925 0.0163,0.139259 0.0445,0.111125 0.0281,-0.02813 0.0311,-0.101159 0.007,-0.162278 z m -0.13217,-0.379941 c -0.0998,-0.171638 -0.12391,-0.116701 -0.0422,0.09621 0.029,0.07567 0.0706,0.11974 0.0924,0.09794 0.0218,-0.0218 -7.6e-4,-0.109167 -0.0502,-0.194151 z m -0.70883,-1.10416 c -0.14231,-0.02156 -0.23284,-0.08795 -0.23284,-0.170759 0,-0.07452 -0.0237,-0.11173 -0.0528,-0.08269 -0.12167,0.121674 0.0584,0.313506 0.28297,0.30141 l 0.23549,-0.01269 z m -2.37966,-5.425259 c -0.0864,-0.01832 -0.1941,0.0036 -0.23926,0.04878 -0.053,0.05301 0.003,0.06481 0.15716,0.03331 0.17721,-0.03613 0.1985,-0.05742 0.0821,-0.08209 z m 33.64282,70.928241 c 0,-0.04932 0.0381,-0.06612 0.0847,-0.03734 0.0466,0.02878 0.0847,0.06913 0.0847,0.08966 0,0.02054 -0.0381,0.03734 -0.0847,0.03734 -0.0466,0 -0.0847,-0.04035 -0.0847,-0.08966 z m 0.59267,0.005 c 0,-0.04657 0.0381,-0.08467 0.0847,-0.08467 0.0466,0 0.0847,0.0381 0.0847,0.08467 0,0.04657 -0.0381,0.08467 -0.0847,0.08467 -0.0466,0 -0.0847,-0.0381 -0.0847,-0.08467 z m 2.54,0 c 0,-0.04657 0.0381,-0.08467 0.0847,-0.08467 0.0466,0 0.0847,0.0381 0.0847,0.08467 0,0.04657 -0.0381,0.08467 -0.0847,0.08467 -0.0466,0 -0.0847,-0.0381 -0.0847,-0.08467 z m 1.86267,0 c 0,-0.04657 0.0381,-0.08467 0.0847,-0.08467 0.0466,0 0.0847,0.0381 0.0847,0.08467 0,0.04657 -0.0381,0.08467 -0.0847,0.08467 -0.0466,0 -0.0847,-0.0381 -0.0847,-0.08467 z m 0.60085,-0.0069 c 0.14581,-0.09231 0.33051,-0.10031 0.33042,-0.01431 -3e-5,0.03493 -0.10112,0.06936 -0.22464,0.07652 -0.1607,0.0093 -0.19079,-0.0084 -0.10578,-0.0622 z m 0.66915,0.0069 c 0,-0.04657 0.0381,-0.08467 0.0847,-0.08467 0.0466,0 0.0847,0.0381 0.0847,0.08467 0,0.04657 -0.0381,0.08467 -0.0847,0.08467 -0.0466,0 -0.0847,-0.0381 -0.0847,-0.08467 z m 1.778,0 c 0,-0.04657 0.0381,-0.08467 0.0847,-0.08467 0.0466,0 0.0847,0.0381 0.0847,0.08467 0,0.04657 -0.0381,0.08467 -0.0847,0.08467 -0.0466,0 -0.0847,-0.0381 -0.0847,-0.08467 z m 0.254,0 c 0,-0.04657 0.0381,-0.08467 0.0847,-0.08467 0.0466,0 0.0847,0.0381 0.0847,0.08467 0,0.04657 -0.0381,0.08467 -0.0847,0.08467 -0.0466,0 -0.0847,-0.0381 -0.0847,-0.08467 z m 1.016,0 c 0,-0.04657 0.0381,-0.08467 0.0847,-0.08467 0.0466,0 0.0847,0.0381 0.0847,0.08467 0,0.04657 -0.0381,0.08467 -0.0847,0.08467 -0.0466,0 -0.0847,-0.0381 -0.0847,-0.08467 z m 0.33867,0 c 0,-0.10608 0.0898,-0.10608 0.254,0 0.1027,0.06637 0.0905,0.08232 -0.0635,0.08337 -0.10478,7.13e-4 -0.1905,-0.0368 -0.1905,-0.08337 z m 1.016,0 c 0,-0.04657 0.0381,-0.08467 0.0847,-0.08467 0.0466,0 0.0847,0.0381 0.0847,0.08467 0,0.04657 -0.0381,0.08467 -0.0847,0.08467 -0.0466,0 -0.0847,-0.0381 -0.0847,-0.08467 z m 0.33866,0 c 0,-0.04657 0.0381,-0.08467 0.0847,-0.08467 0.0466,0 0.0847,0.0381 0.0847,0.08467 0,0.04657 -0.0381,0.08467 -0.0847,0.08467 -0.0466,0 -0.0847,-0.0381 -0.0847,-0.08467 z m 0.508,0 c 0,-0.04657 0.0381,-0.08467 0.0847,-0.08467 0.0466,0 0.0847,0.0381 0.0847,0.08467 0,0.04657 -0.0381,0.08467 -0.0847,0.08467 -0.0466,0 -0.0847,-0.0381 -0.0847,-0.08467 z m 1.35467,0 c 0,-0.04657 0.0762,-0.08467 0.16933,-0.08467 0.0931,0 0.16934,0.0381 0.16934,0.08467 0,0.04657 -0.0762,0.08467 -0.16934,0.08467 -0.0931,0 -0.16933,-0.0381 -0.16933,-0.08467 z m 1.016,0 c 0,-0.04657 0.0381,-0.08467 0.0847,-0.08467 0.0466,0 0.0847,0.0381 0.0847,0.08467 0,0.04657 -0.0381,0.08467 -0.0847,0.08467 -0.0466,0 -0.0847,-0.0381 -0.0847,-0.08467 z m -77.169201,-0.07743 c -0.02726,-0.04411 -0.01348,-0.102502 0.03063,-0.129762 0.04411,-0.02726 0.102502,-0.01348 0.129762,0.03063 0.02726,0.04411 0.01348,0.102501 -0.03063,0.129761 -0.04411,0.02726 -0.102501,0.01348 -0.129762,-0.03063 z m 4.355864,-5.383565 c 0,-0.07761 0.04096,-0.127459 0.09102,-0.110772 0.05006,0.01669 0.09102,0.06653 0.09102,0.110772 0,0.04424 -0.04096,0.09409 -0.09102,0.110772 -0.05006,0.01669 -0.09102,-0.03316 -0.09102,-0.110772 z m -0.07125,-0.475649 c -0.07924,-0.126886 -0.08561,-0.205691 -0.02178,-0.269522 0.110326,-0.110326 0.138375,-0.08144 0.209732,0.216004 0.06642,0.276861 -0.03113,0.304637 -0.187955,0.05352 z m 0.208445,-0.481525 c -0.09378,-0.151736 0.118996,-0.725712 0.405207,-1.093074 0.167347,-0.214798 0.304267,-0.422389 0.304267,-0.461313 0,-0.11013 0.308138,-0.08321 0.401292,0.03506 0.185413,0.235402 0.195936,0.579101 0.02927,0.955887 -0.141687,0.320308 -0.203849,0.377613 -0.409615,0.377613 -0.133418,0 -0.316536,0.05594 -0.406927,0.124308 -0.189177,0.143085 -0.264254,0.157363 -0.32349,0.06152 z m -19.342032,-1.66392 c -0.465179,-0.52981 -0.440596,-1.502235 0.04103,-1.623116 0.141881,-0.03561 0.301443,0.01687 0.527421,0.173475 0.581,0.402633 0.687786,0.999667 0.262431,1.467235 -0.319443,0.351144 -0.510684,0.347094 -0.830884,-0.01759 z m 16.664839,-2.458906 c 0,-0.06985 0.0381,-0.127 0.08467,-0.127 0.04657,0 0.08467,0.05715 0.08467,0.127 0,0.06985 -0.0381,0.127 -0.08467,0.127 -0.04657,0 -0.08467,-0.05715 -0.08467,-0.127 z m 6.700957,-0.726378 c -0.567077,-0.224884 -0.948862,-0.711471 -1.07161,-1.36577 -0.0479,-0.255347 -0.02888,-0.321564 0.114388,-0.398241 0.107986,-0.05779 0.244696,-0.06425 0.367889,-0.01738 0.251839,0.09582 1.593043,1.106831 1.593043,1.200848 0,0.188883 -0.214029,0.504749 -0.372682,0.550009 -0.365472,0.104258 -0.436454,0.107692 -0.631028,0.03053 z M 83.662767,72.947624 C 83.500092,72.887103 82.8161,72.184475 82.8161,72.077888 c 0,-0.04442 -0.123825,-0.113122 -0.275167,-0.152675 -0.306317,-0.08006 -0.305185,-0.07208 -0.198465,-1.398342 0.06733,-0.83677 0.08414,-0.848256 0.830289,-0.567422 0.31531,0.118676 0.491389,0.245705 0.595518,0.429628 0.137845,0.243476 0.176533,0.25961 0.572203,0.238609 0.2334,-0.01239 0.455044,0.01335 0.492542,0.05721 0.0375,0.04385 0.134921,0.300526 0.216495,0.57039 0.137152,0.453722 0.138235,0.520649 0.0144,0.889 -0.137111,0.407826 -0.199363,0.450693 -1.189478,0.819087 -0.04657,0.01733 -0.141816,0.01024 -0.211666,-0.01574 z m 1.693333,-2.30889 c -0.09615,-0.06129 -0.105059,-0.116164 -0.03668,-0.225878 0.15998,-0.256674 0.343077,-0.325117 0.580433,-0.21697 0.277776,0.126563 0.27884,0.302278 0.0026,0.428144 -0.259923,0.118429 -0.378628,0.121624 -0.54635,0.0147 z M 68.316819,63.444287 c -0.221254,-0.07885 -0.49041,-0.226157 -0.598124,-0.327349 -0.232471,-0.218395 -0.295062,-0.225494 -0.483623,-0.05485 -0.200175,0.181156 -0.316144,0.02166 -0.472931,-0.650419 -0.126344,-0.541589 -0.30617,-0.833384 -0.513593,-0.833384 -0.183346,0 -0.293138,-0.388978 -0.179925,-0.637454 0.08656,-0.189978 0.06772,-0.243918 -0.171301,-0.490529 -0.147706,-0.152393 -0.268212,-0.332415 -0.267793,-0.400048 4.23e-4,-0.06763 -0.121163,-0.223182 -0.270185,-0.345665 -0.230682,-0.1896 -0.272986,-0.28305 -0.284661,-0.628821 -0.01732,-0.512993 -0.33915,-0.83274 -0.772812,-0.767814 -0.281245,0.04211 -0.366438,-0.04682 -0.366438,-0.382519 0,-0.224569 -0.255223,-0.994579 -0.348833,-1.052434 -0.04097,-0.02532 -0.0745,-0.252102 -0.0745,-0.503953 0,-0.25185 -0.08572,-0.73486 -0.1905,-1.073355 -0.157904,-0.510139 -0.266557,-0.691069 -0.635,-1.057407 -0.244475,-0.243079 -0.4445,-0.515439 -0.4445,-0.605244 0,-0.0898 -0.09525,-0.225693 -0.211666,-0.301972 -0.139324,-0.09129 -0.212088,-0.217599 -0.212899,-0.369571 -6.77e-4,-0.126984 -0.05716,-0.391422 -0.125523,-0.587638 -0.06836,-0.196217 -0.103159,-0.411828 -0.07733,-0.479137 0.04404,-0.114765 -0.03143,-0.470155 -0.182089,-0.85744 -0.136944,-0.352032 0.288775,0.130909 0.47633,0.540356 0.0985,0.215038 0.22253,0.481055 0.275618,0.591148 0.16393,0.339954 0.873349,0.910769 1.387814,1.116666 0.623457,0.249517 1.209745,0.715947 1.209745,0.962429 0,0.2567 0.157372,0.387735 0.465667,0.387735 0.289191,0 0.465667,0.12917 0.465667,0.340842 0,0.0757 0.09525,0.227123 0.211666,0.336491 0.217825,0.204635 0.276307,0.458057 0.127,0.550334 -0.129396,0.07997 -0.100727,0.381 0.03629,0.381 0.276945,0 0.398916,0.256535 0.341284,0.717807 -0.04467,0.357484 -0.02092,0.509517 0.123904,0.7934 0.115241,0.22589 0.160306,0.426287 0.126316,0.561712 -0.04358,0.173648 -0.01324,0.225593 0.173196,0.296475 0.454873,0.172942 1.008837,0.105814 1.386911,-0.168061 0.192851,-0.1397 0.417642,-0.254164 0.499537,-0.254364 0.0819,-1.69e-4 0.351373,-0.153868 0.598838,-0.341484 0.392074,-0.297247 0.488041,-0.33397 0.746202,-0.285539 0.389016,0.07298 1.24622,-0.112834 1.466267,-0.317839 0.09566,-0.08912 0.173926,-0.232088 0.173926,-0.317705 0,-0.22633 0.217777,-0.373185 0.462373,-0.311795 0.409978,0.102898 1.315627,0.794744 1.315627,1.005037 0,0.237072 0.193416,0.134679 0.33278,-0.17617 0.08111,-0.180903 0.180501,-0.270141 0.300891,-0.270141 0.183987,0 0.720996,0.48454 0.720996,0.650549 0,0.103403 0.529687,0.888727 0.986984,1.46332 0.266996,0.335481 0.295539,0.418021 0.252683,0.730693 -0.04954,0.361415 -0.399366,1.110481 -0.589274,1.261771 -0.05845,0.04657 -0.193197,0.208492 -0.299434,0.359834 -0.14933,0.212732 -0.254539,0.275166 -0.463688,0.275166 -0.168204,0 -0.434693,0.110554 -0.704545,0.292282 -0.440243,0.296477 -1.31873,0.639052 -1.638761,0.639052 -0.09646,0 -0.319215,0.07338 -0.495015,0.163067 -0.274521,0.14005 -0.401924,0.152862 -0.902597,0.09077 -0.372967,-0.04625 -0.640685,-0.0414 -0.74321,0.01347 -0.08814,0.04717 -0.245453,0.06438 -0.349593,0.03824 -0.142855,-0.03585 -0.235088,0.01435 -0.375649,0.204468 -0.152646,0.206465 -0.243205,0.249945 -0.501269,0.240672 -0.173231,-0.0062 -0.495991,-0.07583 -0.717246,-0.154682 z m 69.955951,-7.249389 c 0,-0.07373 0.0452,-0.118975 0.10054,-0.100542 0.15699,0.05233 0.18303,0.234597 0.0335,0.234597 -0.0737,0 -0.13405,-0.06032 -0.13405,-0.134055 z m -1.85317,-0.735026 c -0.11119,-0.05752 -0.20085,-0.123636 -0.19924,-0.146919 0.0342,-0.493585 0.1489,-1.031634 0.23526,-1.103307 0.0612,-0.0508 0.27604,-0.08052 0.47739,-0.06603 0.32046,0.02306 0.36921,0.05309 0.39112,0.240922 0.0149,0.127362 -0.0617,0.333845 -0.18834,0.508 -0.11735,0.161381 -0.2515,0.379144 -0.2981,0.483919 -0.0972,0.218584 -0.14022,0.227164 -0.41809,0.08342 z M 35.783765,53.145232 c -0.798129,-0.233642 -1.143,-0.3864 -1.143,-0.506282 0,-0.066 -0.0381,-0.119997 -0.08467,-0.119997 -0.05577,0 -0.08375,-2.347705 -0.08197,-6.879167 0.0022,-5.585967 0.02384,-6.907021 0.115167,-7.027334 0.09329,-0.122893 0.248081,-0.147822 0.907474,-0.146146 0.43725,0.0011 0.947399,0.04187 1.133666,0.09059 0.452118,0.118237 3.478047,0.244455 3.780562,0.157694 0.132106,-0.03789 0.494839,-0.02956 0.811496,0.01863 0.314935,0.04793 1.001592,0.082 1.525905,0.07573 0.886679,-0.01061 0.993639,0.0063 1.530607,0.241972 0.317521,0.139362 0.745788,0.279231 0.951704,0.310821 0.205916,0.03159 0.469643,0.104103 0.58606,0.161138 0.116416,0.05704 0.582487,0.124845 1.035712,0.150687 0.862296,0.04916 1.119375,0.137939 2.139288,0.738735 0.232833,0.137154 0.522423,0.250261 0.643532,0.251349 0.439521,0.0039 0.754164,0.179422 0.926124,0.516492 0.190777,0.373954 0.382992,0.501486 0.755831,0.501486 0.341088,0 0.763568,0.181801 0.976513,0.420214 0.123875,0.138689 0.180698,0.351857 0.211666,0.794053 0.04805,0.68613 0.139167,0.762363 0.631784,0.528601 0.155545,-0.07381 0.436271,-0.134201 0.623838,-0.134201 0.33978,0 0.341517,0.0017 0.474037,0.457531 0.07315,0.251642 0.133008,0.538334 0.133008,0.637095 0,0.260549 0.308176,0.344707 1.262257,0.344707 0.587265,0 0.960951,0.04584 1.285655,0.157703 0.745371,0.25679 2.17938,1.011965 2.312533,1.217822 0.192222,0.297176 0.251651,0.642786 0.13475,0.783643 -0.132198,0.159289 -0.227124,0.09847 -0.372707,-0.23879 -0.08891,-0.205977 -0.26962,-0.348614 -0.767796,-0.606038 -0.59963,-0.309848 -0.658202,-0.32471 -0.735489,-0.186608 -0.129232,0.230926 -0.978937,0.572787 -1.636307,0.658333 -0.519277,0.06758 -0.627742,0.114195 -0.889,0.382101 l -0.297562,0.305137 0.465666,-0.04105 c 0.455866,-0.04018 0.47324,-0.03348 0.8255,0.318542 0.507369,0.507023 0.485534,0.683711 -0.160465,1.298468 -0.484106,0.460694 -0.524867,0.528796 -0.585963,0.979016 -0.09739,0.717648 -0.14769,0.752643 -0.982009,0.683144 -0.805704,-0.06711 -0.778531,-0.09119 -0.951187,0.842791 -0.110178,0.59601 -0.316287,1.041619 -0.553748,1.19721 -0.231226,0.151504 -0.72766,0.03032 -1.134774,-0.277009 -0.325274,-0.245549 -1.029354,-1.602713 -1.029354,-1.984154 0,-0.264921 -0.232458,-0.460988 -0.644179,-0.543332 -0.22238,-0.04448 -0.290953,-0.0068 -0.545907,0.299769 -0.692685,0.832974 -0.813432,0.933966 -1.116658,0.933966 -0.343905,0 -0.518197,-0.165101 -0.690833,-0.654405 -0.253378,-0.71815 -0.566746,-0.954935 -1.489756,-1.125682 -0.20955,-0.03876 -0.5334,-0.1113 -0.719667,-0.161191 -0.186267,-0.04989 -0.681587,-0.08429 -1.100712,-0.07643 -0.918886,0.01722 -1.099679,-0.06326 -1.332275,-0.59303 -0.305084,-0.694869 -0.585871,-0.709979 -1.247558,-0.06713 -0.466584,0.453297 -0.910858,0.68185 -1.148302,0.590733 -0.165744,-0.0636 -0.378153,0.44378 -0.378153,0.903294 0,0.190075 -0.05813,0.457998 -0.129174,0.595386 -0.18619,0.360052 -0.461951,0.326029 -1.054771,-0.130136 -0.442315,-0.340354 -0.519744,-0.448397 -0.743283,-1.037167 -0.172253,-0.453687 -0.264226,-0.877299 -0.296974,-1.367798 -0.04171,-0.624821 -0.07464,-0.737203 -0.272879,-0.931334 l -0.225439,-0.22077 -0.22624,0.292161 c -0.124432,0.160688 -0.464597,0.574079 -0.755923,0.918647 -0.567332,0.67102 -0.659176,0.876887 -0.583657,1.308255 0.139314,0.795771 0.217363,1.017413 0.618572,1.756604 0.695834,1.282015 0.782338,1.79717 0.361272,2.151474 -0.294137,0.2475 -0.449421,0.259823 -1.051838,0.08347 z m 49.995668,-0.774721 c 0,-0.10637 0.511286,-0.553828 0.568012,-0.497102 0.02908,0.02908 -0.05825,0.166119 -0.194067,0.304525 -0.244535,0.249194 -0.373945,0.315837 -0.373945,0.192577 z m 1.119099,-0.965306 c 0.02086,-0.06265 0.105839,-0.127083 0.188835,-0.143171 0.09652,-0.01871 0.137232,0.0118 0.112968,0.08467 -0.02086,0.06265 -0.10584,0.127083 -0.188835,0.143171 -0.09652,0.01871 -0.137232,-0.0118 -0.112968,-0.08467 z m 2.860235,0.01308 c 0,-0.04657 0.04035,-0.08467 0.08966,-0.08467 0.04932,0 0.06612,0.0381 0.03734,0.08467 -0.02878,0.04657 -0.06913,0.08467 -0.08966,0.08467 -0.02053,0 -0.03734,-0.0381 -0.03734,-0.08467 z m 29.098443,-0.03899 c -0.0783,-0.07834 -0.14244,-0.209823 -0.14244,-0.292182 0,-0.214033 -0.3113,-1.413069 -0.49653,-1.912495 -0.24064,-0.648841 -0.35014,-1.014202 -0.35014,-1.168302 0,-0.07715 -0.10037,-0.360199 -0.22304,-0.62899 -0.29668,-0.650061 -0.26469,-0.595208 -0.7789,-1.335396 -0.44304,-0.637743 -0.45305,-0.665575 -0.52791,-1.468023 -0.0906,-0.971638 -0.22892,-1.586505 -0.42198,-1.87629 -0.15814,-0.237376 -0.4988,-1.115412 -0.55842,-1.439333 -0.11517,-0.625649 -0.24348,-0.995772 -0.41092,-1.185334 -0.17937,-0.203072 -0.46618,-1.184149 -0.46572,-1.593066 9e-5,-0.107836 -0.0387,-0.268736 -0.0862,-0.357555 -0.0475,-0.08882 -0.12758,-0.362539 -0.17787,-0.608267 -0.0503,-0.245728 -0.11949,-0.580128 -0.15376,-0.743112 -0.0343,-0.162983 -0.1618,-0.441617 -0.28341,-0.619187 -0.1216,-0.177569 -0.24698,-0.501419 -0.27861,-0.719666 -0.0861,-0.593885 -0.14003,-0.607979 -0.26254,-0.06856 -0.0761,0.335128 -0.0846,0.538551 -0.0269,0.646332 0.1502,0.280647 0.0908,0.517142 -0.28595,1.137632 -0.20358,0.335313 -0.41739,0.759239 -0.47514,0.942056 -0.0578,0.182818 -0.16454,0.457419 -0.2373,0.610225 -0.11564,0.242854 -0.11838,0.360093 -0.0218,0.931333 0.0608,0.359428 0.1376,0.901155 0.17071,1.203838 0.0338,0.309339 0.15304,0.735714 0.2722,0.973667 0.11659,0.232833 0.35291,0.785284 0.52514,1.227667 0.17223,0.442383 0.38766,0.945231 0.47873,1.117441 0.0911,0.172208 0.1668,0.438908 0.16828,0.592666 10e-4,0.153758 0.0586,0.353517 0.127,0.443909 0.0684,0.09039 0.12431,0.291757 0.12431,0.447478 0,0.155722 0.0534,0.367515 0.11869,0.470651 0.0653,0.103137 0.14546,0.320872 0.17817,0.483855 0.0327,0.162983 0.24636,0.590041 0.47475,0.949019 0.2284,0.358976 0.45528,0.759026 0.50418,0.889 0.0489,0.129972 0.23629,0.464914 0.41642,0.744315 0.38368,0.595119 0.4894,1.035816 0.33684,1.404124 -0.13456,0.324869 -0.27157,0.162708 -0.19877,-0.235265 0.0297,-0.162612 8.4e-4,-0.365197 -0.0726,-0.508 -0.42757,-0.832201 -1.22492,-2.236603 -1.43018,-2.519039 -0.13358,-0.183799 -0.24287,-0.413868 -0.24287,-0.511265 0,-0.0974 -0.0762,-0.326546 -0.16934,-0.509222 -0.0931,-0.182676 -0.16933,-0.437363 -0.16933,-0.565971 0,-0.128608 -0.0727,-0.396777 -0.16145,-0.595931 -0.0888,-0.199154 -0.22644,-0.590698 -0.30587,-0.870098 -0.0794,-0.2794 -0.3074,-0.86995 -0.50659,-1.312334 -0.61734,-1.371066 -0.63862,-1.436344 -0.76923,-2.359968 -0.26869,-1.89991 -0.26815,-1.909567 0.15201,-2.720032 0.2052,-0.395817 0.47646,-0.896169 0.60279,-1.111894 0.19525,-0.333386 0.21619,-0.427781 0.1396,-0.629222 -0.10543,-0.277295 0.11913,-1.815557 0.31086,-2.129406 0.1351,-0.221163 0.15164,-0.668558 0.0275,-0.745249 -0.0478,-0.02957 -0.20977,0.01778 -0.35983,0.105227 -0.19962,0.116327 -0.33359,0.305496 -0.49922,0.704935 -0.1245,0.300268 -0.22986,0.660242 -0.23413,0.799942 -0.01,0.316691 -0.0485,0.375835 -0.48507,0.739467 -0.46676,0.388733 -1.13743,0.488933 -1.62109,0.242192 -0.49385,-0.251943 -0.87772,-0.293696 -1.38436,-0.150574 -0.2484,0.07017 -0.62309,0.154699 -0.83264,0.18784 -0.20955,0.03314 -0.5334,0.138459 -0.71966,0.234041 -0.67561,0.346688 -0.78978,0.398034 -0.88504,0.398034 -0.0533,0 -0.32282,0.159321 -0.59894,0.354046 -0.46583,0.328516 -0.52506,0.348357 -0.82136,0.275166 -0.43282,-0.106913 -0.40263,-0.242293 0.0614,-0.275268 0.23744,-0.01687 0.47985,-0.102661 0.64411,-0.22795 0.42526,-0.324358 1.69601,-0.883623 2.30579,-1.014791 0.31022,-0.06673 0.69714,-0.16075 0.85981,-0.208932 0.42594,-0.126158 1.03477,-0.10776 1.24222,0.03754 0.25657,0.179708 1.05475,0.258295 1.30621,0.128606 0.35341,-0.182269 0.66946,-0.531865 0.66946,-0.740514 0,-0.262925 0.24495,-1.009408 0.44047,-1.342354 0.0904,-0.15397 0.30288,-0.327077 0.51309,-0.418052 0.19733,-0.0854 0.42305,-0.209001 0.50161,-0.274676 0.24099,-0.201474 0.3487,-0.04108 0.29394,0.437722 -0.0392,0.343187 -0.004,0.556191 0.17097,1.025791 0.13808,0.371113 0.22747,0.798396 0.23912,1.143 0.0102,0.302684 0.0787,0.721784 0.15202,0.931334 0.13179,0.376424 0.42246,1.546645 0.5678,2.286 0.12818,0.652024 0.29935,1.143 0.39848,1.143 0.0523,0 0.12681,0.03468 0.16562,0.07708 0.041,0.04478 0.0262,0.05155 -0.0353,0.01617 -0.15531,-0.08938 -0.13036,0.02635 0.10619,0.492605 0.11622,0.229084 0.21131,0.500656 0.21131,0.603493 0,0.102838 0.051,0.315457 0.11328,0.472485 0.0623,0.157028 0.17975,0.466481 0.261,0.687673 0.0812,0.221192 0.18734,0.402167 0.23575,0.402167 0.0518,0 0.0418,-0.06106 -0.0241,-0.148167 -0.0949,-0.125449 -0.0941,-0.132143 0.005,-0.04366 0.0645,0.05748 0.12809,0.171781 0.14121,0.254 0.23551,1.475894 0.29631,1.903634 0.3161,2.22383 0.0256,0.414898 0.18586,0.794006 0.30456,0.720649 0.041,-0.02535 0.10214,-0.0015 0.13583,0.05304 0.0383,0.06191 0.0246,0.07645 -0.0365,0.03872 -0.15114,-0.09341 -0.11897,-0.0051 0.15625,0.428884 0.1397,0.220284 0.254,0.46213 0.254,0.537434 0,0.0753 0.12323,0.24882 0.27384,0.38559 0.2287,0.20768 0.24615,0.21378 0.10584,0.03701 l -0.16801,-0.211666 0.1885,0.159482 c 0.10368,0.08772 0.1688,0.191371 0.14471,0.230347 -0.0529,0.08568 0.17668,0.548851 0.31427,0.633884 0.0653,0.04035 0.0753,0.02353 0.0298,-0.05005 -0.0457,-0.07389 -0.0354,-0.09041 0.0306,-0.04956 0.0545,0.0337 0.0807,0.09112 0.0581,0.127608 -0.0225,0.03649 0.018,0.138631 0.0902,0.226983 0.11479,0.140556 0.12537,0.142116 0.0846,0.01247 -0.0642,-0.204104 0.007,-0.186047 0.1229,0.03139 0.0675,0.126193 0.0684,0.162449 0.003,0.122003 -0.13398,-0.0828 -0.11639,-0.0021 0.0873,0.400319 0.25768,0.509186 0.49829,0.831286 0.58224,0.779408 0.0398,-0.02459 0.0999,-8.4e-5 0.13361,0.05442 0.0405,0.06548 0.0243,0.07632 -0.0475,0.03193 -0.0729,-0.04507 -0.0947,-0.02847 -0.066,0.05042 0.0235,0.06469 0.0884,0.107149 0.14428,0.09435 0.0558,-0.01279 0.0768,0.01671 0.0466,0.06558 -0.0302,0.04886 0.10031,0.334622 0.29003,0.635023 0.18972,0.300401 0.34495,0.606211 0.34495,0.679579 0,0.158709 -0.45339,0.362903 -0.95995,0.432336 -0.27642,0.03789 -0.39806,0.01564 -0.50628,-0.09257 z M 87.430433,51.248953 c 0.02878,-0.04657 0.08818,-0.08467 0.131997,-0.08467 0.04382,0 0.07967,0.0381 0.07967,0.08467 0,0.04657 -0.0594,0.08467 -0.131997,0.08467 -0.0726,0 -0.10845,-0.0381 -0.07967,-0.08467 z m 0.550334,-0.007 c 0,-0.04274 0.1143,-0.08342 0.254,-0.09041 0.1397,-0.007 0.2921,-0.01651 0.338666,-0.02117 0.04657,-0.0047 0.07514,0.02537 0.0635,0.06673 -0.02839,0.100851 -0.656166,0.143757 -0.656166,0.04485 z M 118.56194,50.95262 c 0.002,-0.1397 0.0207,-0.186601 0.0422,-0.104223 0.0215,0.08238 0.02,0.196679 -0.003,0.254 -0.0232,0.05732 -0.0408,-0.01008 -0.039,-0.149777 z m 22.75883,-0.169334 c 0,-0.07761 0.041,-0.127459 0.091,-0.110772 0.0501,0.01669 0.091,0.06653 0.091,0.110772 0,0.04424 -0.041,0.09409 -0.091,0.110772 -0.05,0.01669 -0.091,-0.03316 -0.091,-0.110772 z M 60.843259,49.93846 c -0.165215,-0.362541 -0.280785,-0.67877 -0.256823,-0.702733 0.02396,-0.02396 0.182602,0.249198 0.352533,0.607023 0.169931,0.357826 0.285501,0.674055 0.256822,0.702733 -0.02868,0.02868 -0.187317,-0.244483 -0.352532,-0.607023 z m 57.539531,0.329771 c 0.004,-0.09863 0.0241,-0.118694 0.0512,-0.05115 0.0245,0.06112 0.0214,0.134144 -0.007,0.162278 -0.0281,0.02813 -0.0482,-0.02187 -0.0445,-0.111125 z m -2.66323,-0.165551 c -0.029,-0.07567 -0.0504,-0.182085 -0.0474,-0.236485 0.003,-0.0544 0.0419,-0.0077 0.0865,0.103883 0.0446,0.111536 0.066,0.217954 0.0474,0.236485 -0.0185,0.01853 -0.0575,-0.02822 -0.0865,-0.103883 z m 2.55702,-0.23598 c -0.0315,-0.154501 -0.0197,-0.210173 0.0333,-0.15716 0.0452,0.04515 0.0671,0.152815 0.0488,0.239253 -0.0247,0.116401 -0.046,0.09511 -0.0821,-0.08209 z m 24.18516,-0.230333 c -0.0764,-0.147795 -0.0977,-0.243226 -0.0473,-0.21207 0.0504,0.03116 0.0917,0.01405 0.0917,-0.03801 0,-0.05206 0.0381,-0.07111 0.0847,-0.04233 0.0466,0.02878 0.0847,0.09043 0.0847,0.136993 0,0.04657 -0.0381,0.06112 -0.0847,0.03234 -0.0466,-0.02878 -0.0847,-0.01198 -0.0847,0.03734 0,0.04931 0.0794,0.08966 0.17639,0.08966 0.0985,0 0.16159,0.04438 0.14287,0.100542 -0.0678,0.203292 -0.22833,0.157164 -0.36362,-0.104461 z m -24.58695,-0.976803 c 0.004,-0.09863 0.0241,-0.118694 0.0511,-0.05115 0.0245,0.06112 0.0215,0.134144 -0.007,0.162278 -0.0281,0.02813 -0.0481,-0.02187 -0.0445,-0.111125 z M 60.18431,48.411556 c -0.07744,-0.162398 -0.107943,-0.29527 -0.06778,-0.29527 0.08403,0 0.305184,0.49394 0.247139,0.551985 -0.02121,0.02121 -0.101917,-0.09432 -0.17936,-0.256715 z m 57.52783,-0.379937 c 0,-0.116416 0.0192,-0.164041 0.0427,-0.105833 0.0235,0.05821 0.0235,0.153458 0,0.211667 -0.0235,0.05821 -0.0427,0.01058 -0.0427,-0.105834 z m 22.75885,-0.309211 c -0.22997,-0.207769 -0.48524,-0.341414 -0.77808,-0.407368 -0.61659,-0.138868 -0.6648,-0.344582 -0.062,-0.26462 0.24704,0.03277 0.52214,0.09864 0.61133,0.146379 0.23067,0.123447 0.82454,0.670841 0.82454,0.760006 0,0.165086 -0.27208,0.05804 -0.59578,-0.234397 z m -23.23245,-0.851304 c -0.0459,-0.120667 -0.0362,-0.130391 0.0474,-0.0474 0.0579,0.05743 0.0839,0.12575 0.0578,0.151818 -0.0261,0.02607 -0.0734,-0.02092 -0.10521,-0.104422 z m 21.61444,-0.399338 c -0.11509,-0.252595 -0.0231,-0.810813 0.13361,-0.810813 0.0624,0 0.22262,-0.05692 0.356,-0.126479 0.3077,-0.16048 0.42351,-0.160226 0.4854,0.0011 0.0311,0.08111 -0.0906,0.270512 -0.3296,0.512979 -0.20843,0.211417 -0.37896,0.439303 -0.37896,0.506414 0,0.19315 -0.16385,0.142005 -0.26645,-0.08317 z m 1.15993,-0.210915 c -0.0273,-0.04411 -0.0135,-0.102502 0.0306,-0.129762 0.0441,-0.02726 0.10249,-0.01348 0.12976,0.03063 0.0273,0.04411 0.0135,0.102502 -0.0306,0.129762 -0.0441,0.02726 -0.1025,0.01348 -0.12976,-0.03063 z m -23.74679,-0.987954 c 0.004,-0.09863 0.0241,-0.118694 0.0511,-0.05115 0.0245,0.06112 0.0215,0.134144 -0.007,0.162278 -0.0281,0.02813 -0.0481,-0.02187 -0.0445,-0.111125 z m 22.5212,-0.260494 c -0.0496,-0.178814 -0.0905,-0.42336 -0.0907,-0.543435 0,-0.120074 -0.11949,-0.397991 -0.26494,-0.617592 -0.22905,-0.345795 -0.25543,-0.441296 -0.19698,-0.713015 0.10683,-0.496642 0.0924,-1.142305 -0.0264,-1.181909 -0.0577,-0.01922 -0.10484,-0.107969 -0.10484,-0.197221 0,-0.188833 0.34957,-0.229416 0.4862,-0.05644 0.14669,0.185692 0.18027,0.779362 0.0539,0.95222 -0.18096,0.247468 -0.14008,0.76853 0.0949,1.209985 0.11642,0.218688 0.21191,0.474118 0.2122,0.567621 0,0.0935 0.0538,0.272155 0.11894,0.397003 0.10581,0.2028 0.10189,0.241967 -0.0368,0.367451 -0.14725,0.133262 -0.15982,0.123808 -0.24548,-0.184663 z m 0.67078,0.05588 c 0,-0.04657 0.0381,-0.08467 0.0847,-0.08467 0.0466,0 0.0847,0.0381 0.0847,0.08467 0,0.04657 -0.0381,0.08467 -0.0847,0.08467 -0.0466,0 -0.0847,-0.0381 -0.0847,-0.08467 z M 116.201,44.602619 c 5.1e-4,-0.2794 0.0163,-0.383492 0.0351,-0.231317 0.0188,0.152176 0.0185,0.380776 -8.7e-4,0.508 -0.0193,0.127225 -0.0347,0.0027 -0.0343,-0.276683 z m 23.2571,0.169334 c 0,-0.06985 0.0531,-0.127 0.11794,-0.127 0.0649,0 0.13987,0.05715 0.16668,0.127 0.0331,0.08638 -0.005,0.127 -0.11794,0.127 -0.0917,0 -0.16668,-0.05712 -0.16668,-0.127 z m -23.34836,-0.973667 c 0,-0.162983 0.0174,-0.229658 0.0387,-0.148167 0.0213,0.08149 0.0213,0.214842 0,0.296334 -0.0213,0.08149 -0.0387,0.01482 -0.0387,-0.148167 z m 22.04305,-1.258637 c -0.0365,-0.05901 -0.0435,-0.130161 -0.0155,-0.158107 0.0758,-0.07577 0.15839,0.03567 0.11747,0.158449 -0.0287,0.08604 -0.0486,0.08597 -0.10197,-3.39e-4 z m -22.98065,-1.450697 c 0,-0.116416 0.0192,-0.164041 0.0427,-0.105833 0.0235,0.05821 0.0235,0.153458 0,0.211667 -0.0235,0.05821 -0.0427,0.01058 -0.0427,-0.105834 z m 17.65553,-0.391393 c -0.10047,-1.420754 -0.4736,-2.25491 -1.1719,-2.619779 -0.12356,-0.06456 -0.30863,-0.253254 -0.41125,-0.419311 -0.19661,-0.318124 -0.19469,-0.537469 0.009,-1.033725 0.10055,-0.244906 0.0924,-0.313903 -0.0787,-0.666057 -0.14331,-0.294998 -0.17881,-0.480012 -0.14248,-0.742791 0.0459,-0.331771 0.026,-0.373017 -0.38312,-0.794258 l -0.4315,-0.444313 -0.40204,0.1315 c -0.23624,0.07727 -0.60918,0.120838 -0.90434,0.105647 -0.44716,-0.02302 -0.50527,-0.04677 -0.52936,-0.216353 -0.022,-0.15515 0.0133,-0.1905 0.1905,-0.1905 0.11966,0 0.21756,0.04282 0.21756,0.09515 0,0.166049 0.87989,0.04227 1.13696,-0.159939 0.29832,-0.234656 0.55017,-0.146473 0.74651,0.261379 0.0813,0.168864 0.23735,0.365696 0.34679,0.437405 0.29249,0.191646 0.40618,0.492312 0.30064,0.795062 -0.0673,0.193083 -0.057,0.308504 0.045,0.50585 0.0727,0.140628 0.17059,0.279402 0.21749,0.308386 0.15353,0.09488 0.0952,0.684593 -0.0912,0.921491 -0.1733,0.220313 -0.17365,0.229033 -0.02,0.492145 0.086,0.147323 0.32667,0.353569 0.53474,0.458326 0.46003,0.231618 0.67767,0.48488 0.67767,0.788608 0,0.125641 0.0559,0.302395 0.12431,0.392787 0.0684,0.09039 0.12672,0.278649 0.12969,0.418349 0.003,0.1397 0.0582,0.323757 0.12287,0.409016 0.14246,0.187989 0.0838,1.053077 -0.0835,1.23159 -0.0902,0.09622 -0.11649,0.01482 -0.15047,-0.465666 z m 4.44621,0.195158 c -0.15465,-0.427666 -0.11768,-0.479654 0.0712,-0.100098 0.0927,0.186267 0.14393,0.262467 0.11389,0.169333 -0.13715,-0.425208 -0.13728,-0.550333 -8.4e-4,-0.550333 0.14192,0 0.40883,0.509461 0.3166,0.604318 -0.0289,0.02969 -0.13052,0.07744 -0.22588,0.106108 -0.13994,0.04207 -0.19303,-0.0022 -0.27517,-0.229328 z m -22.70109,-1.20782 c 0.004,-0.09863 0.0241,-0.118694 0.0512,-0.05115 0.0245,0.06112 0.0215,0.134144 -0.007,0.162278 -0.0281,0.02813 -0.0482,-0.02187 -0.0445,-0.111125 z m -0.0847,-0.338667 c 0.004,-0.09863 0.0241,-0.118694 0.0512,-0.05115 0.0245,0.06112 0.0215,0.134145 -0.007,0.162278 -0.0281,0.02813 -0.0481,-0.02187 -0.0445,-0.111125 z m -2.79305,-0.774839 c -0.007,-0.234844 0.42931,-1.123105 0.5511,-1.123105 0.0476,0 -0.2021,0.595846 -0.29891,0.713172 -0.0414,0.05014 -0.11333,0.224511 -0.15989,0.387494 l -0.0847,0.296334 -0.008,-0.273895 z m 2.6304,-0.02244 c 0,-0.116416 0.0192,-0.164041 0.0427,-0.105833 0.0235,0.05821 0.0235,0.153458 0,0.211667 -0.0235,0.05821 -0.0427,0.01058 -0.0427,-0.105834 z m -10.8507,-0.398461 c -0.0699,-0.02553 -0.20638,-0.118452 -0.30339,-0.206484 -0.097,-0.08803 -0.2646,-0.149858 -0.37241,-0.13739 -0.16854,0.01949 -0.22097,-0.04639 -0.37395,-0.469794 l -0.17792,-0.492463 0.31626,-0.290704 c 0.17394,-0.159887 0.28824,-0.2895 0.254,-0.288028 -0.0956,0.0041 -0.49136,0.371094 -0.59752,0.554016 -0.0669,0.115227 -0.0936,0.125767 -0.0912,0.03598 0.0113,-0.4269 0.53064,-0.846667 1.04741,-0.846667 0.34501,0 0.76271,0.204392 0.6826,0.334012 -0.0232,0.03763 0.009,0.254101 0.0722,0.481039 0.0926,0.333706 0.11671,0.867069 0.0599,1.322783 -0.009,0.07173 -0.32363,0.07399 -0.51591,0.0037 z m 0.29633,-1.887539 c -0.0288,-0.04657 -0.23105,-0.07894 -0.4495,-0.07195 l -0.39717,0.01272 0.381,0.05923 c 0.20955,0.03258 0.41183,0.06496 0.4495,0.07195 0.0377,0.007 0.045,-0.02538 0.0162,-0.07195 z m 10.29369,1.220612 c 0.004,-0.09863 0.0241,-0.118695 0.0511,-0.05115 0.0245,0.06112 0.0215,0.134144 -0.007,0.162278 -0.0281,0.02813 -0.0482,-0.02187 -0.0445,-0.111125 z m -1.70002,-0.289278 c 0.0498,-0.09313 0.10967,-0.169334 0.13296,-0.169334 0.0233,0 0.002,0.0762 -0.0483,0.169334 -0.0498,0.09313 -0.10967,0.169333 -0.13295,0.169333 -0.0233,0 -0.002,-0.0762 0.0483,-0.169333 z m 0.33102,-0.556288 c 0.0936,-0.174645 0.14708,-0.359051 0.11883,-0.40979 -0.0333,-0.0599 -0.0148,-0.05855 0.0529,0.0039 0.0823,0.07581 0.0761,0.150656 -0.0293,0.354464 -0.0735,0.142098 -0.17389,0.283256 -0.22312,0.313685 -0.0492,0.03043 -0.0129,-0.08756 0.0807,-0.262209 z m -8.45902,0.132954 c 0,-0.04657 0.0857,-0.08408 0.1905,-0.08337 0.15404,10e-4 0.16619,0.017 0.0635,0.08337 -0.16415,0.106081 -0.254,0.106081 -0.254,0 z m 9.65868,-0.04939 c 0.004,-0.09863 0.0241,-0.118695 0.0512,-0.05115 0.0245,0.06112 0.0215,0.134144 -0.007,0.162278 -0.0281,0.02813 -0.0481,-0.02187 -0.0445,-0.111125 z m -8.91256,-0.0085 c 0.0611,-0.02446 0.13415,-0.02145 0.16228,0.0067 0.0281,0.02813 -0.0219,0.04814 -0.11112,0.04447 -0.0986,-0.0041 -0.1187,-0.02412 -0.0512,-0.05115 z m 0.26988,-0.11056 c 0,-0.136089 0.44102,-0.503122 0.60832,-0.50626 0.0785,-0.0015 0.24991,-0.0467 0.381,-0.1005 0.64041,-0.262846 1.08138,-0.394992 0.91829,-0.275186 -0.0917,0.06736 -0.302,0.158904 -0.46735,0.203429 -0.25072,0.06751 -0.63078,0.268704 -1.33443,0.706408 -0.0606,0.03768 -0.10583,0.02576 -0.10583,-0.02789 z m 2.58233,-1.145693 c 0.23283,-0.06709 0.48048,-0.121552 0.55033,-0.121034 0.27649,0.002 -0.12749,0.144117 -0.55033,0.193534 l -0.42333,0.04948 z m 2.68035,0.03856 c -0.10908,-0.04371 -0.23027,-0.05972 -0.26932,-0.03559 -0.039,0.02413 -0.0933,0.0078 -0.12056,-0.03632 -0.10262,-0.166041 0.11822,-0.170137 0.47379,-0.0088 0.36573,0.165957 0.29607,0.232947 -0.0839,0.08069 z m 2.28953,-0.248469 c 0,-0.116417 0.0305,-0.306917 0.0678,-0.423333 l 0.0678,-0.211667 v 0.211667 c 0,0.116416 -0.0305,0.306916 -0.0678,0.423333 l -0.0678,0.211667 z m -1.20221,-0.0743 c 0,-0.04086 0.0634,-0.126589 0.14086,-0.1905 0.12773,-0.105366 0.1314,-0.09844 0.0393,0.0743 -0.10498,0.197016 -0.18021,0.245528 -0.18021,0.1162 z m 0.42333,-1.379148 c 0,-0.07505 0.0763,-0.226405 0.1695,-0.336339 0.14709,-0.173449 0.16202,-0.177489 0.11293,-0.03055 -0.0311,0.09313 -0.10739,0.244486 -0.1695,0.336339 -0.0912,0.134909 -0.11293,0.140779 -0.11293,0.03055 z m 1.143,-0.155219 c 0,-0.1397 0.0286,-0.254 0.0635,-0.254 0.0349,0 0.0635,0.1143 0.0635,0.254 0,0.1397 -0.0286,0.254 -0.0635,0.254 -0.0349,0 -0.0635,-0.1143 -0.0635,-0.254 z m 15.06522,-0.0088 c -0.0296,-0.04791 -0.0405,-0.09691 -0.0242,-0.108893 0.49572,-0.364298 0.58156,-0.399994 0.6339,-0.263605 0.0604,0.157317 0.001,0.223192 -0.32607,0.36205 -0.15545,0.06599 -0.24723,0.06937 -0.28364,0.01045 z M 112.7881,32.918619 c 0.058,-0.06985 0.17504,-0.127 0.26016,-0.127 0.0851,0 0.19359,-0.06667 0.24106,-0.148167 0.072,-0.123546 0.0867,-0.126152 0.0889,-0.01568 0.001,0.07287 -0.13207,0.196692 -0.29663,0.275167 -0.36857,0.175757 -0.42899,0.178986 -0.29346,0.01568 z m 0.508,-0.635 c 0,-0.04657 0.0404,-0.08467 0.0897,-0.08467 0.0493,0 0.0661,0.0381 0.0373,0.08467 -0.0288,0.04657 -0.0691,0.08467 -0.0897,0.08467 -0.0205,0 -0.0373,-0.0381 -0.0373,-0.08467 z m -0.0832,-1.267228 c -0.13294,-0.248403 0.003,-0.763287 0.30741,-1.166939 0.22415,-0.296923 0.37645,-0.342544 0.52919,-0.158508 0.0761,0.09166 0.0601,0.126247 -0.0743,0.161407 -0.0941,0.02461 -0.17054,0.09594 -0.16982,0.158508 0.001,0.092 0.0156,0.09116 0.0761,-0.0044 0.0439,-0.06934 0.13495,-0.0951 0.22031,-0.06234 0.12779,0.04903 0.11913,0.07657 -0.0711,0.226212 -0.11914,0.09371 -0.24139,0.24846 -0.27168,0.343889 -0.0303,0.09543 -0.0717,0.156868 -0.092,0.136533 -0.0203,-0.02033 0.002,-0.139683 0.0498,-0.265219 0.0561,-0.147622 0.057,-0.209868 0.003,-0.176216 -0.0463,0.02862 -0.10808,0.201446 -0.13728,0.384067 -0.0292,0.18262 -0.10049,0.39685 -0.15841,0.476067 -0.0968,0.13237 -0.11386,0.128075 -0.21079,-0.05305 z m -0.12748,-0.678721 c 0.049,-0.321097 0.41327,-0.932718 0.55553,-0.932718 0.097,0 0.0572,0.08349 -0.22223,0.465667 -0.10214,0.1397 -0.22903,0.3683 -0.282,0.508 l -0.0963,0.254 z m -5.5772,0.109203 c -0.0953,-0.09535 -0.0581,-0.195254 0.0729,-0.195254 0.0698,0 0.127,0.03585 0.127,0.07967 0,0.106763 -0.13221,0.183227 -0.19986,0.115585 z m 24.1739,-0.364588 c 0,-0.116416 0.0192,-0.164041 0.0427,-0.105833 0.0235,0.05821 0.0235,0.153458 0,0.211667 -0.0235,0.05821 -0.0427,0.01058 -0.0427,-0.105834 z m -0.13149,-0.829934 c 0.0133,-0.469764 0.0258,-0.524733 0.11912,-0.524733 0.0528,0 0.0649,0.137903 0.0315,0.359834 -0.0702,0.466373 -0.16204,0.566912 -0.15063,0.164899 z m -6.653,-3.31557 c -0.10506,-0.06644 -0.092,-0.113757 0.0824,-0.299466 0.22186,-0.236175 0.5131,-0.235238 0.75588,0.0024 0.10448,0.102269 0.0987,0.125415 -0.0423,0.170649 -0.0898,0.02878 -0.25072,0.08733 -0.35768,0.130111 -0.23958,0.09581 -0.28146,0.09546 -0.4383,-0.0037 z M 91.9601,21.630377 c 0,-0.135779 0.618749,-0.607426 0.796876,-0.607426 0.0253,0 -0.119327,0.1524 -0.321402,0.338667 -0.367626,0.338866 -0.475474,0.399826 -0.475474,0.268759 z m 1.314127,-1.210656 c 0.142281,-0.459521 0.608902,-1.240089 1.01466,-1.697337 0.299483,-0.337485 0.286806,-0.450104 -0.08394,-0.745654 -0.332822,-0.26532 -0.333991,-0.268206 -0.08467,-0.208962 0.139049,0.03304 0.334653,0.134262 0.434677,0.224937 0.17049,0.154556 0.198124,0.156453 0.441989,0.03035 0.143072,-0.07399 0.3007,-0.210324 0.350286,-0.302975 0.104929,-0.196062 0.253531,-0.223287 0.253531,-0.04645 0,0.0671 -0.2286,0.32323 -0.508,0.569168 -0.2794,0.245938 -0.508,0.517389 -0.508,0.603225 0,0.273339 -0.166484,0.483599 -0.382914,0.483599 -0.171976,0 -0.258324,0.100676 -0.502914,0.586367 -0.302672,0.601026 -0.543151,0.886249 -0.424712,0.503736 z M 92.9761,17.674956 c -0.302683,-0.05778 -0.674158,-0.109173 -0.8255,-0.1142 -0.151342,-0.005 -0.275167,-0.05209 -0.275167,-0.104577 0,-0.06616 0.136349,-0.07738 0.4445,-0.03657 0.244475,0.03238 0.654051,0.08485 0.910167,0.116605 0.256117,0.03176 0.458999,0.09489 0.45085,0.140288 -0.02095,0.116734 -0.08603,0.116591 -0.70485,-0.0015 z m 2.624667,-0.277308 c 0,-0.102324 0.16063,-0.221623 0.219346,-0.162907 0.02131,0.02131 -0.01932,0.08694 -0.0903,0.145845 -0.08047,0.06678 -0.129046,0.0732 -0.129046,0.01706 z m -5.08,-0.10003 c 0,-0.04657 0.1143,-0.08467 0.254,-0.08467 0.1397,0 0.254,0.0381 0.254,0.08467 0,0.04657 -0.1143,0.08467 -0.254,0.08467 -0.1397,0 -0.254,-0.0381 -0.254,-0.08467 z m 5.441397,-0.552227 c 0.08657,-0.659744 0.296129,-1.430838 0.398085,-1.464823 0.05698,-0.01899 0.234532,-0.149496 0.394566,-0.290008 0.160035,-0.140513 0.311918,-0.234532 0.337518,-0.208932 0.04788,0.04788 -0.114086,0.212569 -0.46246,0.470261 -0.197912,0.146396 -0.321395,0.525663 -0.40992,1.259038 -0.02366,0.19597 -0.101278,0.404668 -0.172496,0.463773 -0.113474,0.09418 -0.124021,0.06582 -0.08529,-0.229309 z m 1.266673,-2.257648 c 0.01843,-0.0553 0.07878,-0.115632 0.134113,-0.134075 0.06187,-0.02062 0.08079,0.01808 0.04915,0.100542 -0.05906,0.153899 -0.234059,0.185921 -0.183262,0.03353 z m 0.333937,-0.540086 c 0.01521,-0.129423 0.07029,-0.249287 0.122393,-0.266366 0.05987,-0.01962 0.07952,0.04853 0.05339,0.185222 -0.05768,0.301731 -0.209977,0.372033 -0.175784,0.08114 z\"\n               id=\"path3282-2-9\" />\n            <path\n               style=\"fill:#b0d3e0;stroke:${colors[19]};stroke-width:0.08466667;stroke-opacity:1\"\n               d=\"m 34.979432,84.607617 c 0,0.04657 -0.1143,0.08467 -0.254,0.08467 h -0.254 c -3.571061,-15.529109 11.278727,-2.706405 0.508,-0.08467 z m 41.094215,-0.04165 c -0.07847,-0.204489 0.01409,-0.951507 0.136121,-1.098541 0.05925,-0.0714 0.235539,-0.12981 0.391747,-0.12981 0.399948,0 0.55552,0.261121 0.50955,0.855259 l -0.03536,0.457075 -0.475157,0.02542 c -0.372521,0.01993 -0.486334,-0.0037 -0.526896,-0.109405 z m 11.102786,0.04165 c 0.02878,-0.04657 0.09043,-0.08467 0.136994,-0.08467 0.04657,0 0.06112,0.0381 0.03234,0.08467 -0.02878,0.04657 -0.09043,0.08467 -0.136994,0.08467 -0.04657,0 -0.06112,-0.0381 -0.03234,-0.08467 z m 0.335492,-0.07652 c 0.0198,-0.131473 0.0915,-0.139317 0.913342,-0.09992 0.0825,0.004 0.147592,0.07277 0.14687,0.15527 -0.0011,0.126623 -0.01323,0.129701 -0.08337,0.02117 -0.04514,-0.06985 -0.08266,-0.0878 -0.08337,-0.03988 -6.77e-4,0.04805 -0.205883,0.08967 -0.45756,0.09282 -0.37179,0.0046 -0.452497,-0.01932 -0.435911,-0.129447 z m 1.674807,0.05535 c 0.04433,-0.135027 0.564869,-0.189199 0.68299,-0.07108 0.04918,0.04918 0.06132,0.117529 0.02696,0.151882 -0.03435,0.03435 -0.09849,0.0064 -0.142522,-0.06209 -0.0668,-0.103919 -0.09239,-0.105432 -0.154481,-0.0091 -0.06283,0.09744 -0.08261,0.09744 -0.127,0 -0.04072,-0.08938 -0.06372,-0.09154 -0.101971,-0.0096 -0.02716,0.05821 -0.08749,0.105833 -0.134056,0.105833 -0.04657,0 -0.06903,-0.04763 -0.04992,-0.105833 z m 23.051038,0.02117 c -0.16326,-0.07015 -0.16268,-0.07298 0.0162,-0.07871 0.10202,-0.0033 0.20905,0.03215 0.23783,0.07871 0.0619,0.100142 -0.021,0.100142 -0.254,0 z m 0.42333,0 c 0.0288,-0.04657 0.0882,-0.08467 0.132,-0.08467 0.0438,0 0.0797,0.0381 0.0797,0.08467 0,0.04657 -0.0594,0.08467 -0.132,0.08467 -0.0726,0 -0.10845,-0.0381 -0.0797,-0.08467 z m 0.42889,-0.009 c 0.0565,-0.09146 0.37547,-0.101807 0.37538,-0.01217 -3e-5,0.03493 -0.095,0.06898 -0.2111,0.07568 -0.11608,0.0067 -0.19,-0.02188 -0.16428,-0.0635 z m 0.58711,0.009 c -0.16326,-0.07015 -0.16268,-0.07298 0.0162,-0.07871 0.10203,-0.0033 0.20905,0.03215 0.23783,0.07871 0.0619,0.100142 -0.021,0.100142 -0.254,0 z m 28.77121,-0.02502 c -0.0229,-0.03706 0.11304,-0.05825 0.3021,-0.0471 0.18906,0.01116 0.32595,0.03808 0.3042,0.05983 -0.0683,0.0683 -0.56264,0.05792 -0.6063,-0.01273 z m 0.98912,0.02002 c 0,-0.04932 0.0381,-0.06612 0.0847,-0.03734 0.0466,0.02878 0.0847,0.06913 0.0847,0.08966 0,0.02054 -0.0381,0.03734 -0.0847,0.03734 -0.0466,0 -0.0847,-0.04035 -0.0847,-0.08966 z m 0.59267,0.005 c 0,-0.04657 0.0381,-0.08467 0.0847,-0.08467 0.0466,0 0.0847,0.0381 0.0847,0.08467 0,0.04657 -0.0381,0.08467 -0.0847,0.08467 -0.0466,0 -0.0847,-0.0381 -0.0847,-0.08467 z m 0.33867,0.0057 c 0,-0.102892 0.31232,-0.201318 0.42258,-0.133174 0.16757,0.103568 0.0813,0.212135 -0.16858,0.212135 -0.1397,0 -0.254,-0.03553 -0.254,-0.07896 z m 0.6985,-0.02687 c 0.0194,-0.05821 0.0861,-0.105834 0.14816,-0.105834 0.0621,0 0.12877,0.04762 0.14817,0.105834 0.021,0.06296 -0.039,0.105833 -0.14817,0.105833 -0.10912,0 -0.16915,-0.04288 -0.14816,-0.105833 z m 0.508,0 c 0.0194,-0.05821 0.0861,-0.105834 0.14816,-0.105834 0.0621,0 0.12877,0.04762 0.14817,0.105834 0.021,0.06296 -0.039,0.105833 -0.14817,0.105833 -0.10912,0 -0.16915,-0.04288 -0.14816,-0.105833 z m 0.48683,0.03023 c 0,-0.09517 0.22023,-0.183942 0.28805,-0.116114 0.10193,0.101919 0.0463,0.191722 -0.11872,0.191722 -0.0931,0 -0.16933,-0.03402 -0.16933,-0.07561 z m 0.508,-0.0091 c 0,-0.04657 0.0381,-0.08467 0.0847,-0.08467 0.0466,0 0.0847,0.0381 0.0847,0.08467 0,0.04657 -0.0381,0.08467 -0.0847,0.08467 -0.0466,0 -0.0847,-0.0381 -0.0847,-0.08467 z m 0.35983,-0.02117 c 0.0194,-0.05821 0.0861,-0.105834 0.14817,-0.105834 0.0621,0 0.12876,0.04762 0.14817,0.105834 0.021,0.06296 -0.039,0.105833 -0.14817,0.105833 -0.10913,0 -0.16915,-0.04288 -0.14817,-0.105833 z m 0.508,0 c 0.0194,-0.05821 0.0861,-0.105834 0.14817,-0.105834 0.0621,0 0.12876,0.04762 0.14817,0.105834 0.021,0.06296 -0.039,0.105833 -0.14817,0.105833 -0.10913,0 -0.16915,-0.04288 -0.14817,-0.105833 z m 0.48684,0.03023 c 0,-0.09517 0.22022,-0.183942 0.28805,-0.116114 0.10192,0.101919 0.0463,0.191722 -0.11872,0.191722 -0.0931,0 -0.16933,-0.03402 -0.16933,-0.07561 z m 0.508,-0.0091 c 0,-0.04657 0.0381,-0.08467 0.0847,-0.08467 0.0466,0 0.0847,0.0381 0.0847,0.08467 0,0.04657 -0.0381,0.08467 -0.0847,0.08467 -0.0466,0 -0.0847,-0.0381 -0.0847,-0.08467 z m 0.60085,-0.0068 c 0.14581,-0.09231 0.33051,-0.100311 0.33042,-0.01432 -3e-5,0.03493 -0.10112,0.06936 -0.22464,0.07652 -0.1607,0.0093 -0.19079,-0.0084 -0.10578,-0.0622 z m 0.66915,0.0068 c 0,-0.04657 0.0381,-0.08467 0.0847,-0.08467 0.0466,0 0.0847,0.0381 0.0847,0.08467 0,0.04657 -0.0381,0.08467 -0.0847,0.08467 -0.0466,0 -0.0847,-0.0381 -0.0847,-0.08467 z m 0.35983,-0.02117 c 0.0194,-0.05821 0.0861,-0.105834 0.14817,-0.105834 0.0621,0 0.12876,0.04762 0.14816,0.105834 0.021,0.06296 -0.039,0.105833 -0.14816,0.105833 -0.10913,0 -0.16916,-0.04288 -0.14817,-0.105833 z m 0.9525,0.02117 c -0.0288,-0.04657 -0.0142,-0.08467 0.0323,-0.08467 0.0466,0 0.10822,0.0381 0.137,0.08467 0.0288,0.04657 0.0142,0.08467 -0.0324,0.08467 -0.0466,0 -0.10821,-0.0381 -0.13699,-0.08467 z m 0.46567,0 c 0,-0.04657 0.0381,-0.08467 0.0847,-0.08467 0.0466,0 0.0847,0.0381 0.0847,0.08467 0,0.04657 -0.0381,0.08467 -0.0847,0.08467 -0.0466,0 -0.0847,-0.0381 -0.0847,-0.08467 z m 0.254,0 c 0,-0.04657 0.0381,-0.08467 0.0847,-0.08467 0.0466,0 0.0847,0.0381 0.0847,0.08467 0,0.04657 -0.0381,0.08467 -0.0847,0.08467 -0.0466,0 -0.0847,-0.0381 -0.0847,-0.08467 z m 0.35983,-0.02117 c 0.0194,-0.05821 0.0861,-0.105834 0.14817,-0.105834 0.0621,0 0.12876,0.04762 0.14817,0.105834 0.021,0.06296 -0.039,0.105833 -0.14817,0.105833 -0.10913,0 -0.16916,-0.04288 -0.14817,-0.105833 z m 0.65617,0.02117 c 0,-0.04657 0.0381,-0.08467 0.0847,-0.08467 0.0466,0 0.0847,0.0381 0.0847,0.08467 0,0.04657 -0.0381,0.08467 -0.0847,0.08467 -0.0466,0 -0.0847,-0.0381 -0.0847,-0.08467 z m 0.33867,0 c 0,-0.10608 0.0898,-0.10608 0.254,0 0.1027,0.06637 0.0905,0.08232 -0.0635,0.08337 -0.10478,7.13e-4 -0.1905,-0.0368 -0.1905,-0.08337 z m 0.61383,-0.02117 c 0.0491,-0.147294 0.25374,-0.132647 0.29572,0.02117 0.0308,0.112889 0.0247,0.112889 -0.0551,0 -0.0609,-0.0861 -0.0902,-0.09292 -0.0911,-0.02117 -8.5e-4,0.05821 -0.0426,0.105833 -0.093,0.105833 -0.0505,0 -0.0759,-0.04763 -0.0564,-0.105833 z m 0.40217,0.02117 c 0,-0.04657 0.0381,-0.08467 0.0847,-0.08467 0.0466,0 0.0847,0.0381 0.0847,0.08467 0,0.04657 -0.0381,0.08467 -0.0847,0.08467 -0.0466,0 -0.0847,-0.0381 -0.0847,-0.08467 z m 0.33866,0 c 0,-0.04657 0.0381,-0.08467 0.0847,-0.08467 0.0466,0 0.0847,0.0381 0.0847,0.08467 0,0.04657 -0.0381,0.08467 -0.0847,0.08467 -0.0466,0 -0.0847,-0.0381 -0.0847,-0.08467 z m 0.508,0 c 0,-0.04657 0.0381,-0.08467 0.0847,-0.08467 0.0466,0 0.0847,0.0381 0.0847,0.08467 0,0.04657 -0.0381,0.08467 -0.0847,0.08467 -0.0466,0 -0.0847,-0.0381 -0.0847,-0.08467 z m 1.016,-0.05292 c 0,-0.108938 0.0551,-0.126566 0.26459,-0.08467 0.14552,0.0291 0.29792,0.05292 0.33866,0.05292 0.0408,0 0.0741,0.0381 0.0741,0.08467 0,0.1225 -0.31666,0.10425 -0.36726,-0.02117 -0.0342,-0.08467 -0.044,-0.08467 -0.0494,0 -0.01,0.15833 -0.26068,0.127797 -0.26068,-0.03175 z m 0.86784,0.03175 c 0.0194,-0.05821 0.0861,-0.105834 0.14816,-0.105834 0.0621,0 0.12876,0.04762 0.14817,0.105834 0.021,0.06296 -0.039,0.105833 -0.14817,0.105833 -0.10913,0 -0.16915,-0.04288 -0.14816,-0.105833 z m 0.48683,0.02117 c 0,-0.04657 0.0381,-0.08467 0.0847,-0.08467 0.0466,0 0.0847,0.0381 0.0847,0.08467 0,0.04657 -0.0381,0.08467 -0.0847,0.08467 -0.0466,0 -0.0847,-0.0381 -0.0847,-0.08467 z m 0.54996,-5.92e-4 c -0.029,-0.0469 0.009,-0.108753 0.0833,-0.13746 0.16211,-0.06221 0.25246,0.0063 0.17453,0.132425 -0.0703,0.113756 -0.18922,0.116078 -0.25785,0.005 z m 1.39737,5.92e-4 c 0,-0.04657 0.0381,-0.08467 0.0847,-0.08467 0.0466,0 0.0847,0.0381 0.0847,0.08467 0,0.04657 -0.0381,0.08467 -0.0847,0.08467 -0.0466,0 -0.0847,-0.0381 -0.0847,-0.08467 z m 0.33867,0.01411 c 0,-0.119296 0.0954,-0.174024 0.21995,-0.12622 0.17669,0.0678 0.14351,0.196775 -0.0506,0.196775 -0.0931,0 -0.16933,-0.03175 -0.16933,-0.07055 z m 0.67733,-0.01411 c 0,-0.04657 0.0381,-0.08467 0.0847,-0.08467 0.0466,0 0.0847,0.0381 0.0847,0.08467 0,0.04657 -0.0381,0.08467 -0.0847,0.08467 -0.0466,0 -0.0847,-0.0381 -0.0847,-0.08467 z m 0.33867,0.05221 c 0,-0.01785 0.0762,-0.05239 0.16933,-0.07674 0.0931,-0.02435 0.16934,-0.0097 0.16934,0.03246 0,0.04221 -0.0762,0.07674 -0.16934,0.07674 -0.0931,0 -0.16933,-0.01461 -0.16933,-0.03246 z m 0.80433,-0.05221 c -0.0288,-0.04657 -0.012,-0.08467 0.0373,-0.08467 0.0493,0 0.0897,0.0381 0.0897,0.08467 0,0.04657 -0.0168,0.08467 -0.0373,0.08467 -0.0205,0 -0.0609,-0.0381 -0.0897,-0.08467 z m 0.29634,0.005 c 0,-0.04382 0.0347,-0.101092 0.077,-0.127276 0.1094,-0.06762 0.35471,0.04017 0.29848,0.13115 -0.0623,0.100819 -0.37551,0.09759 -0.37551,-0.0039 z m 0.52916,-0.02616 c 0.0194,-0.05821 0.0861,-0.105833 0.14817,-0.105833 0.0621,0 0.12876,0.04762 0.14817,0.105833 0.021,0.06296 -0.039,0.105833 -0.14817,0.105833 -0.10913,0 -0.16916,-0.04288 -0.14817,-0.105833 z m 0.48684,0.02117 c 0,-0.04657 0.0594,-0.08467 0.13199,-0.08467 0.0726,0 0.10845,0.0381 0.0797,0.08467 -0.0288,0.04657 -0.0882,0.08467 -0.13199,0.08467 -0.0438,0 -0.0797,-0.0381 -0.0797,-0.08467 z m 0.42333,0 c 0,-0.04657 0.0381,-0.08467 0.0847,-0.08467 0.0466,0 0.0847,0.0381 0.0847,0.08467 0,0.04657 -0.0381,0.08467 -0.0847,0.08467 -0.0466,0 -0.0847,-0.0381 -0.0847,-0.08467 z m 0.36002,-0.211666 c 9.3e-4,-0.186267 0.0183,-0.252498 0.0385,-0.14718 0.0203,0.105318 0.0195,0.257718 -0.002,0.338667 -0.0212,0.08095 -0.0378,-0.0052 -0.0368,-0.191487 z m 0.003,-2.370667 c 8.4e-4,-0.232833 0.0171,-0.318034 0.0365,-0.189336 0.0195,0.128698 0.0189,0.319198 -0.001,0.423333 -0.0201,0.104135 -0.036,-0.0012 -0.0354,-0.233997 z m -0.005,-0.973667 c 0,-0.162983 0.0174,-0.229658 0.0387,-0.148167 0.0213,0.08149 0.0213,0.214842 0,0.296334 -0.0213,0.08149 -0.0387,0.01482 -0.0387,-0.148167 z m -78.876164,-2.8621 c -0.09378,-0.151736 0.118996,-0.725712 0.405207,-1.093074 0.167347,-0.214798 0.304267,-0.422389 0.304267,-0.461313 0,-0.11013 0.308138,-0.08321 0.401292,0.03506 0.185413,0.235402 0.195936,0.579101 0.02927,0.955887 -0.141687,0.320308 -0.203849,0.377613 -0.409615,0.377613 -0.133418,0 -0.316536,0.05594 -0.406927,0.124308 -0.189177,0.143085 -0.264254,0.157363 -0.32349,0.06152 z m -19.342032,-1.66392 c -0.465179,-0.52981 -0.440596,-1.502235 0.04103,-1.623116 0.141881,-0.03561 0.301443,0.01687 0.527421,0.173475 0.581,0.402633 0.687786,0.999667 0.262431,1.467235 -0.319443,0.351144 -0.510684,0.347094 -0.830884,-0.01759 z m 98.205526,-1.365295 c 0.004,-0.09863 0.0241,-0.118694 0.0512,-0.05115 0.0245,0.06112 0.0215,0.134144 -0.007,0.162278 -0.0281,0.02813 -0.0481,-0.02187 -0.0445,-0.111125 z m 0.007,-1.051278 c 0,-0.116417 0.0192,-0.164042 0.0427,-0.105833 0.0235,0.05821 0.0235,0.153458 0,0.211666 -0.0235,0.05821 -0.0427,0.01058 -0.0427,-0.105833 z M 88.67039,73.340243 c -0.567077,-0.224884 -0.948862,-0.711471 -1.07161,-1.36577 -0.0479,-0.255347 -0.02888,-0.321564 0.114388,-0.398241 0.107986,-0.05779 0.244696,-0.06425 0.367889,-0.01738 0.251839,0.09582 1.593043,1.106831 1.593043,1.200848 0,0.188883 -0.214029,0.504749 -0.372682,0.550009 -0.365472,0.104258 -0.436454,0.107692 -0.631028,0.03053 z M 83.662767,72.947624 C 83.500092,72.887103 82.8161,72.184475 82.8161,72.077888 c 0,-0.04442 -0.123825,-0.113122 -0.275167,-0.152675 -0.306317,-0.08006 -0.305185,-0.07208 -0.198465,-1.398342 0.06733,-0.83677 0.08414,-0.848256 0.830289,-0.567422 0.31531,0.118676 0.491389,0.245705 0.595518,0.429628 0.137845,0.243476 0.176533,0.25961 0.572203,0.238609 0.2334,-0.01239 0.455044,0.01335 0.492542,0.05721 0.0375,0.04385 0.134921,0.300526 0.216495,0.57039 0.137152,0.453722 0.138235,0.520649 0.0144,0.889 -0.137111,0.407826 -0.199363,0.450693 -1.189478,0.819087 -0.04657,0.01733 -0.141816,0.01024 -0.211666,-0.01574 z m 1.693333,-2.30889 c -0.09615,-0.06129 -0.105059,-0.116164 -0.03668,-0.225878 0.15998,-0.256674 0.343077,-0.325117 0.580433,-0.21697 0.277776,0.126563 0.27884,0.302278 0.0026,0.428144 -0.259923,0.118429 -0.378628,0.121624 -0.54635,0.0147 z M 68.316819,63.444287 c -0.221254,-0.07885 -0.49041,-0.226157 -0.598124,-0.327349 -0.232471,-0.218395 -0.295062,-0.225494 -0.483623,-0.05485 -0.200175,0.181156 -0.316144,0.02166 -0.472931,-0.650419 -0.126344,-0.541589 -0.30617,-0.833384 -0.513593,-0.833384 -0.183346,0 -0.293138,-0.388978 -0.179925,-0.637454 0.08656,-0.189978 0.06772,-0.243918 -0.171301,-0.490529 -0.147706,-0.152393 -0.268212,-0.332415 -0.267793,-0.400048 4.23e-4,-0.06763 -0.121163,-0.223182 -0.270185,-0.345665 -0.230682,-0.1896 -0.272986,-0.28305 -0.284661,-0.628821 -0.01732,-0.512993 -0.33915,-0.83274 -0.772812,-0.767814 -0.281245,0.04211 -0.366438,-0.04682 -0.366438,-0.382519 0,-0.224569 -0.255223,-0.994579 -0.348833,-1.052434 -0.04097,-0.02532 -0.0745,-0.252102 -0.0745,-0.503953 0,-0.25185 -0.08572,-0.73486 -0.1905,-1.073355 -0.157904,-0.510139 -0.266557,-0.691069 -0.635,-1.057407 -0.244475,-0.243079 -0.4445,-0.515439 -0.4445,-0.605244 0,-0.0898 -0.09525,-0.225693 -0.211666,-0.301972 -0.139324,-0.09129 -0.212088,-0.217599 -0.212899,-0.369571 -6.77e-4,-0.126984 -0.05716,-0.391422 -0.125523,-0.587638 -0.06836,-0.196217 -0.103159,-0.411828 -0.07733,-0.479137 0.04404,-0.114765 -0.03143,-0.470155 -0.182089,-0.85744 -0.136944,-0.352032 0.288775,0.130909 0.47633,0.540356 0.0985,0.215038 0.22253,0.481055 0.275618,0.591148 0.16393,0.339954 0.873349,0.910769 1.387814,1.116666 0.623457,0.249517 1.209745,0.715947 1.209745,0.962429 0,0.2567 0.157372,0.387735 0.465667,0.387735 0.289191,0 0.465667,0.12917 0.465667,0.340842 0,0.0757 0.09525,0.227123 0.211666,0.336491 0.217825,0.204635 0.276307,0.458057 0.127,0.550334 -0.129396,0.07997 -0.100727,0.381 0.03629,0.381 0.276945,0 0.398916,0.256535 0.341284,0.717807 -0.04467,0.357484 -0.02092,0.509517 0.123904,0.7934 0.115241,0.22589 0.160306,0.426287 0.126316,0.561712 -0.04358,0.173648 -0.01324,0.225593 0.173196,0.296475 0.454873,0.172942 1.008837,0.105814 1.386911,-0.168061 0.192851,-0.1397 0.417642,-0.254164 0.499537,-0.254364 0.0819,-1.69e-4 0.351373,-0.153868 0.598838,-0.341484 0.392074,-0.297247 0.488041,-0.33397 0.746202,-0.285539 0.389016,0.07298 1.24622,-0.112834 1.466267,-0.317839 0.09566,-0.08912 0.173926,-0.232088 0.173926,-0.317705 0,-0.22633 0.217777,-0.373185 0.462373,-0.311795 0.409978,0.102898 1.315627,0.794744 1.315627,1.005037 0,0.237072 0.193416,0.134679 0.33278,-0.17617 0.08111,-0.180903 0.180501,-0.270141 0.300891,-0.270141 0.183987,0 0.720996,0.48454 0.720996,0.650549 0,0.103403 0.529687,0.888727 0.986984,1.46332 0.266996,0.335481 0.295539,0.418021 0.252683,0.730693 -0.04954,0.361415 -0.399366,1.110481 -0.589274,1.261771 -0.05845,0.04657 -0.193197,0.208492 -0.299434,0.359834 -0.14933,0.212732 -0.254539,0.275166 -0.463688,0.275166 -0.168204,0 -0.434693,0.110554 -0.704545,0.292282 -0.440243,0.296477 -1.31873,0.639052 -1.638761,0.639052 -0.09646,0 -0.319215,0.07338 -0.495015,0.163067 -0.274521,0.14005 -0.401924,0.152862 -0.902597,0.09077 -0.372967,-0.04625 -0.640685,-0.0414 -0.74321,0.01347 -0.08814,0.04717 -0.245453,0.06438 -0.349593,0.03824 -0.142855,-0.03585 -0.235088,0.01435 -0.375649,0.204468 -0.152646,0.206465 -0.243205,0.249945 -0.501269,0.240672 -0.173231,-0.0062 -0.495991,-0.07583 -0.717246,-0.154682 z M 136.4196,55.459872 c -0.11119,-0.05752 -0.20085,-0.123636 -0.19924,-0.146919 0.0342,-0.493585 0.1489,-1.031634 0.23526,-1.103307 0.0612,-0.0508 0.27604,-0.08052 0.47739,-0.06603 0.32046,0.02306 0.36921,0.05309 0.39112,0.240922 0.0149,0.127362 -0.0617,0.333845 -0.18834,0.508 -0.11735,0.161381 -0.2515,0.379144 -0.2981,0.483919 -0.0972,0.218584 -0.14022,0.227164 -0.41809,0.08342 z M 35.614432,52.973659 c -0.232833,-0.07013 -0.585258,-0.206425 -0.783167,-0.302875 l -0.359833,-0.175362 v -6.883571 c 0,-4.227762 0.03085,-6.902639 0.07996,-6.932991 0.209353,-0.129388 1.528538,-0.104067 2.255632,0.04329 0.735874,0.14914 0.947101,0.157351 3.845072,0.149441 0.20955,-5.93e-4 1.026141,0.0274 1.814647,0.06216 1.306125,0.05757 1.479339,0.0838 1.947333,0.294889 0.282528,0.127432 0.681256,0.259537 0.886063,0.293565 0.204807,0.03403 0.498859,0.114718 0.653448,0.17931 0.154588,0.06459 0.520419,0.119098 0.812956,0.121126 0.819641,0.0057 1.1793,0.106841 1.895736,0.533203 0.363548,0.216353 0.795956,0.414856 0.960907,0.441118 0.614269,0.0978 0.673627,0.128978 0.852972,0.44808 0.227821,0.405352 0.558385,0.605911 0.998672,0.605911 0.438513,0 0.861266,0.330364 0.861266,0.673043 0,0.129062 0.02444,0.412968 0.05431,0.630905 0.07509,0.547851 0.260963,0.638276 0.796448,0.387468 0.514389,-0.240926 0.771338,-0.185673 0.909176,0.195508 0.0565,0.156254 0.102731,0.40434 0.102731,0.551302 0,0.449196 0.267138,0.55305 1.560302,0.606586 l 1.112642,0.04606 1.04405,0.506904 c 1.030461,0.500306 1.363006,0.761439 1.363006,1.070307 0,0.207219 -0.143547,0.203205 -0.209906,-0.0059 -0.02958,-0.09321 -0.365711,-0.333414 -0.78003,-0.557433 l -0.728048,-0.393648 -0.178175,0.212398 c -0.231019,0.275394 -0.8933,0.536175 -1.528395,0.601825 -0.522925,0.05405 -0.967565,0.303198 -1.150224,0.6445 -0.146817,0.27433 -0.01945,0.358239 0.449386,0.296046 0.399178,-0.05295 0.442106,-0.0397 0.708818,0.218807 0.397458,0.385231 0.391403,0.732533 -0.01821,1.044964 -0.494539,0.377202 -0.798544,0.862084 -0.798544,1.27366 0,0.514249 -0.133308,0.596748 -0.752083,0.465435 -0.272675,-0.05786 -0.577603,-0.07924 -0.677617,-0.04749 -0.220872,0.0701 -0.409912,0.496423 -0.482212,1.087481 -0.02985,0.244028 -0.147214,0.585094 -0.263825,0.766689 -0.201928,0.314457 -0.223573,0.324949 -0.559489,0.271234 -0.192188,-0.03073 -0.475343,-0.151912 -0.629232,-0.26929 -0.343717,-0.262166 -0.883703,-1.291306 -0.94847,-1.807659 -0.03884,-0.309647 -0.09939,-0.412913 -0.335093,-0.5715 -0.443105,-0.298134 -0.741834,-0.257 -1.101666,0.151692 -0.715603,0.812772 -0.842063,0.924744 -1.044391,0.924744 -0.266029,0 -0.454563,-0.212554 -0.620498,-0.699548 -0.19628,-0.576047 -0.43317,-0.781204 -1.145712,-0.992232 -0.344325,-0.101977 -0.759396,-0.228777 -0.922379,-0.281779 -0.162984,-0.053 -0.720062,-0.09815 -1.237952,-0.100341 -1.064966,-0.0045 -1.136058,-0.03583 -1.349546,-0.59484 -0.105176,-0.275398 -0.206481,-0.392203 -0.39809,-0.458998 -0.141358,-0.04928 -0.288035,-0.0896 -0.325949,-0.0896 -0.03791,0 -0.318358,0.233323 -0.623208,0.518495 -0.470978,0.440577 -0.611963,0.524998 -0.938168,0.561766 -0.46212,0.05209 -0.618848,0.28439 -0.691385,1.024766 -0.08795,0.897674 -0.247365,0.963518 -0.966305,0.399117 -0.409865,-0.321763 -0.506988,-0.455706 -0.690627,-0.952448 -0.133117,-0.360076 -0.231765,-0.843257 -0.261626,-1.281436 -0.04972,-0.72955 -0.211087,-1.099271 -0.561693,-1.28691 -0.131912,-0.0706 -0.198839,-0.03118 -0.395621,0.233006 -0.130267,0.174887 -0.455037,0.574755 -0.721709,0.888595 -0.753611,0.886902 -0.891086,1.278465 -0.617122,1.757716 0.06655,0.116417 0.12235,0.311213 0.124,0.43288 0.0017,0.121668 0.198049,0.571722 0.436442,1.000121 0.389641,0.700193 0.476672,0.91702 0.641479,1.598156 0.0322,0.133073 -0.0146,0.260542 -0.147649,0.402167 -0.229065,0.243828 -0.578645,0.26365 -1.223605,0.06938 z m 83.242778,-1.594362 c -0.0783,-0.07834 -0.14244,-0.209823 -0.14244,-0.292182 0,-0.214033 -0.3113,-1.413069 -0.49653,-1.912495 -0.24064,-0.648841 -0.35014,-1.014202 -0.35014,-1.168302 0,-0.07715 -0.10037,-0.360199 -0.22304,-0.62899 -0.29668,-0.650061 -0.26469,-0.595208 -0.7789,-1.335396 -0.44304,-0.637743 -0.45305,-0.665575 -0.52791,-1.468023 -0.0906,-0.971638 -0.22892,-1.586505 -0.42198,-1.87629 -0.15814,-0.237376 -0.4988,-1.115412 -0.55842,-1.439333 -0.11517,-0.625649 -0.24348,-0.995772 -0.41092,-1.185334 -0.17937,-0.203072 -0.46618,-1.184149 -0.46572,-1.593066 9e-5,-0.107836 -0.0387,-0.268736 -0.0862,-0.357555 -0.0475,-0.08882 -0.12758,-0.362539 -0.17787,-0.608267 -0.0503,-0.245728 -0.11949,-0.580128 -0.15376,-0.743112 -0.0343,-0.162983 -0.1618,-0.441617 -0.28341,-0.619187 -0.1216,-0.177569 -0.24698,-0.501419 -0.27861,-0.719666 -0.0861,-0.593885 -0.14003,-0.607979 -0.26254,-0.06856 -0.0761,0.335128 -0.0846,0.538551 -0.0269,0.646332 0.1502,0.280647 0.0908,0.517142 -0.28595,1.137632 -0.20358,0.335313 -0.41739,0.759239 -0.47514,0.942056 -0.0578,0.182818 -0.16454,0.457419 -0.2373,0.610225 -0.11564,0.242854 -0.11838,0.360093 -0.0218,0.931333 0.0608,0.359428 0.1376,0.901155 0.17071,1.203838 0.0338,0.309339 0.15304,0.735714 0.2722,0.973667 0.11659,0.232833 0.35291,0.785284 0.52514,1.227667 0.17223,0.442383 0.38766,0.945231 0.47873,1.117441 0.0911,0.172208 0.1668,0.438908 0.16828,0.592666 10e-4,0.153758 0.0586,0.353517 0.127,0.443909 0.0684,0.09039 0.12431,0.291757 0.12431,0.447478 0,0.155722 0.0534,0.367515 0.11869,0.470651 0.0653,0.103137 0.14546,0.320872 0.17817,0.483855 0.0327,0.162983 0.24636,0.590041 0.47475,0.949019 0.2284,0.358976 0.45528,0.759026 0.50418,0.889 0.0489,0.129972 0.23629,0.464914 0.41642,0.744315 0.38368,0.595119 0.4894,1.035816 0.33684,1.404124 -0.13456,0.324869 -0.27157,0.162708 -0.19877,-0.235265 0.0297,-0.162612 8.4e-4,-0.365197 -0.0726,-0.508 -0.42757,-0.832201 -1.22492,-2.236603 -1.43018,-2.519039 -0.13358,-0.183799 -0.24287,-0.413868 -0.24287,-0.511265 0,-0.0974 -0.0762,-0.326546 -0.16934,-0.509222 -0.0931,-0.182676 -0.16933,-0.437363 -0.16933,-0.565971 0,-0.128608 -0.0727,-0.396777 -0.16145,-0.595931 -0.0888,-0.199154 -0.22644,-0.590698 -0.30587,-0.870098 -0.0794,-0.2794 -0.3074,-0.86995 -0.50659,-1.312334 -0.61734,-1.371066 -0.63862,-1.436344 -0.76923,-2.359968 -0.26869,-1.89991 -0.26815,-1.909567 0.15201,-2.720032 0.2052,-0.395817 0.47646,-0.896169 0.60279,-1.111894 0.19525,-0.333386 0.21619,-0.427781 0.1396,-0.629222 -0.10543,-0.277295 0.11913,-1.815557 0.31086,-2.129406 0.1351,-0.221163 0.15164,-0.668558 0.0275,-0.745249 -0.0478,-0.02957 -0.20977,0.01778 -0.35983,0.105227 -0.19962,0.116327 -0.33359,0.305496 -0.49922,0.704935 -0.1245,0.300268 -0.22986,0.660242 -0.23413,0.799942 -0.01,0.316691 -0.0485,0.375835 -0.48507,0.739467 -0.46676,0.388733 -1.13743,0.488933 -1.62109,0.242192 -0.49385,-0.251943 -0.87772,-0.293696 -1.38436,-0.150574 -0.2484,0.07017 -0.62309,0.154699 -0.83264,0.18784 -0.20955,0.03314 -0.5334,0.138459 -0.71966,0.234041 -0.67561,0.346688 -0.78978,0.398034 -0.88504,0.398034 -0.0533,0 -0.32282,0.159321 -0.59894,0.354046 -0.46583,0.328516 -0.52506,0.348357 -0.82136,0.275166 -0.43282,-0.106913 -0.40263,-0.242293 0.0614,-0.275268 0.23744,-0.01687 0.47985,-0.102661 0.64411,-0.22795 0.42526,-0.324358 1.69601,-0.883623 2.30579,-1.014791 0.31022,-0.06673 0.69714,-0.16075 0.85981,-0.208932 0.42594,-0.126158 1.03477,-0.10776 1.24222,0.03754 0.25657,0.179708 1.05475,0.258295 1.30621,0.128606 0.35341,-0.182269 0.66946,-0.531865 0.66946,-0.740514 0,-0.262925 0.24495,-1.009408 0.44047,-1.342354 0.0904,-0.15397 0.30288,-0.327077 0.51309,-0.418052 0.19733,-0.0854 0.42305,-0.209001 0.50161,-0.274676 0.23441,-0.195969 0.31701,-0.04452 0.3034,0.556317 -0.0102,0.448426 0.0372,0.691152 0.22433,1.148978 0.18523,0.453238 0.22523,0.655416 0.18252,0.922518 -0.0387,0.242314 -0.007,0.468094 0.10954,0.774218 0.0903,0.237683 0.2076,0.670967 0.26061,0.962855 0.053,0.291888 0.14789,0.710988 0.21085,0.931334 0.063,0.220345 0.1743,0.648277 0.24742,0.95096 0.0731,0.302684 0.26761,0.812541 0.43221,1.133017 0.16461,0.320476 0.29943,0.663376 0.29959,0.762 4.3e-4,0.258741 0.46302,1.459065 0.62453,1.620574 0.0753,0.0753 0.15393,0.219978 0.17472,0.321497 0.0739,0.360714 0.23731,1.629341 0.25409,1.972459 0.0123,0.251666 0.12711,0.520584 0.41303,0.967483 0.2178,0.340415 0.39599,0.674251 0.39599,0.741858 0,0.06761 0.12383,0.266708 0.27517,0.442446 0.31333,0.363839 0.54704,0.706473 0.88589,1.298771 0.12977,0.226842 0.36456,0.607842 0.52175,0.846667 0.71641,1.088414 1.11119,1.755264 1.11119,1.876957 0,0.157691 -0.45471,0.361935 -0.95995,0.431187 -0.27641,0.03789 -0.39806,0.01564 -0.50627,-0.09257 z M 60.843259,49.93846 c -0.165215,-0.362541 -0.280785,-0.67877 -0.256823,-0.702733 0.02396,-0.02396 0.182602,0.249198 0.352533,0.607023 0.169931,0.357826 0.285501,0.674055 0.256822,0.702733 -0.02868,0.02868 -0.187317,-0.244483 -0.352532,-0.607023 z m 81.621381,-0.31394 c -0.0953,-0.196458 -0.10031,-0.236149 -0.0168,-0.1324 0.0656,0.08149 0.18492,0.148166 0.26516,0.148166 0.0802,0 0.1308,0.04524 0.11237,0.100542 -0.0689,0.206833 -0.22905,0.155211 -0.36072,-0.116308 z M 60.18431,48.411556 c -0.07744,-0.162398 -0.107943,-0.29527 -0.06778,-0.29527 0.08403,0 0.305184,0.49394 0.247139,0.551985 -0.02121,0.02121 -0.101917,-0.09432 -0.17936,-0.256715 z m 80.28668,-0.689148 c -0.22997,-0.207769 -0.48524,-0.341414 -0.77808,-0.407368 -0.61659,-0.138868 -0.6648,-0.344582 -0.062,-0.26462 0.24704,0.03277 0.52214,0.09864 0.61133,0.146379 0.23067,0.123447 0.82454,0.670841 0.82454,0.760006 0,0.165086 -0.27208,0.05804 -0.59578,-0.234397 z m -1.61801,-1.250642 c -0.11509,-0.252595 -0.0231,-0.810813 0.13361,-0.810813 0.0624,0 0.22262,-0.05692 0.356,-0.126479 0.3077,-0.16048 0.42351,-0.160226 0.4854,0.0011 0.0311,0.08111 -0.0906,0.270512 -0.3296,0.512979 -0.20843,0.211417 -0.37896,0.439303 -0.37896,0.506414 0,0.19315 -0.16385,0.142005 -0.26645,-0.08317 z m 10.93445,-2.262186 c 0,-1.32748 0.0287,-1.721925 0.15837,-2.180166 0.28812,-1.017793 0.42258,-1.735133 0.47781,-2.549128 0.0553,-0.81482 0.2294,-1.546405 0.42317,-1.778 0.0584,-0.06985 0.18527,-0.284226 0.28185,-0.476392 0.0966,-0.192164 0.23237,-0.371178 0.30176,-0.397806 0.0694,-0.02663 0.1664,-0.197804 0.21556,-0.38039 0.21234,-0.788567 0.64634,-0.968464 1.26145,-0.522882 0.40828,0.295756 0.43509,0.453151 0.13123,0.770319 -0.23056,0.240644 -0.26255,0.425194 -0.16141,0.931097 0.0569,0.284609 0.0331,0.333244 -0.35666,0.729217 -0.22969,0.233348 -0.51951,0.49103 -0.64404,0.572625 -0.16147,0.105797 -0.22642,0.220612 -0.22642,0.400255 0,0.173918 -0.0786,0.320902 -0.254,0.474783 -0.23565,0.206783 -0.254,0.264631 -0.254,0.800899 0,0.368647 -0.05,0.674669 -0.13798,0.844848 -0.18529,0.358319 -0.10728,1.374123 0.13621,1.773488 0.0938,0.153783 0.17061,0.338878 0.17079,0.411323 0,0.07244 0.0956,0.260822 0.21198,0.418616 0.23322,0.31612 0.2756,0.535447 0.0952,0.493041 -0.14138,-0.03324 -0.89957,-0.911117 -0.89957,-1.041579 0,-0.05114 -0.0709,-0.232057 -0.15756,-0.402028 -0.14126,-0.277086 -0.14718,-0.368656 -0.0572,-0.885735 0.0552,-0.317184 0.15999,-0.690999 0.23289,-0.830699 0.0979,-0.187569 0.12176,-0.409005 0.0914,-0.846667 -0.041,-0.590741 -0.0402,-0.593615 0.26334,-0.884442 0.38924,-0.372971 0.42972,-0.807807 0.0873,-0.937987 -0.11944,-0.04541 -0.24885,-0.08257 -0.28756,-0.08257 -0.0387,0 -0.11404,0.333375 -0.16738,0.740833 -0.0534,0.407459 -0.1328,0.988484 -0.17656,1.291167 -0.0438,0.302683 -0.1213,0.872945 -0.17233,1.267248 -0.051,0.394303 -0.15053,0.851503 -0.22112,1.016001 -0.10315,0.240393 -0.11753,0.508385 -0.0732,1.365653 0.0586,1.135154 0.0146,1.515765 -0.17547,1.515765 -0.0966,0 -0.11783,-0.292637 -0.11783,-1.620706 z m -11.00011,0.802823 c -0.0496,-0.178814 -0.0905,-0.42336 -0.0907,-0.543435 0,-0.120074 -0.11949,-0.397991 -0.26494,-0.617592 -0.22905,-0.345795 -0.25543,-0.441296 -0.19698,-0.713015 0.10683,-0.496642 0.0924,-1.142305 -0.0264,-1.181909 -0.0577,-0.01922 -0.10484,-0.107969 -0.10484,-0.197221 0,-0.188833 0.34957,-0.229416 0.4862,-0.05644 0.14669,0.185692 0.18027,0.779362 0.0539,0.95222 -0.18096,0.247468 -0.14008,0.76853 0.0949,1.209985 0.11642,0.218688 0.21191,0.474118 0.2122,0.567621 0,0.0935 0.0538,0.272155 0.11894,0.397003 0.10581,0.2028 0.10189,0.241967 -0.0368,0.367451 -0.14725,0.133262 -0.15982,0.123808 -0.24548,-0.184663 z m 0.67078,0.05588 c 0,-0.04657 0.0381,-0.08467 0.0847,-0.08467 0.0466,0 0.0847,0.0381 0.0847,0.08467 0,0.04657 -0.0381,0.08467 -0.0847,0.08467 -0.0466,0 -0.0847,-0.0381 -0.0847,-0.08467 z m -6.63043,-4.370727 c -0.10047,-1.420754 -0.4736,-2.25491 -1.1719,-2.619779 -0.12356,-0.06456 -0.30863,-0.253254 -0.41125,-0.419311 -0.19661,-0.318124 -0.19469,-0.537469 0.009,-1.033725 0.10055,-0.244906 0.0924,-0.313903 -0.0787,-0.666057 -0.14331,-0.294998 -0.17881,-0.480012 -0.14248,-0.742791 0.0459,-0.331771 0.026,-0.373017 -0.38312,-0.794258 l -0.4315,-0.444313 -0.40204,0.1315 c -0.23624,0.07727 -0.60918,0.120838 -0.90434,0.105647 -0.44716,-0.02302 -0.50527,-0.04677 -0.52936,-0.216353 -0.022,-0.15515 0.0133,-0.1905 0.1905,-0.1905 0.11966,0 0.21756,0.04282 0.21756,0.09515 0,0.166049 0.87989,0.04227 1.13696,-0.159939 0.29832,-0.234656 0.55017,-0.146473 0.74651,0.261379 0.0813,0.168864 0.23735,0.365696 0.34679,0.437405 0.29249,0.191646 0.40618,0.492312 0.30064,0.795062 -0.0673,0.193083 -0.057,0.308504 0.045,0.50585 0.0727,0.140628 0.17059,0.279402 0.21749,0.308386 0.15353,0.09488 0.0952,0.684593 -0.0912,0.921491 -0.1733,0.220313 -0.17365,0.229033 -0.02,0.492145 0.086,0.147323 0.32667,0.353569 0.53474,0.458326 0.46003,0.231618 0.67767,0.48488 0.67767,0.788608 0,0.125641 0.0559,0.302395 0.12431,0.392787 0.0684,0.09039 0.12672,0.278649 0.12969,0.418349 0.003,0.1397 0.0582,0.323757 0.12287,0.409016 0.14246,0.187989 0.0838,1.053077 -0.0835,1.23159 -0.0902,0.09622 -0.11649,0.01482 -0.15047,-0.465666 z m 4.61202,0.175743 c -0.13376,-0.293588 -0.12339,-0.461683 0.0285,-0.461683 0.1278,0 0.38804,0.495934 0.3221,0.613833 -0.0747,0.133492 -0.25638,0.05463 -0.3506,-0.15215 z m -33.96492,-2.722811 c -0.0699,-0.02553 -0.20638,-0.118452 -0.30339,-0.206484 -0.097,-0.08803 -0.2646,-0.149858 -0.37241,-0.13739 -0.16854,0.01949 -0.22097,-0.04639 -0.37395,-0.469794 l -0.17792,-0.492463 0.31626,-0.290704 c 0.2579,-0.23707 0.38287,-0.290464 0.67733,-0.289408 0.19859,6.78e-4 0.40857,0.03146 0.46662,0.06832 0.2269,0.144085 0.3741,1.086479 0.28337,1.814221 -0.009,0.07173 -0.32363,0.07399 -0.51591,0.0037 z M 34.471432,30.288955 c 0,-3.264487 0.0218,-4.099023 0.105833,-4.051579 0.08467,0.0478 0.08467,0.03695 0,-0.05427 -0.143722,-0.154841 -0.150814,-3.049306 -0.0078,-3.1923 0.07424,-0.07424 0.07372,-0.127284 -0.0021,-0.218695 -0.07452,-0.08979 -0.09042,-0.876272 -0.06209,-3.072755 0.02094,-1.623639 0.05727,-3.237822 0.08073,-3.587072 0.02731,-0.406438 0.01771,-0.543575 -0.02667,-0.381 -0.04462,0.163459 -0.07035,-0.191164 -0.07218,-0.994833 l -0.0028,-1.248833 h 0.499984 c 0.476281,0 0.50247,0.01104 0.552421,0.232833 0.234054,1.039264 0.279255,1.089702 0.864138,0.964267 0.226472,-0.04857 0.500618,-0.06507 0.609215,-0.03668 0.190897,0.04992 0.195672,0.03867 0.143901,-0.339045 -0.06533,-0.476596 -0.02952,-0.507697 0.640702,-0.556575 0.08149,-0.0059 0.148166,-0.06253 0.148166,-0.125755 0,-0.197654 1.59708,-0.238531 6.79328,-0.173871 4.817884,0.05995 4.900282,0.06382 4.99148,0.234224 0.193,0.360623 0.576574,1.871484 0.576574,2.271067 0,0.416447 -0.140482,0.801251 -0.358604,0.982276 -0.08694,0.07215 -0.249469,0.06489 -0.652644,-0.02916 -0.526752,-0.122883 -1.989993,-0.36126 -2.685472,-0.43749 -0.271639,-0.02977 -0.436547,0.01061 -0.719667,0.176249 -0.202004,0.118181 -0.647079,0.328596 -0.989056,0.46759 -0.730393,0.296862 -1.110794,0.547623 -1.87864,1.238402 -0.635261,0.571502 -1.376523,1.124356 -1.643748,1.225955 -0.09798,0.03725 -0.47638,0.338624 -0.840902,0.66972 -0.557424,0.506309 -0.710064,0.601992 -0.96034,0.601992 -0.209905,0 -0.3828,0.07483 -0.586863,0.254 -0.210002,0.184384 -0.375502,0.25413 -0.603844,0.254472 -0.580159,8.71e-4 -0.925252,0.146667 -1.025099,0.433089 -0.0604,0.173261 -0.06295,0.312519 -0.0076,0.415894 0.04575,0.08548 0.08317,0.234118 0.08317,0.330312 0,0.160406 0.05004,0.1749 0.603807,0.1749 0.602193,0 0.60482,10e-4 0.982513,0.378705 0.347316,0.347317 1.10779,0.850075 1.178647,0.779217 0.01644,-0.01643 -0.155135,-0.130581 -0.381267,-0.253657 -0.350622,-0.190832 -0.8597,-0.740856 -0.8597,-0.928846 0,-0.0318 0.130233,-0.112228 0.289406,-0.178735 0.255409,-0.106717 0.368462,-0.103765 0.962368,0.02512 0.414087,0.08986 0.832013,0.247832 1.086427,0.410652 0.673972,0.431326 1.201719,0.628775 1.398757,0.523323 0.106249,-0.05686 0.205646,-0.06081 0.268954,-0.01069 0.05523,0.04373 0.24743,0.106022 0.427108,0.138435 0.308008,0.05556 0.347863,0.03683 0.697075,-0.327627 0.203715,-0.212608 0.406024,-0.38656 0.449576,-0.38656 0.04355,0 0.157751,0.127122 0.253776,0.282493 0.193554,0.313177 1.053433,1.156841 1.179075,1.156841 0.158314,0 0.789035,0.730541 1.084298,1.255902 0.251149,0.446869 0.291846,0.587027 0.244198,0.841009 -0.06867,0.36603 -0.56813,1.381736 -0.75621,1.537829 -0.07378,0.06123 -0.134141,0.159147 -0.134141,0.217593 0,0.05845 -0.05653,0.153179 -0.125615,0.210517 -0.103786,0.08613 -0.254596,0.01178 -0.867833,-0.42785 -0.528605,-0.378962 -0.937157,-0.595342 -1.419552,-0.751837 -0.372533,-0.120853 -0.721064,-0.247347 -0.774513,-0.281097 -0.05345,-0.03375 -0.392933,-0.102499 -0.75441,-0.152776 -0.599504,-0.08338 -0.67649,-0.07711 -0.876488,0.07137 -0.12059,0.08953 -0.275645,0.262153 -0.344565,0.383599 -0.11801,0.207949 -0.111243,0.235494 0.116147,0.472839 0.223214,0.232985 0.327925,0.528552 0.448891,1.267082 0.04282,0.261407 4.91e-4,0.330252 -0.535285,0.870621 -0.319977,0.322723 -0.734177,0.688143 -0.920444,0.812047 -0.915464,0.608958 -1.159276,1.042327 -0.80098,1.423716 0.293503,0.312419 0.305629,0.731997 0.03653,1.263866 -0.310912,0.614508 -0.393983,0.679095 -1.138846,0.88545 -0.542215,0.150215 -0.87404,0.175448 -2.307167,0.175448 h -1.673868 z m 6.265333,-6.081945 c 0,-0.0183 -0.05913,-0.05597 -0.131397,-0.0837 -0.07535,-0.02891 -0.109332,-0.01472 -0.07967,0.03327 0.04972,0.08045 0.211067,0.118994 0.211067,0.05042 z m 87.497555,9.42245 c -0.0296,-0.04791 -0.0405,-0.09691 -0.0242,-0.108893 0.49572,-0.364298 0.58156,-0.399994 0.6339,-0.263605 0.0604,0.157317 0.001,0.223192 -0.32607,0.36205 -0.15545,0.06599 -0.24723,0.06937 -0.28364,0.01045 z m 28.03012,-1.868044 c -0.2794,-0.143032 -0.51507,-0.265738 -0.5237,-0.272681 -0.009,-0.0069 0.0198,-0.297659 0.0631,-0.646036 0.0588,-0.472485 0.13922,-0.719457 0.31648,-0.97208 0.1307,-0.186267 0.32785,-0.594276 0.43811,-0.906686 0.19805,-0.561098 0.19861,-0.572188 0.0462,-0.910166 -0.12268,-0.272071 -0.19934,-0.342245 -0.37426,-0.342621 -0.82796,-0.0018 -1.18188,-0.39022 -1.20699,-1.324684 -0.0195,-0.725304 0.17944,-1.133108 0.77382,-1.586391 0.38566,-0.294105 0.93286,-1.13227 0.93286,-1.428888 0,-0.0708 -0.10651,-0.147034 -0.2438,-0.17449 -0.31413,-0.06283 -0.5182,-0.269887 -0.5182,-0.52581 0,-0.221716 -0.21465,-0.377185 -0.5236,-0.379228 -0.38214,-0.0025 -0.4362,-0.103951 -0.28804,-0.540359 0.16339,-0.481268 0.10031,-0.610445 -0.53464,-1.094661 -0.33413,-0.254812 -0.45169,-0.412636 -0.56665,-0.760764 -0.19994,-0.605446 -0.32881,-0.779476 -0.80637,-1.08892 -0.39266,-0.254431 -0.41219,-0.284921 -0.39214,-0.612104 l 0.0211,-0.344335 -0.66201,-0.266202 c -0.3641,-0.146411 -0.76977,-0.369448 -0.90149,-0.495638 l -0.23947,-0.229435 -0.34337,0.197617 -0.34337,0.197618 -0.66015,-0.33826 c -0.55219,-0.282946 -0.67335,-0.383116 -0.74091,-0.612559 -0.0602,-0.204614 -0.1531,-0.298171 -0.36548,-0.368267 -0.15815,-0.05219 -0.32557,-0.183599 -0.37659,-0.295574 -0.0505,-0.110883 -0.1718,-0.225895 -0.26951,-0.255581 -0.0977,-0.02969 -0.23893,-0.107635 -0.31381,-0.173219 -0.0846,-0.07413 -0.50067,-0.15123 -1.09953,-0.203782 -1.11865,-0.09817 -1.56395,-0.201201 -1.63162,-0.377531 -0.0794,-0.20681 0.0104,-0.321567 0.51238,-0.655248 l 0.47766,-0.3175 h 3.88345 c 3.37387,0 3.88986,-0.01666 3.9322,-0.127 0.064,-0.166845 0.59191,-0.166845 0.99123,0 0.39207,0.16382 1.15769,0.165322 1.37271,0.0027 0.13849,-0.104749 0.74051,-0.124731 3.82618,-0.127 l 3.66183,-0.0027 v 5.416634 5.416635 l -1.95226,-0.0042 c -1.42138,-0.0031 -1.98625,0.02396 -2.07722,0.09946 -0.0987,0.08193 -0.16678,0.08132 -0.32419,-0.0029 -0.16491,-0.08826 -0.24098,-0.0839 -0.44161,0.0253 -0.13331,0.07256 -0.37012,0.199922 -0.52625,0.283023 l -0.28385,0.151093 0.0561,0.496069 c 0.0309,0.272839 0.0919,0.590246 0.13569,0.705352 0.17276,0.454365 0.0604,1.040818 -0.24223,1.263964 -0.0852,0.06287 -0.1109,0.183631 -0.081,0.381 0.0241,0.158929 0.002,0.365162 -0.0482,0.458295 -0.0506,0.09313 -0.119,0.378884 -0.15191,0.635 -0.0329,0.256117 -0.10715,0.732367 -0.16498,1.058334 -0.0578,0.325966 -0.0971,0.902173 -0.0873,1.280459 0.0269,1.035363 -0.19915,1.173823 -1.13447,0.695005 z m 7.21216,-8.553006 c -0.027,-0.06754 -0.0471,-0.04748 -0.0511,0.05115 -0.004,0.08925 0.0163,0.139259 0.0445,0.111125 0.0281,-0.02814 0.0311,-0.10116 0.007,-0.162278 z m -50.26368,7.807981 c -0.13294,-0.248403 0.003,-0.763287 0.30741,-1.166939 0.22768,-0.301601 0.37642,-0.342583 0.53777,-0.148167 0.0862,0.103875 0.0808,0.127 -0.0298,0.127 -0.14327,0 -0.47815,0.637687 -0.47815,0.910506 0,0.08679 -0.0521,0.229095 -0.11585,0.316237 -0.11149,0.152462 -0.11984,0.151004 -0.22133,-0.03864 z m 18.82516,-0.547383 c -0.18008,-0.128376 -0.29276,-0.523896 -0.29106,-1.021723 0.002,-0.469615 0.0891,-0.626669 0.47486,-0.852768 0.21015,-0.123157 0.42066,-0.295991 0.4678,-0.384076 0.13385,-0.250096 0.2946,-0.189947 0.45744,0.171156 0.16326,0.362051 0.12498,0.515355 -0.12868,0.515355 -0.19693,0 -0.20878,0.149428 -0.0379,0.477155 0.16953,0.325061 0.16061,0.735141 -0.0206,0.948501 -0.20045,0.23597 -0.68767,0.313345 -0.92185,0.1464 z m -20.21103,-2.18589 c -0.21278,-0.151341 -0.59306,-0.437961 -0.84507,-0.636932 -0.3449,-0.272312 -0.64406,-0.414806 -1.20987,-0.576272 -0.41342,-0.117979 -1.05976,-0.306931 -1.43631,-0.419895 l -0.68464,-0.205387 -0.64886,-0.853228 c -0.35688,-0.469276 -0.6497,-0.917629 -0.65072,-0.99634 -0.001,-0.07871 0.10375,-0.559212 0.23283,-1.067777 l 0.23469,-0.924666 0.47961,-0.345335 c 0.26378,-0.189934 0.83003,-0.589406 1.25833,-0.887716 l 0.77873,-0.542382 -0.0599,-1.150952 -0.0599,-1.150951 -0.68424,-1.100667 c -0.93162,-1.498597 -1.59656,-2.485151 -2.05117,-3.043288 -0.20964,-0.257393 -0.38118,-0.506012 -0.38118,-0.552487 0,-0.126788 5.13435,-0.100272 5.23471,0.02703 0.0422,0.05357 0.12553,0.473969 0.1851,0.93421 0.0794,0.613269 0.17357,0.959092 0.3526,1.294596 l 0.2443,0.457794 -0.23015,0.589237 c -0.12658,0.324081 -0.26339,0.589237 -0.30402,0.589237 -0.0406,0 -0.043,0.04763 -0.005,0.105834 0.0377,0.05821 0.12564,0.371979 0.19549,0.69727 l 0.127,0.591437 0.32632,0.05284 c 0.36448,0.05901 0.47481,0.179227 0.47672,0.519411 6.8e-4,0.127116 0.0581,0.374766 0.12757,0.550333 0.12434,0.314323 0.22166,1.050927 0.21557,1.631547 -0.004,0.399872 0.10103,0.561491 0.24927,0.382872 0.10022,-0.120763 0.12512,-0.119915 0.26769,0.0091 0.0865,0.07824 0.1572,0.192178 0.1572,0.25319 0,0.06101 0.1117,0.238156 0.24823,0.393651 0.13652,0.155496 0.27419,0.386163 0.30592,0.512594 0.0321,0.127961 0.2599,0.402619 0.51377,0.619512 0.25084,0.2143 0.45608,0.454567 0.45608,0.533927 0,0.07936 -0.0986,0.236656 -0.21902,0.349549 -0.20466,0.191811 -0.21535,0.239622 -0.16309,0.729808 0.0508,0.476352 0.0393,0.534698 -0.1245,0.635 -0.0992,0.06075 -0.24123,0.23744 -0.31556,0.392649 -0.0743,0.155209 -0.21502,0.315413 -0.31265,0.356008 -0.0976,0.04059 -0.26656,0.14487 -0.37538,0.23172 l -0.19787,0.157911 0.20745,0.248081 c 0.27227,0.325598 0.35585,0.605186 0.22724,0.760144 -0.0765,0.09212 -0.30936,0.122937 -0.92908,0.122937 -0.79729,0 -0.84098,-0.0099 -1.21393,-0.275167 z m -2.34095,-4.051892 c 0,-0.08815 -0.0159,-0.160274 -0.0354,-0.160274 -0.0195,0 -0.0957,-0.02313 -0.16933,-0.05139 -0.0996,-0.03821 -0.13393,0.0016 -0.13393,0.155222 0,0.113638 0.0228,0.229389 0.0506,0.257225 0.0948,0.09477 0.28805,-0.03996 0.28805,-0.200781 z m 15.41155,1.705555 c -0.10506,-0.06644 -0.092,-0.113757 0.0824,-0.299466 0.22186,-0.236175 0.5131,-0.235238 0.75588,0.0024 0.10448,0.102269 0.0987,0.125415 -0.0423,0.170649 -0.0898,0.02878 -0.25072,0.08733 -0.35768,0.130111 -0.23958,0.09581 -0.28146,0.09546 -0.4383,-0.0037 z m 9.31112,-7.318522 -1.143,-0.0957 -0.88425,-0.464305 -0.88424,-0.464304 -1.00137,-1.439333 c -1.09213,-1.569795 -1.45738,-2.19644 -1.38706,-2.379696 0.0388,-0.101062 1.17244,-0.115645 7.56111,-0.09726 6.84447,0.01969 7.51785,0.03385 7.54186,0.158545 0.0145,0.07531 -0.16754,0.349093 -0.40455,0.608414 -0.51445,0.562887 -2.11224,1.502325 -2.61271,1.536164 -0.78001,0.05274 -0.94131,0.130365 -1.25611,0.604498 -0.29954,0.45114 -0.42638,0.529843 -1.25158,0.776599 -0.16451,0.04919 -0.31099,0.186837 -0.42333,0.397783 -0.1595,0.299499 -0.23835,0.34591 -1.10311,0.649144 -1.01051,0.35435 -1.01603,0.35477 -2.75166,0.209452 z\"\n               id=\"path3280-9-0\" />\n            <path\n               style=\"fill:${colors[31]};stroke:${colors[19]};stroke-width:0.08466667;stroke-opacity:1\"\n               d=\"m 76.190048,84.205455 c 0.04722,-0.671891 0.06241,-0.6985 0.398781,-0.6985 0.32732,0 0.343109,0.03 0.412229,0.783166 l 0.03691,0.402167 H 76.5969 76.155835 Z m 10.986385,0.402166 c 0.02878,-0.04657 0.09043,-0.08467 0.136994,-0.08467 0.04657,0 0.06112,0.0381 0.03234,0.08467 -0.02878,0.04657 -0.09043,0.08467 -0.136994,0.08467 -0.04657,0 -0.06112,-0.0381 -0.03234,-0.08467 z m 0.335492,-0.07652 c 0.0198,-0.131473 0.0915,-0.139317 0.913342,-0.09992 0.0825,0.004 0.147592,0.07277 0.14687,0.15527 -0.0011,0.126623 -0.01323,0.129701 -0.08337,0.02117 -0.04514,-0.06985 -0.08266,-0.0878 -0.08337,-0.03988 -6.77e-4,0.04805 -0.205883,0.08967 -0.45756,0.09282 -0.37179,0.0046 -0.452497,-0.01932 -0.435911,-0.129447 z m 1.674807,0.05535 c 0.04433,-0.135027 0.564869,-0.189199 0.68299,-0.07108 0.04918,0.04918 0.06132,0.117529 0.02696,0.151882 -0.03435,0.03435 -0.09849,0.0064 -0.142522,-0.06209 -0.0668,-0.103919 -0.09239,-0.105432 -0.154481,-0.0091 -0.06283,0.09744 -0.08261,0.09744 -0.127,0 -0.04072,-0.08938 -0.06372,-0.09154 -0.101971,-0.0096 -0.02716,0.05821 -0.08749,0.105833 -0.134056,0.105833 -0.04657,0 -0.06903,-0.04763 -0.04992,-0.105833 z m 23.051038,0.02117 c -0.16326,-0.07015 -0.16268,-0.07298 0.0162,-0.07871 0.10202,-0.0033 0.20905,0.03215 0.23783,0.07871 0.0619,0.100142 -0.021,0.100142 -0.254,0 z m 0.42333,0 c 0.0288,-0.04657 0.0882,-0.08467 0.132,-0.08467 0.0438,0 0.0797,0.0381 0.0797,0.08467 0,0.04657 -0.0594,0.08467 -0.132,0.08467 -0.0726,0 -0.10845,-0.0381 -0.0797,-0.08467 z m 0.42889,-0.009 c 0.0565,-0.09146 0.37547,-0.101807 0.37538,-0.01217 -3e-5,0.03493 -0.095,0.06898 -0.2111,0.07568 -0.11608,0.0067 -0.19,-0.02188 -0.16428,-0.0635 z m 0.58711,0.009 c -0.16326,-0.07015 -0.16268,-0.07298 0.0162,-0.07871 0.10203,-0.0033 0.20905,0.03215 0.23783,0.07871 0.0619,0.100142 -0.021,0.100142 -0.254,0 z m 29.12533,-4.23e-4 c -0.14782,-0.06387 -0.14053,-0.07159 0.0574,-0.06075 0.12471,0.0068 0.20818,0.04243 0.18551,0.07912 -0.0227,0.03669 -0.0485,0.06403 -0.0574,0.06076 -0.009,-0.0033 -0.0924,-0.03888 -0.18551,-0.07912 z m 0.635,-0.0046 c 0,-0.04932 0.0381,-0.06612 0.0847,-0.03734 0.0466,0.02878 0.0847,0.06913 0.0847,0.08966 0,0.02053 -0.0381,0.03734 -0.0847,0.03734 -0.0466,0 -0.0847,-0.04035 -0.0847,-0.08966 z m 0.635,0.005 c -0.0288,-0.04657 -0.012,-0.08467 0.0373,-0.08467 0.0493,0 0.0897,0.0381 0.0897,0.08467 0,0.04657 -0.0168,0.08467 -0.0373,0.08467 -0.0205,0 -0.0609,-0.0381 -0.0897,-0.08467 z m 0.29634,0 c 0,-0.04657 0.0381,-0.08467 0.0847,-0.08467 0.0466,0 0.0847,0.0381 0.0847,0.08467 0,0.04657 -0.0381,0.08467 -0.0847,0.08467 -0.0466,0 -0.0847,-0.0381 -0.0847,-0.08467 z m 0.254,0 c 0,-0.04657 0.0572,-0.08467 0.127,-0.08467 0.0698,0 0.127,0.0381 0.127,0.08467 0,0.04657 -0.0572,0.08467 -0.127,0.08467 -0.0699,0 -0.127,-0.0381 -0.127,-0.08467 z m 0.93133,-0.0053 c 0,-0.04367 0.0762,-0.07941 0.16933,-0.07941 0.0931,0 0.16934,0.02999 0.16934,0.06665 0,0.03666 -0.0762,0.07239 -0.16934,0.0794 -0.0931,0.007 -0.16933,-0.02298 -0.16933,-0.06665 z m 0.508,0.0053 c 0,-0.04657 0.0381,-0.08467 0.0847,-0.08467 0.0466,0 0.0847,0.0381 0.0847,0.08467 0,0.04657 -0.0381,0.08467 -0.0847,0.08467 -0.0466,0 -0.0847,-0.0381 -0.0847,-0.08467 z m 0.508,0 c 0,-0.04657 0.0381,-0.08467 0.0847,-0.08467 0.0466,0 0.0847,0.0381 0.0847,0.08467 0,0.04657 -0.0381,0.08467 -0.0847,0.08467 -0.0466,0 -0.0847,-0.0381 -0.0847,-0.08467 z m 0.508,0 c 0,-0.04657 0.0381,-0.08467 0.0847,-0.08467 0.0466,0 0.0847,0.0381 0.0847,0.08467 0,0.04657 -0.0381,0.08467 -0.0847,0.08467 -0.0466,0 -0.0847,-0.0381 -0.0847,-0.08467 z m 0.33867,-0.0053 c 0,-0.04367 0.0762,-0.07941 0.16933,-0.07941 0.0931,0 0.16933,0.02999 0.16933,0.06665 0,0.03666 -0.0762,0.07239 -0.16933,0.0794 -0.0931,0.007 -0.16933,-0.02298 -0.16933,-0.06665 z m 0.508,0.0053 c 0,-0.04657 0.0381,-0.08467 0.0847,-0.08467 0.0466,0 0.0847,0.0381 0.0847,0.08467 0,0.04657 -0.0381,0.08467 -0.0847,0.08467 -0.0466,0 -0.0847,-0.0381 -0.0847,-0.08467 z m 0.55033,0 c -0.0288,-0.04657 -0.012,-0.08467 0.0373,-0.08467 0.0493,0 0.0897,0.0381 0.0897,0.08467 0,0.04657 -0.0168,0.08467 -0.0373,0.08467 -0.0205,0 -0.0609,-0.0381 -0.0897,-0.08467 z m 0.762,0 c -0.0288,-0.04657 -0.012,-0.08467 0.0373,-0.08467 0.0493,0 0.0897,0.0381 0.0897,0.08467 0,0.04657 -0.0168,0.08467 -0.0373,0.08467 -0.0205,0 -0.0609,-0.0381 -0.0897,-0.08467 z m 0.46567,0 c 0,-0.04657 0.0381,-0.08467 0.0847,-0.08467 0.0466,0 0.0847,0.0381 0.0847,0.08467 0,0.04657 -0.0381,0.08467 -0.0847,0.08467 -0.0466,0 -0.0847,-0.0381 -0.0847,-0.08467 z m 0.33866,-0.0053 c 0,-0.04367 0.0762,-0.07941 0.16934,-0.07941 0.0931,0 0.16933,0.02999 0.16933,0.06665 0,0.03666 -0.0762,0.07239 -0.16933,0.0794 -0.0931,0.007 -0.16934,-0.02298 -0.16934,-0.06665 z m 1.01601,2.54e-4 c 0,-0.04932 0.0381,-0.06612 0.0847,-0.03734 0.0466,0.02878 0.0847,0.06913 0.0847,0.08966 0,0.02053 -0.0381,0.03734 -0.0847,0.03734 -0.0466,0 -0.0847,-0.04035 -0.0847,-0.08966 z m 0.42333,0.005 c 0,-0.04657 0.0403,-0.08467 0.0897,-0.08467 0.0493,0 0.0661,0.0381 0.0373,0.08467 -0.0288,0.04657 -0.0691,0.08467 -0.0897,0.08467 -0.0205,0 -0.0373,-0.0381 -0.0373,-0.08467 z m 0.59267,-0.0053 c 0,-0.04367 0.0762,-0.0794 0.16933,-0.0794 0.0931,0 0.16933,0.02999 0.16933,0.06665 0,0.03666 -0.0762,0.07239 -0.16933,0.0794 -0.0931,0.007 -0.16933,-0.02298 -0.16933,-0.06665 z m 1.016,0.0053 c 0,-0.04657 0.0381,-0.08467 0.0847,-0.08467 0.0466,0 0.0847,0.0381 0.0847,0.08467 0,0.04657 -0.0381,0.08467 -0.0847,0.08467 -0.0466,0 -0.0847,-0.0381 -0.0847,-0.08467 z m 0.635,0 c 0.0288,-0.04657 0.0691,-0.08467 0.0897,-0.08467 0.0205,0 0.0373,0.0381 0.0373,0.08467 0,0.04657 -0.0404,0.08467 -0.0897,0.08467 -0.0493,0 -0.0661,-0.0381 -0.0373,-0.08467 z m 0.762,0 c -0.0288,-0.04657 -0.012,-0.08467 0.0373,-0.08467 0.0493,0 0.0897,0.0381 0.0897,0.08467 0,0.04657 -0.0168,0.08467 -0.0373,0.08467 -0.0205,0 -0.0609,-0.0381 -0.0897,-0.08467 z m 0.508,0 c -0.0288,-0.04657 -0.012,-0.08467 0.0373,-0.08467 0.0493,0 0.0897,0.0381 0.0897,0.08467 0,0.04657 -0.0168,0.08467 -0.0373,0.08467 -0.0205,0 -0.0609,-0.0381 -0.0897,-0.08467 z m 0.97366,0 c 0,-0.04657 0.0572,-0.08467 0.127,-0.08467 0.0699,0 0.127,0.0381 0.127,0.08467 0,0.04657 -0.0572,0.08467 -0.127,0.08467 -0.0699,0 -0.127,-0.0381 -0.127,-0.08467 z m 0.508,0 c 0,-0.04657 0.0381,-0.08467 0.0847,-0.08467 0.0466,0 0.0847,0.0381 0.0847,0.08467 0,0.04657 -0.0381,0.08467 -0.0847,0.08467 -0.0466,0 -0.0847,-0.0381 -0.0847,-0.08467 z m 0.84667,0 c 0,-0.04657 0.0381,-0.08467 0.0847,-0.08467 0.0466,0 0.0847,0.0381 0.0847,0.08467 0,0.04657 -0.0381,0.08467 -0.0847,0.08467 -0.0466,0 -0.0847,-0.0381 -0.0847,-0.08467 z m 0.54996,-5.92e-4 c -0.029,-0.0469 0.009,-0.108753 0.0833,-0.13746 0.16211,-0.06221 0.25246,0.0063 0.17453,0.132425 -0.0703,0.113756 -0.18922,0.116078 -0.25785,0.005 z m 1.39737,5.92e-4 c 0,-0.04657 0.0381,-0.08467 0.0847,-0.08467 0.0466,0 0.0847,0.0381 0.0847,0.08467 0,0.04657 -0.0381,0.08467 -0.0847,0.08467 -0.0466,0 -0.0847,-0.0381 -0.0847,-0.08467 z m 0.33867,0.01411 c 0,-0.119296 0.0954,-0.174024 0.21995,-0.12622 0.17669,0.0678 0.14351,0.196775 -0.0506,0.196775 -0.0931,0 -0.16933,-0.03175 -0.16933,-0.07055 z m 0.67733,-0.01411 c 0,-0.04657 0.0381,-0.08467 0.0847,-0.08467 0.0466,0 0.0847,0.0381 0.0847,0.08467 0,0.04657 -0.0381,0.08467 -0.0847,0.08467 -0.0466,0 -0.0847,-0.0381 -0.0847,-0.08467 z m 0.33867,0.05221 c 0,-0.01785 0.0762,-0.05239 0.16933,-0.07674 0.0931,-0.02435 0.16934,-0.0097 0.16934,0.03246 0,0.04221 -0.0762,0.07674 -0.16934,0.07674 -0.0931,0 -0.16933,-0.01461 -0.16933,-0.03246 z m 0.80433,-0.05221 c -0.0288,-0.04657 -0.012,-0.08467 0.0373,-0.08467 0.0493,0 0.0897,0.0381 0.0897,0.08467 0,0.04657 -0.0168,0.08467 -0.0373,0.08467 -0.0205,0 -0.0609,-0.0381 -0.0897,-0.08467 z m 0.29634,0.005 c 0,-0.04382 0.0347,-0.101092 0.077,-0.127276 0.1094,-0.06762 0.35471,0.04017 0.29848,0.13115 -0.0623,0.100819 -0.37551,0.09759 -0.37551,-0.0039 z m 0.52916,-0.02616 c 0.0194,-0.05821 0.0861,-0.105833 0.14817,-0.105833 0.0621,0 0.12876,0.04762 0.14817,0.105833 0.021,0.06296 -0.039,0.105833 -0.14817,0.105833 -0.10913,0 -0.16916,-0.04288 -0.14817,-0.105833 z m 0.48684,0.02117 c 0,-0.04657 0.0594,-0.08467 0.13199,-0.08467 0.0726,0 0.10845,0.0381 0.0797,0.08467 -0.0288,0.04657 -0.0882,0.08467 -0.13199,0.08467 -0.0438,0 -0.0797,-0.0381 -0.0797,-0.08467 z m 0.42333,0 c 0,-0.04657 0.0381,-0.08467 0.0847,-0.08467 0.0466,0 0.0847,0.0381 0.0847,0.08467 0,0.04657 -0.0381,0.08467 -0.0847,0.08467 -0.0466,0 -0.0847,-0.0381 -0.0847,-0.08467 z m 0.36002,-0.211666 c 9.3e-4,-0.186267 0.0183,-0.252498 0.0385,-0.14718 0.0203,0.105318 0.0195,0.257718 -0.002,0.338667 -0.0212,0.08095 -0.0378,-0.0052 -0.0368,-0.191487 z m 0.003,-2.370667 c 8.4e-4,-0.232833 0.0171,-0.318034 0.0365,-0.189336 0.0195,0.128698 0.0189,0.319198 -0.001,0.423333 -0.0201,0.104135 -0.036,-0.0012 -0.0354,-0.233997 z m -0.005,-0.973667 c 0,-0.162983 0.0174,-0.229658 0.0387,-0.148167 0.0213,0.08149 0.0213,0.214842 0,0.296334 -0.0213,0.08149 -0.0387,0.01482 -0.0387,-0.148167 z M 84.814381,77.781496 c 0.0698,-0.285475 0.623874,-1.03903 0.767825,-1.044268 0.15196,-0.0055 0.221832,0.469629 0.116149,0.789854 -0.07526,0.228045 -0.149577,0.295316 -0.366497,0.331756 -0.14965,0.02514 -0.340702,0.07282 -0.424559,0.105956 -0.132426,0.05232 -0.14464,0.02823 -0.09292,-0.183298 z M 65.441102,76.500788 c -0.231578,-0.265485 -0.320336,-0.51144 -0.320336,-0.887668 0,-0.63246 0.371857,-0.76646 0.826039,-0.297666 0.35178,0.363099 0.395092,0.813358 0.10767,1.119305 -0.235815,0.251013 -0.433457,0.272289 -0.613373,0.06603 z m 98.069018,-2.356556 c 0.004,-0.09863 0.0241,-0.118694 0.0512,-0.05115 0.0245,0.06112 0.0215,0.134144 -0.007,0.162278 -0.0281,0.02813 -0.0481,-0.02187 -0.0445,-0.111125 z M 88.468544,73.091836 c -0.373797,-0.202266 -0.527808,-0.416322 -0.69195,-0.961727 -0.106283,-0.353149 -0.105719,-0.408178 0.0046,-0.450518 0.06913,-0.02653 0.221937,-0.0044 0.339575,0.04922 0.370849,0.168969 1.374507,0.977521 1.378022,1.11014 0.0103,0.388623 -0.532973,0.521973 -1.030263,0.252882 z m -5.066356,-0.528049 c -0.161518,-0.151341 -0.358172,-0.376631 -0.43701,-0.500642 -0.08173,-0.128566 -0.256312,-0.250289 -0.406183,-0.283206 -0.195913,-0.04303 -0.249527,-0.09243 -0.210551,-0.194 0.02876,-0.07495 0.07496,-0.430269 0.102674,-0.789601 0.02771,-0.359331 0.08043,-0.70195 0.117157,-0.761375 0.103544,-0.16754 0.855351,0.09192 0.977756,0.337433 0.145826,0.2925 0.385306,0.421441 0.836702,0.450502 l 0.409925,0.02639 0.125408,0.452326 c 0.198266,0.715108 0.08488,1.013362 -0.493299,1.297647 -0.256117,0.125929 -0.524896,0.231376 -0.597288,0.234328 -0.07239,0.003 -0.263773,-0.118459 -0.425291,-0.269802 z m 2.038579,-2.075133 c 0,-0.03536 0.07295,-0.109859 0.162113,-0.165542 0.127517,-0.07964 0.181566,-0.0778 0.253266,0.0086 0.05013,0.06041 0.06608,0.134901 0.03544,0.165542 -0.0773,0.0773 -0.450821,0.07018 -0.450821,-0.0086 z M 136.60964,54.761542 c -0.0578,-0.150474 0.10924,-0.379922 0.27649,-0.379922 0.13888,0 0.14899,0.120016 0.029,0.344232 -0.10499,0.196193 -0.23793,0.211723 -0.30548,0.03569 z M 35.614432,52.973659 c -0.232833,-0.07013 -0.585258,-0.206425 -0.783167,-0.302875 l -0.359833,-0.175362 v -6.883571 c 0,-4.227762 0.03085,-6.902639 0.07996,-6.932991 0.209353,-0.129388 1.528538,-0.104067 2.255632,0.04329 0.735874,0.14914 0.947101,0.157351 3.845072,0.149441 0.20955,-5.93e-4 1.026141,0.0274 1.814647,0.06216 1.306125,0.05757 1.479339,0.0838 1.947333,0.294889 0.282528,0.127432 0.681256,0.259537 0.886063,0.293565 0.204807,0.03403 0.498859,0.114718 0.653448,0.17931 0.154588,0.06459 0.520419,0.119098 0.812956,0.121126 0.819641,0.0057 1.1793,0.106841 1.895736,0.533203 0.363548,0.216353 0.795956,0.414856 0.960907,0.441118 0.614269,0.0978 0.673627,0.128978 0.852972,0.44808 0.227821,0.405352 0.558385,0.605911 0.998672,0.605911 0.438513,0 0.861266,0.330364 0.861266,0.673043 0,0.129062 0.02444,0.412968 0.05431,0.630905 0.07509,0.547851 0.260963,0.638276 0.796448,0.387468 0.514389,-0.240926 0.771338,-0.185673 0.909176,0.195508 0.0565,0.156254 0.102731,0.40434 0.102731,0.551302 0,0.449196 0.267138,0.55305 1.560302,0.606586 l 1.112642,0.04606 1.04405,0.506904 c 1.030461,0.500306 1.363006,0.761439 1.363006,1.070307 0,0.207219 -0.143547,0.203205 -0.209906,-0.0059 -0.02958,-0.09321 -0.365711,-0.333414 -0.78003,-0.557433 l -0.728048,-0.393648 -0.178175,0.212398 c -0.231019,0.275394 -0.8933,0.536175 -1.528395,0.601825 -0.522925,0.05405 -0.967565,0.303198 -1.150224,0.6445 -0.146817,0.27433 -0.01945,0.358239 0.449386,0.296046 0.399178,-0.05295 0.442106,-0.0397 0.708818,0.218807 0.397458,0.385231 0.391403,0.732533 -0.01821,1.044964 -0.494539,0.377202 -0.798544,0.862084 -0.798544,1.27366 0,0.514249 -0.133308,0.596748 -0.752083,0.465435 -0.272675,-0.05786 -0.577603,-0.07924 -0.677617,-0.04749 -0.220872,0.0701 -0.409912,0.496423 -0.482212,1.087481 -0.02985,0.244028 -0.147214,0.585094 -0.263825,0.766689 -0.201928,0.314457 -0.223573,0.324949 -0.559489,0.271234 -0.192188,-0.03073 -0.475343,-0.151912 -0.629232,-0.26929 -0.343717,-0.262166 -0.883703,-1.291306 -0.94847,-1.807659 -0.03884,-0.309647 -0.09939,-0.412913 -0.335093,-0.5715 -0.443105,-0.298134 -0.741834,-0.257 -1.101666,0.151692 -0.715603,0.812772 -0.842063,0.924744 -1.044391,0.924744 -0.266029,0 -0.454563,-0.212554 -0.620498,-0.699548 -0.19628,-0.576047 -0.43317,-0.781204 -1.145712,-0.992232 -0.344325,-0.101977 -0.759396,-0.228777 -0.922379,-0.281779 -0.162984,-0.053 -0.720062,-0.09815 -1.237952,-0.100341 -1.064966,-0.0045 -1.136058,-0.03583 -1.349546,-0.59484 -0.105176,-0.275398 -0.206481,-0.392203 -0.39809,-0.458998 -0.141358,-0.04928 -0.288035,-0.0896 -0.325949,-0.0896 -0.03791,0 -0.318358,0.233323 -0.623208,0.518495 -0.470978,0.440577 -0.611963,0.524998 -0.938168,0.561766 -0.46212,0.05209 -0.618848,0.28439 -0.691385,1.024766 -0.08795,0.897674 -0.247365,0.963518 -0.966305,0.399117 -0.409865,-0.321763 -0.506988,-0.455706 -0.690627,-0.952448 -0.133117,-0.360076 -0.231765,-0.843257 -0.261626,-1.281436 -0.04972,-0.72955 -0.211087,-1.099271 -0.561693,-1.28691 -0.131912,-0.0706 -0.198839,-0.03118 -0.395621,0.233006 -0.130267,0.174887 -0.455037,0.574755 -0.721709,0.888595 -0.753611,0.886902 -0.891086,1.278465 -0.617122,1.757716 0.06655,0.116417 0.12235,0.311213 0.124,0.43288 0.0017,0.121668 0.198049,0.571722 0.436442,1.000121 0.389641,0.700193 0.476672,0.91702 0.641479,1.598156 0.0322,0.133073 -0.0146,0.260542 -0.147649,0.402167 -0.229065,0.243828 -0.578645,0.26365 -1.223605,0.06938 z m 83.229638,-1.862733 c -0.14436,-0.725511 -0.34356,-1.477187 -0.49069,-1.85164 -0.0915,-0.232833 -0.23441,-0.697756 -0.31761,-1.033164 -0.0832,-0.335406 -0.21211,-0.731785 -0.28647,-0.88084 -0.0744,-0.149057 -0.1352,-0.288874 -0.1352,-0.310704 0,-0.109461 0.28534,0.218538 0.42051,0.483377 0.0848,0.166099 0.23091,0.371427 0.32475,0.456285 0.0938,0.08486 0.22025,0.275359 0.28093,0.423333 0.0607,0.147976 0.38251,0.688147 0.71519,1.20038 0.33267,0.512233 0.66873,1.055636 0.7468,1.20756 0.14184,0.276039 0.14177,0.276293 -0.0936,0.371108 -0.12956,0.05218 -0.43371,0.11342 -0.6759,0.136079 -0.42966,0.0402 -0.44152,0.0353 -0.48869,-0.201774 z m -1.65995,-4.793807 c -0.0535,-0.104775 -0.23124,-0.388506 -0.39497,-0.630514 -0.26158,-0.386652 -0.30106,-0.515 -0.32551,-1.058333 -0.0198,-0.439021 -0.007,-0.544665 0.0433,-0.364319 0.0391,0.1397 0.0756,0.417609 0.0811,0.617575 0.008,0.282397 0.0951,0.487814 0.39102,0.92001 0.35005,0.511232 0.44433,0.706081 0.34165,0.706081 -0.0217,0 -0.0831,-0.08572 -0.13663,-0.1905 z m 21.78081,-0.144585 c 0.0215,-0.215692 0.096,-0.31602 0.33903,-0.456444 0.46566,-0.269041 0.48012,-0.113744 0.0312,0.335169 l -0.39774,0.397733 z m -22.60119,-2.458915 c 0,-0.162983 0.0174,-0.229658 0.0387,-0.148166 0.0213,0.08149 0.0213,0.214841 0,0.296333 -0.0213,0.08149 -0.0387,0.01482 -0.0387,-0.148167 z m -0.17716,-0.707839 c -0.0511,-0.203046 -0.1509,-0.417261 -0.22172,-0.476035 -0.0708,-0.05877 -0.12876,-0.156186 -0.12876,-0.216474 0,-0.06029 -0.0795,-0.293747 -0.17667,-0.518799 -0.0972,-0.225052 -0.20652,-0.580636 -0.24298,-0.790186 -0.0365,-0.20955 -0.0959,-0.4572 -0.13212,-0.550334 -0.0481,-0.123725 -0.04,-0.145728 0.0301,-0.08169 0.0527,0.0482 0.13372,0.276802 0.17999,0.508 0.12036,0.601459 0.44361,1.434058 0.66227,1.705811 0.10813,0.134374 0.18746,0.350605 0.18746,0.510926 0,0.376402 -0.0466,0.349438 -0.15752,-0.09122 z m -1.32617,-3.277875 c -0.0816,-0.257119 8.5e-4,-0.283502 0.11346,-0.03631 0.0531,0.116614 0.0619,0.212025 0.0194,0.212025 -0.0424,0 -0.10224,-0.07907 -0.13291,-0.175714 z m -0.11161,-0.501619 c 0,-0.116417 0.0192,-0.164042 0.0427,-0.105834 0.0235,0.05821 0.0235,0.153459 0,0.211667 -0.0235,0.05821 -0.0427,0.01058 -0.0427,-0.105833 z m -0.14507,-0.54563 c -0.0319,-0.169913 -0.0389,-0.327983 -0.0156,-0.351266 0.0233,-0.02328 0.0684,0.09669 0.10029,0.2666 0.0319,0.169912 0.0389,0.327982 0.0156,0.351266 -0.0233,0.02328 -0.0684,-0.09669 -0.10029,-0.2666 z m 36.70771,-0.04714 c -0.26748,-0.136387 -0.29715,-0.187041 -0.30464,-0.520002 -0.009,-0.399065 0.29304,-1.118172 0.50357,-1.19896 0.0672,-0.02577 0.18676,-0.241519 0.26579,-0.479436 0.0824,-0.248114 0.22841,-0.488091 0.34238,-0.562765 0.1796,-0.117681 0.22691,-0.116797 0.49243,0.0092 0.16156,0.07666 0.35489,0.206966 0.42965,0.289563 0.12597,0.139205 0.11667,0.174331 -0.12733,0.480839 -0.23003,0.288948 -0.25617,0.37339 -0.20721,0.669331 0.0932,0.563281 0.071,0.624933 -0.38153,1.061118 -0.47322,0.456106 -0.56601,0.479103 -1.01311,0.251113 z m -48.02911,-0.761898 c -0.1184,-0.09313 -0.29693,-0.169333 -0.39674,-0.169333 -0.18737,0 -0.42682,-0.41768 -0.42682,-0.744523 0,-0.343416 0.61978,-0.685447 1.04753,-0.578088 0.22642,0.05683 0.29587,0.278274 0.35505,1.132111 0.0354,0.510264 0.0295,0.529166 -0.16354,0.529166 -0.11011,0 -0.29708,-0.0762 -0.41548,-0.169333 z m 10.91323,-0.97694 c -0.029,-0.07567 -0.0489,-0.220185 -0.0441,-0.321152 0.005,-0.116051 0.0342,-0.07479 0.0782,0.112184 0.074,0.314649 0.0538,0.438046 -0.0341,0.208968 z m -0.24125,-0.71223 c -0.21807,-0.25469 -0.29378,-0.441494 -0.3579,-0.883031 -0.033,-0.227259 -0.10409,-0.509984 -0.15799,-0.628275 -0.0765,-0.167916 -0.0745,-0.222913 0.009,-0.250811 0.0735,-0.02449 0.0902,-0.126539 0.0531,-0.324223 -0.0323,-0.171964 -0.0199,-0.28849 0.0306,-0.28849 0.0466,0 0.11039,0.142875 0.14184,0.3175 0.0314,0.174625 0.12853,0.456946 0.21576,0.62738 0.12267,0.239707 0.14755,0.416696 0.10989,0.781582 -0.0333,0.322365 -0.0144,0.513059 0.0597,0.602333 0.0596,0.07185 0.0914,0.147618 0.0707,0.168383 -0.0208,0.02076 -0.0994,-0.03429 -0.17484,-0.122348 z M 34.472728,30.272785 c 8.47e-4,-2.696103 0.02976,-4.083457 0.08337,-4.0005 0.04931,0.07631 0.08259,0.08675 0.08337,0.02616 7.13e-4,-0.05546 -0.0368,-0.124384 -0.08337,-0.153164 -0.127883,-0.07904 -0.112065,-3.029069 0.01693,-3.158067 0.07902,-0.07902 0.07902,-0.124178 0,-0.2032 -0.154582,-0.154582 -0.144204,-5.808914 0.01109,-6.039061 0.07994,-0.118482 0.100046,-0.351506 0.06919,-0.802006 -0.03138,-0.458141 -0.05792,-0.564256 -0.09529,-0.381 -0.02849,0.1397 -0.05424,-0.269875 -0.05723,-0.910167 l -0.0054,-1.164166 h 0.494426 c 0.470217,0 0.496993,0.0114 0.546863,0.232833 0.234054,1.039264 0.279255,1.089702 0.864138,0.964267 0.226472,-0.04857 0.498515,-0.06562 0.604542,-0.0379 0.254841,0.06664 0.347075,-0.09814 0.229412,-0.409868 -0.07468,-0.197851 -0.06972,-0.263943 0.02419,-0.321978 0.06499,-0.04016 0.166258,-0.05457 0.225051,-0.032 0.145553,0.05585 0.458793,-0.12117 0.458793,-0.259282 0,-0.194272 1.626447,-0.235187 6.79328,-0.170892 4.817884,0.05995 4.900282,0.06382 4.99148,0.234224 0.193,0.360623 0.576574,1.871484 0.576574,2.271067 0,0.416447 -0.140482,0.801251 -0.358604,0.982276 -0.08694,0.07215 -0.249469,0.06489 -0.652644,-0.02916 -0.526752,-0.122883 -1.989993,-0.36126 -2.685472,-0.43749 -0.271639,-0.02977 -0.436547,0.01061 -0.719667,0.176249 -0.202004,0.118181 -0.647079,0.328596 -0.989056,0.46759 -0.730393,0.296862 -1.110794,0.547623 -1.87864,1.238402 -0.635261,0.571502 -1.376523,1.124356 -1.643748,1.225955 -0.09798,0.03725 -0.47638,0.338624 -0.840902,0.66972 -0.557424,0.506309 -0.710064,0.601992 -0.96034,0.601992 -0.209905,0 -0.3828,0.07483 -0.586863,0.254 -0.210002,0.184384 -0.375502,0.25413 -0.603844,0.254472 -0.580159,8.71e-4 -0.925252,0.146667 -1.025099,0.433089 -0.0604,0.173261 -0.06295,0.312519 -0.0076,0.415894 0.04575,0.08548 0.08317,0.234118 0.08317,0.330312 0,0.160406 0.05004,0.1749 0.603807,0.1749 0.602193,0 0.60482,0.001 0.982513,0.378705 0.347316,0.347317 1.10779,0.850075 1.178647,0.779217 0.01644,-0.01643 -0.155135,-0.130581 -0.381267,-0.253657 -0.350622,-0.190832 -0.8597,-0.740856 -0.8597,-0.928846 0,-0.0318 0.130233,-0.112228 0.289406,-0.178735 0.255409,-0.106717 0.368462,-0.103765 0.962368,0.02512 0.414087,0.08986 0.832013,0.247832 1.086427,0.410652 0.673972,0.431326 1.201719,0.628775 1.398757,0.523323 0.106249,-0.05686 0.205646,-0.06081 0.268954,-0.01069 0.05523,0.04373 0.24743,0.106022 0.427108,0.138435 0.308008,0.05556 0.347863,0.03683 0.697075,-0.327627 0.203715,-0.212608 0.406024,-0.38656 0.449576,-0.38656 0.04355,0 0.157751,0.127122 0.253776,0.282493 0.193554,0.313177 1.053433,1.156841 1.179075,1.156841 0.158314,0 0.789035,0.730541 1.084298,1.255902 0.251149,0.446869 0.291846,0.587027 0.244198,0.841009 -0.06867,0.36603 -0.56813,1.381736 -0.75621,1.537829 -0.07378,0.06123 -0.134141,0.159147 -0.134141,0.217593 0,0.05845 -0.05653,0.153179 -0.125615,0.210517 -0.103786,0.08613 -0.254596,0.01178 -0.867833,-0.42785 -0.528605,-0.378962 -0.937157,-0.595342 -1.419552,-0.751837 -0.372533,-0.120853 -0.721064,-0.247347 -0.774513,-0.281097 -0.05345,-0.03375 -0.392933,-0.102499 -0.75441,-0.152776 -0.599504,-0.08338 -0.67649,-0.07711 -0.876488,0.07137 -0.12059,0.08953 -0.275645,0.262153 -0.344565,0.383599 -0.11801,0.207949 -0.111243,0.235494 0.116147,0.472839 0.223214,0.232985 0.327925,0.528552 0.448891,1.267082 0.04282,0.261407 4.91e-4,0.330252 -0.535285,0.870621 -0.319977,0.322723 -0.734177,0.688143 -0.920444,0.812047 -0.915464,0.608958 -1.159276,1.042327 -0.80098,1.423716 0.293503,0.312419 0.305629,0.731997 0.03653,1.263866 -0.310912,0.614508 -0.393983,0.679095 -1.138846,0.88545 -0.542215,0.150215 -0.87404,0.175448 -2.307167,0.175448 h -1.673868 z m 6.264037,-6.065775 c 0,-0.0183 -0.05913,-0.05597 -0.131397,-0.0837 -0.07535,-0.02891 -0.109332,-0.01472 -0.07967,0.03327 0.04972,0.08045 0.211067,0.118994 0.211067,0.05042 z m -6.124593,-9.555226 c -0.02349,-0.05821 -0.0427,-0.01058 -0.0427,0.105834 0,0.116416 0.01922,0.164041 0.0427,0.105833 0.02349,-0.05821 0.02349,-0.153458 0,-0.211667 z M 156.26444,31.761416 c -0.2794,-0.143032 -0.51507,-0.265738 -0.5237,-0.272681 -0.009,-0.0069 0.0198,-0.297659 0.0631,-0.646036 0.0588,-0.472485 0.13922,-0.719457 0.31648,-0.97208 0.1307,-0.186267 0.32785,-0.594276 0.43811,-0.906686 0.19805,-0.561098 0.19861,-0.572188 0.0462,-0.910166 -0.12268,-0.272071 -0.19934,-0.342245 -0.37426,-0.342621 -0.82796,-0.0018 -1.18188,-0.39022 -1.20699,-1.324684 -0.0195,-0.725304 0.17944,-1.133108 0.77382,-1.586391 0.38566,-0.294105 0.93286,-1.13227 0.93286,-1.428888 0,-0.0708 -0.10651,-0.147034 -0.2438,-0.17449 -0.31413,-0.06283 -0.5182,-0.269887 -0.5182,-0.52581 0,-0.221716 -0.21465,-0.377185 -0.5236,-0.379228 -0.38214,-0.0025 -0.4362,-0.103951 -0.28804,-0.540359 0.16339,-0.481268 0.10031,-0.610445 -0.53464,-1.094661 -0.33413,-0.254812 -0.45169,-0.412636 -0.56665,-0.760764 -0.19994,-0.605446 -0.32881,-0.779476 -0.80637,-1.08892 -0.39266,-0.254431 -0.41219,-0.284921 -0.39214,-0.612104 l 0.0211,-0.344335 -0.66201,-0.266202 c -0.3641,-0.146411 -0.76977,-0.369448 -0.90149,-0.495638 l -0.23947,-0.229435 -0.34337,0.197617 -0.34337,0.197618 -0.66015,-0.33826 c -0.55219,-0.282946 -0.67335,-0.383116 -0.74091,-0.612559 -0.0602,-0.204614 -0.1531,-0.298171 -0.36548,-0.368267 -0.15815,-0.05219 -0.32557,-0.183599 -0.37659,-0.295574 -0.0505,-0.110883 -0.1718,-0.225895 -0.26951,-0.255581 -0.0977,-0.02969 -0.23893,-0.107635 -0.31381,-0.173219 -0.0846,-0.07413 -0.50067,-0.15123 -1.09953,-0.203782 -1.11865,-0.09817 -1.56395,-0.201201 -1.63162,-0.377531 -0.0794,-0.20681 0.0104,-0.321567 0.51238,-0.655248 l 0.47766,-0.3175 h 3.88345 c 3.37387,0 3.88986,-0.01666 3.9322,-0.127 0.064,-0.166845 0.59191,-0.166845 0.99123,0 0.39207,0.16382 1.15769,0.165322 1.37271,0.0027 0.21009,-0.158908 0.35687,-0.160932 0.51076,-0.007 0.15683,0.156827 0.069,0.800803 -0.11909,0.872971 -0.30971,0.118846 -0.42129,0.331539 -0.37754,0.719667 0.0262,0.232305 0.006,0.401933 -0.0517,0.437676 -0.0519,0.0321 -0.0944,0.126389 -0.0944,0.209531 0,0.202155 -1.03986,1.647314 -1.33364,1.853447 -0.12798,0.0898 -0.37174,0.188604 -0.54168,0.21957 -0.16995,0.03097 -0.35559,0.112445 -0.41254,0.181063 -0.0883,0.106365 -0.0536,0.12476 0.23513,0.12476 0.19774,0 0.38252,-0.05285 0.44407,-0.127 0.058,-0.06985 0.14836,-0.127791 0.20086,-0.128756 0.0973,-0.0018 0.2971,-0.218373 0.89668,-0.971911 0.18526,-0.232834 0.39423,-0.489144 0.46439,-0.56958 0.13651,-0.156517 0.3854,-0.117595 0.3854,0.06027 0,0.05917 0.0579,0.155589 0.12856,0.214272 0.22973,0.190661 0.36256,0.619836 0.41077,1.32723 0.0472,0.692402 0.0469,0.693878 -0.2102,0.910167 -0.14159,0.119152 -0.32849,0.21664 -0.4153,0.21664 -0.18681,0 -0.21331,0.03723 -0.29398,0.412986 l -0.0614,0.285986 0.21555,-0.158986 c 0.11856,-0.08744 0.26535,-0.250127 0.32619,-0.361522 0.0608,-0.111394 0.25431,-0.293241 0.42993,-0.404103 l 0.3193,-0.201568 -0.0548,-0.950563 c -0.0526,-0.912676 -0.22769,-1.571469 -0.45497,-1.711938 -0.0934,-0.05775 -0.0906,-1.221707 0.003,-1.355292 0.0327,-0.04657 0.086,-0.303742 0.11839,-0.5715 0.0409,-0.33791 0.0959,-0.486834 0.17978,-0.486834 0.0665,0 0.1209,-0.0381 0.1209,-0.08467 0,-0.05498 1.143,-0.08467 3.25967,-0.08467 h 3.25967 v 5.416634 5.416635 l -1.95226,-0.0042 c -1.42139,-0.0031 -1.98625,0.02396 -2.07722,0.09946 -0.0987,0.08193 -0.16679,0.08132 -0.32419,-0.0029 -0.16492,-0.08826 -0.24098,-0.0839 -0.44162,0.0253 -0.1333,0.07256 -0.37012,0.199922 -0.52624,0.283023 l -0.28386,0.151093 0.0561,0.496069 c 0.0309,0.272839 0.0919,0.590246 0.1357,0.705352 0.17275,0.454365 0.0604,1.040818 -0.24223,1.263964 -0.0853,0.06287 -0.11091,0.183631 -0.081,0.381 0.0241,0.158929 0.002,0.365162 -0.0482,0.458295 -0.0506,0.09313 -0.119,0.378884 -0.15191,0.635 -0.0329,0.256117 -0.10716,0.732367 -0.16498,1.058334 -0.0578,0.325966 -0.0971,0.902173 -0.0873,1.280459 0.0269,1.035363 -0.19914,1.173823 -1.13447,0.695005 z m 7.21216,-8.553006 c -0.027,-0.06754 -0.0471,-0.04748 -0.0511,0.05115 -0.004,0.08925 0.0163,0.139259 0.0445,0.111125 0.0281,-0.02814 0.0311,-0.10116 0.007,-0.162278 z m -50.1727,7.551209 c -0.004,-0.223057 0.28326,-0.931334 0.37812,-0.931334 0.0305,0 0.0269,0.06668 -0.008,0.148167 -0.035,0.08149 -0.13166,0.338667 -0.21479,0.5715 -0.10868,0.304434 -0.15227,0.363884 -0.1552,0.211667 z m 18.69263,-0.528375 c -0.0558,-0.104339 -0.10481,-0.430213 -0.10881,-0.724166 -0.006,-0.474629 0.0164,-0.552698 0.20438,-0.697409 0.11642,-0.08962 0.27916,-0.163799 0.36165,-0.164834 0.0825,-0.001 0.19338,-0.09713 0.24643,-0.21355 0.1158,-0.254181 0.20291,-0.267207 0.32027,-0.0479 0.12,0.224217 0.10989,0.344232 -0.029,0.344232 -0.0641,0 -0.16734,0.06111 -0.22932,0.135796 -0.0947,0.114093 -0.0896,0.176078 0.032,0.387861 0.0796,0.138637 0.14467,0.421372 0.14467,0.6283 0,0.325959 -0.029,0.387268 -0.21718,0.458806 -0.35935,0.136624 -0.61481,0.09888 -0.72506,-0.107137 z m -20.16539,-1.945311 c -0.21503,-0.15289 -0.59715,-0.440776 -0.84916,-0.639747 -0.3449,-0.272312 -0.64406,-0.414806 -1.20987,-0.576272 -0.41342,-0.117979 -1.05976,-0.306931 -1.43631,-0.419895 l -0.68464,-0.205387 -0.64886,-0.853228 c -0.35688,-0.469276 -0.6497,-0.917629 -0.65072,-0.99634 -0.001,-0.07871 0.10375,-0.559212 0.23283,-1.067777 l 0.23469,-0.924666 0.47961,-0.345335 c 0.26378,-0.189934 0.83003,-0.589406 1.25833,-0.887716 l 0.77873,-0.542382 -0.0599,-1.150952 -0.0599,-1.150951 -0.68424,-1.100667 c -0.93162,-1.498597 -1.59656,-2.485151 -2.05117,-3.043288 -0.20964,-0.257393 -0.38118,-0.507098 -0.38118,-0.554901 0,-0.124632 3.17764,-0.104049 3.53824,0.02292 0.21423,0.07543 0.31663,0.07432 0.44335,-0.0048 0.21881,-0.136645 1.13757,-0.134485 1.24537,0.0029 0.0457,0.05821 0.12908,0.467783 0.18538,0.910167 0.0745,0.585445 0.17394,0.946927 0.36536,1.328311 0.23135,0.460938 0.24849,0.541153 0.14248,0.666738 -0.0663,0.07852 -0.18007,0.316345 -0.25286,0.528504 -0.22992,0.670122 -0.57827,0.666906 -0.80654,-0.0074 -0.10885,-0.321568 -0.25207,-0.289915 -0.23325,0.05155 0.0136,0.246743 0.0428,0.289283 0.59132,0.861343 0.18498,0.192917 0.36161,0.483473 0.41044,0.675142 0.0783,0.307246 0.11671,0.342564 0.44253,0.406553 0.32804,0.06442 0.36106,0.09534 0.4093,0.383191 0.0289,0.172213 0.0902,0.436618 0.13634,0.587567 0.0461,0.15095 0.0853,0.522425 0.087,0.8255 0.002,0.303076 0.0393,0.551047 0.0835,0.551047 0.0472,0 0.0568,0.156969 0.0232,0.381 -0.0515,0.343117 -0.0404,0.381 0.11144,0.381 0.0927,0 0.21681,-0.05811 0.27575,-0.129136 0.0957,-0.115279 0.12404,-0.113871 0.26437,0.01312 0.0865,0.07824 0.15719,0.192177 0.15719,0.25319 0,0.06101 0.11171,0.238155 0.24823,0.393651 0.13653,0.155495 0.2742,0.386163 0.30593,0.512594 0.0321,0.127961 0.25989,0.402619 0.51377,0.619512 0.25084,0.2143 0.45607,0.454567 0.45607,0.533927 0,0.07936 -0.0986,0.236656 -0.21901,0.349548 -0.20433,0.191494 -0.21529,0.24015 -0.16354,0.725568 0.05,0.469428 0.0378,0.532697 -0.12537,0.646973 -0.0995,0.06967 -0.24823,0.252336 -0.33061,0.405935 -0.09,0.167751 -0.25524,0.315113 -0.41389,0.369027 -0.44017,0.149586 -0.50264,0.265617 -0.28753,0.534026 0.27422,0.342154 0.38177,0.633984 0.28872,0.783397 -0.0599,0.09624 -0.2839,0.132809 -0.9246,0.150981 -0.83631,0.02372 -0.84976,0.02096 -1.23646,-0.254 z m 2.185,-1.844912 c 0.029,-0.0469 -0.009,-0.108753 -0.0833,-0.13746 -0.16211,-0.06221 -0.25246,0.0063 -0.17453,0.132424 0.0703,0.113757 0.18922,0.116079 0.25785,0.005 z m -0.67771,-0.930736 c 0.0288,-0.04657 0.012,-0.08467 -0.0373,-0.08467 -0.0493,0 -0.0897,0.0381 -0.0897,0.08467 0,0.04657 0.0168,0.08467 0.0373,0.08467 0.0205,0 0.0609,-0.0381 0.0897,-0.08467 z m -0.72934,-0.598647 c -0.13587,-0.08397 -0.19771,-0.03943 -0.11995,0.08639 0.0312,0.05042 0.0962,0.06725 0.14452,0.03738 0.0569,-0.03516 0.0482,-0.07879 -0.0246,-0.123778 z m -3.12299,-0.680412 c 0,-0.08815 -0.0159,-0.160274 -0.0354,-0.160274 -0.0195,0 -0.0957,-0.02313 -0.16933,-0.05139 -0.0996,-0.03821 -0.13393,0.0016 -0.13393,0.155222 0,0.113638 0.0228,0.229389 0.0506,0.257225 0.0948,0.09477 0.28805,-0.03996 0.28805,-0.200781 z m 15.57867,1.490726 c 0.058,-0.06985 0.18646,-0.125789 0.28553,-0.124308 0.1766,0.0026 0.17691,0.0051 0.0158,0.127 -0.2282,0.172596 -0.44519,0.170657 -0.30132,-0.0027 z m 9.144,-7.103693 -1.143,-0.0957 -0.88425,-0.464305 -0.88424,-0.464304 -1.00137,-1.439333 c -1.09213,-1.569795 -1.45738,-2.19644 -1.38706,-2.379696 0.0388,-0.101062 1.17244,-0.115645 7.56111,-0.09726 6.84447,0.01969 7.51785,0.03385 7.54186,0.158545 0.0145,0.07531 -0.16754,0.349093 -0.40455,0.608414 -0.51445,0.562887 -2.11224,1.502325 -2.61271,1.536164 -0.78001,0.05274 -0.94131,0.130365 -1.25611,0.604498 -0.29954,0.45114 -0.42638,0.529843 -1.25158,0.776599 -0.16451,0.04919 -0.31099,0.186837 -0.42333,0.397783 -0.1595,0.299499 -0.23835,0.34591 -1.10311,0.649144 -1.01051,0.35435 -1.01603,0.35477 -2.75166,0.209452 z m 21.93885,-2.53603 c -0.0738,-0.0889 -0.069,-0.139974 0.0199,-0.213755 0.0889,-0.07378 0.13997,-0.06904 0.21376,0.01987 0.0738,0.0889 0.069,0.139974 -0.0199,0.213755 -0.0889,0.07378 -0.13997,0.06904 -0.21376,-0.01987 z\"\n               id=\"path3278-1-1\" />\n            <path\n               style=\"fill:#aed3db;stroke:${colors[19]};stroke-width:0.08466667;stroke-opacity:1\"\n               d=\"m 76.190048,84.205455 c 0.04722,-0.671891 0.06241,-0.6985 0.398781,-0.6985 0.32732,0 0.343109,0.03 0.412229,0.783166 l 0.03691,0.402167 H 76.5969 76.155835 Z m 10.986385,0.402166 c 0.02878,-0.04657 0.09043,-0.08467 0.136994,-0.08467 0.04657,0 0.06112,0.0381 0.03234,0.08467 -0.02878,0.04657 -0.09043,0.08467 -0.136994,0.08467 -0.04657,0 -0.06112,-0.0381 -0.03234,-0.08467 z m 0.408215,-0.03931 c 0.01608,-0.04823 0.08003,-0.08769 0.142119,-0.08769 0.06209,0 0.126042,0.03946 0.142119,0.08769 0.01608,0.04823 -0.04788,0.08769 -0.142119,0.08769 -0.09424,0 -0.158196,-0.03946 -0.142119,-0.08769 z m 0.396119,0.08305 c 0,-0.01265 0.05209,-0.06624 0.115766,-0.119088 0.08704,-0.07223 0.137766,-0.06955 0.204413,0.0108 0.06695,0.08071 0.03861,0.109866 -0.115767,0.119087 -0.112426,0.0067 -0.204412,0.0019 -0.204412,-0.0108 z m 1.778,-0.04374 c 0,-0.04657 0.0381,-0.08467 0.08467,-0.08467 0.04657,0 0.08467,0.0381 0.08467,0.08467 0,0.04657 -0.0381,0.08467 -0.08467,0.08467 -0.04657,0 -0.08467,-0.0381 -0.08467,-0.08467 z m 22.479003,0 c -0.16326,-0.07015 -0.16268,-0.07298 0.0162,-0.07871 0.10202,-0.0033 0.20905,0.03215 0.23783,0.07871 0.0619,0.100142 -0.021,0.100142 -0.254,0 z m 0.42333,0 c 0.0288,-0.04657 0.0882,-0.08467 0.132,-0.08467 0.0438,0 0.0797,0.0381 0.0797,0.08467 0,0.04657 -0.0594,0.08467 -0.132,0.08467 -0.0726,0 -0.10845,-0.0381 -0.0797,-0.08467 z m 0.42889,-0.009 c 0.0568,-0.09196 0.26582,-0.09991 0.31999,-0.01217 0.0216,0.03493 -0.0521,0.06898 -0.16378,0.07568 -0.11164,0.0067 -0.18193,-0.02188 -0.15621,-0.0635 z m 0.62944,0.009 c -0.10944,-0.07073 -0.10721,-0.08225 0.0162,-0.08337 0.0787,-6.77e-4 0.16672,0.0368 0.1955,0.08337 0.0662,0.107154 -0.0459,0.107154 -0.21167,0 z m 29.083,-4.23e-4 c -0.14782,-0.06387 -0.14053,-0.07159 0.0574,-0.06075 0.12471,0.0068 0.20818,0.04243 0.18551,0.07912 -0.0227,0.03669 -0.0485,0.06403 -0.0574,0.06076 -0.009,-0.0033 -0.0924,-0.03888 -0.18551,-0.07912 z m 0.635,-0.0046 c 0,-0.04932 0.0381,-0.06612 0.0847,-0.03734 0.0466,0.02878 0.0847,0.06913 0.0847,0.08966 0,0.02053 -0.0381,0.03734 -0.0847,0.03734 -0.0466,0 -0.0847,-0.04035 -0.0847,-0.08966 z m 0.635,0.005 c -0.0288,-0.04657 -0.012,-0.08467 0.0373,-0.08467 0.0493,0 0.0897,0.0381 0.0897,0.08467 0,0.04657 -0.0168,0.08467 -0.0373,0.08467 -0.0205,0 -0.0609,-0.0381 -0.0897,-0.08467 z m 0.29634,0 c 0,-0.04657 0.0381,-0.08467 0.0847,-0.08467 0.0466,0 0.0847,0.0381 0.0847,0.08467 0,0.04657 -0.0381,0.08467 -0.0847,0.08467 -0.0466,0 -0.0847,-0.0381 -0.0847,-0.08467 z m 0.254,0 c 0,-0.04657 0.0572,-0.08467 0.127,-0.08467 0.0698,0 0.127,0.0381 0.127,0.08467 0,0.04657 -0.0572,0.08467 -0.127,0.08467 -0.0699,0 -0.127,-0.0381 -0.127,-0.08467 z m 0.93133,-0.0053 c 0,-0.04367 0.0762,-0.07941 0.16933,-0.07941 0.0931,0 0.16934,0.02999 0.16934,0.06665 0,0.03666 -0.0762,0.07239 -0.16934,0.0794 -0.0931,0.007 -0.16933,-0.02298 -0.16933,-0.06665 z m 0.508,0.0053 c 0,-0.04657 0.0381,-0.08467 0.0847,-0.08467 0.0466,0 0.0847,0.0381 0.0847,0.08467 0,0.04657 -0.0381,0.08467 -0.0847,0.08467 -0.0466,0 -0.0847,-0.0381 -0.0847,-0.08467 z m 0.508,0 c 0,-0.04657 0.0381,-0.08467 0.0847,-0.08467 0.0466,0 0.0847,0.0381 0.0847,0.08467 0,0.04657 -0.0381,0.08467 -0.0847,0.08467 -0.0466,0 -0.0847,-0.0381 -0.0847,-0.08467 z m 0.508,0 c 0,-0.04657 0.0381,-0.08467 0.0847,-0.08467 0.0466,0 0.0847,0.0381 0.0847,0.08467 0,0.04657 -0.0381,0.08467 -0.0847,0.08467 -0.0466,0 -0.0847,-0.0381 -0.0847,-0.08467 z m 0.33867,-0.0053 c 0,-0.04367 0.0762,-0.07941 0.16933,-0.07941 0.0931,0 0.16933,0.02999 0.16933,0.06665 0,0.03666 -0.0762,0.07239 -0.16933,0.0794 -0.0931,0.007 -0.16933,-0.02298 -0.16933,-0.06665 z m 0.508,0.0053 c 0,-0.04657 0.0381,-0.08467 0.0847,-0.08467 0.0466,0 0.0847,0.0381 0.0847,0.08467 0,0.04657 -0.0381,0.08467 -0.0847,0.08467 -0.0466,0 -0.0847,-0.0381 -0.0847,-0.08467 z m 0.55033,0 c -0.0288,-0.04657 -0.012,-0.08467 0.0373,-0.08467 0.0493,0 0.0897,0.0381 0.0897,0.08467 0,0.04657 -0.0168,0.08467 -0.0373,0.08467 -0.0205,0 -0.0609,-0.0381 -0.0897,-0.08467 z m 0.762,0 c -0.0288,-0.04657 -0.012,-0.08467 0.0373,-0.08467 0.0493,0 0.0897,0.0381 0.0897,0.08467 0,0.04657 -0.0168,0.08467 -0.0373,0.08467 -0.0205,0 -0.0609,-0.0381 -0.0897,-0.08467 z m 0.46567,0 c 0,-0.04657 0.0381,-0.08467 0.0847,-0.08467 0.0466,0 0.0847,0.0381 0.0847,0.08467 0,0.04657 -0.0381,0.08467 -0.0847,0.08467 -0.0466,0 -0.0847,-0.0381 -0.0847,-0.08467 z m 0.33866,-0.0053 c 0,-0.04367 0.0762,-0.07941 0.16934,-0.07941 0.0931,0 0.16933,0.02999 0.16933,0.06665 0,0.03666 -0.0762,0.07239 -0.16933,0.0794 -0.0931,0.007 -0.16934,-0.02298 -0.16934,-0.06665 z m 1.01601,2.54e-4 c 0,-0.04932 0.0381,-0.06612 0.0847,-0.03734 0.0466,0.02878 0.0847,0.06913 0.0847,0.08966 0,0.02053 -0.0381,0.03734 -0.0847,0.03734 -0.0466,0 -0.0847,-0.04035 -0.0847,-0.08966 z m 0.42333,0.005 c 0,-0.04657 0.0403,-0.08467 0.0897,-0.08467 0.0493,0 0.0661,0.0381 0.0373,0.08467 -0.0288,0.04657 -0.0691,0.08467 -0.0897,0.08467 -0.0205,0 -0.0373,-0.0381 -0.0373,-0.08467 z m 0.59267,-0.0053 c 0,-0.04367 0.0762,-0.0794 0.16933,-0.0794 0.0931,0 0.16933,0.02999 0.16933,0.06665 0,0.03666 -0.0762,0.07239 -0.16933,0.0794 -0.0931,0.007 -0.16933,-0.02298 -0.16933,-0.06665 z m 1.016,0.0053 c 0,-0.04657 0.0381,-0.08467 0.0847,-0.08467 0.0466,0 0.0847,0.0381 0.0847,0.08467 0,0.04657 -0.0381,0.08467 -0.0847,0.08467 -0.0466,0 -0.0847,-0.0381 -0.0847,-0.08467 z m 0.635,0 c 0.0288,-0.04657 0.0691,-0.08467 0.0897,-0.08467 0.0205,0 0.0373,0.0381 0.0373,0.08467 0,0.04657 -0.0404,0.08467 -0.0897,0.08467 -0.0493,0 -0.0661,-0.0381 -0.0373,-0.08467 z m 0.762,0 c -0.0288,-0.04657 -0.012,-0.08467 0.0373,-0.08467 0.0493,0 0.0897,0.0381 0.0897,0.08467 0,0.04657 -0.0168,0.08467 -0.0373,0.08467 -0.0205,0 -0.0609,-0.0381 -0.0897,-0.08467 z m 0.508,0 c -0.0288,-0.04657 -0.012,-0.08467 0.0373,-0.08467 0.0493,0 0.0897,0.0381 0.0897,0.08467 0,0.04657 -0.0168,0.08467 -0.0373,0.08467 -0.0205,0 -0.0609,-0.0381 -0.0897,-0.08467 z m 0.97366,0 c 0,-0.04657 0.0572,-0.08467 0.127,-0.08467 0.0699,0 0.127,0.0381 0.127,0.08467 0,0.04657 -0.0572,0.08467 -0.127,0.08467 -0.0699,0 -0.127,-0.0381 -0.127,-0.08467 z m 0.508,0 c 0,-0.04657 0.0381,-0.08467 0.0847,-0.08467 0.0466,0 0.0847,0.0381 0.0847,0.08467 0,0.04657 -0.0381,0.08467 -0.0847,0.08467 -0.0466,0 -0.0847,-0.0381 -0.0847,-0.08467 z m 0.84667,0 c 0,-0.04657 0.0381,-0.08467 0.0847,-0.08467 0.0466,0 0.0847,0.0381 0.0847,0.08467 0,0.04657 -0.0381,0.08467 -0.0847,0.08467 -0.0466,0 -0.0847,-0.0381 -0.0847,-0.08467 z m 0.55582,0.0089 c -0.0258,-0.04169 0.009,-0.09717 0.077,-0.123302 0.13231,-0.05077 0.24531,0.0548 0.15514,0.144954 -0.0765,0.07654 -0.17721,0.06715 -0.23209,-0.02165 z m 1.43385,-0.0089 c 0.0288,-0.04657 0.0691,-0.08467 0.0897,-0.08467 0.0205,0 0.0373,0.0381 0.0373,0.08467 0,0.04657 -0.0404,0.08467 -0.0897,0.08467 -0.0493,0 -0.0661,-0.0381 -0.0373,-0.08467 z m 0.508,0 c -0.0288,-0.04657 -0.012,-0.08467 0.0373,-0.08467 0.0493,0 0.0897,0.0381 0.0897,0.08467 0,0.04657 -0.0168,0.08467 -0.0373,0.08467 -0.0205,0 -0.0609,-0.0381 -0.0897,-0.08467 z m 0.508,0 c -0.0288,-0.04657 -0.012,-0.08467 0.0373,-0.08467 0.0493,0 0.0897,0.0381 0.0897,0.08467 0,0.04657 -0.0168,0.08467 -0.0373,0.08467 -0.0205,0 -0.0609,-0.0381 -0.0897,-0.08467 z m 1.397,0.0053 c 0,-0.04367 0.0762,-0.07367 0.16933,-0.06665 0.0931,0.007 0.16933,0.04275 0.16933,0.0794 0,0.03666 -0.0762,0.06665 -0.16933,0.06665 -0.0931,0 -0.16933,-0.03573 -0.16933,-0.0794 z m 0.508,0 c 0,-0.04367 0.0762,-0.07367 0.16933,-0.06665 0.0931,0.007 0.16933,0.04275 0.16933,0.0794 0,0.03666 -0.0762,0.06665 -0.16933,0.06665 -0.0931,0 -0.16933,-0.03573 -0.16933,-0.0794 z m 0.97366,-0.0053 c -0.0288,-0.04657 -0.012,-0.08467 0.0373,-0.08467 0.0493,0 0.0897,0.0381 0.0897,0.08467 0,0.04657 -0.0168,0.08467 -0.0373,0.08467 -0.0205,0 -0.0609,-0.0381 -0.0897,-0.08467 z m 0.31769,-0.211666 c 9.3e-4,-0.186267 0.0183,-0.252498 0.0385,-0.14718 0.0203,0.105318 0.0195,0.257718 -0.002,0.338667 -0.0212,0.08095 -0.0378,-0.0052 -0.0368,-0.191487 z m 0.003,-2.370667 c 8.4e-4,-0.232833 0.0171,-0.318034 0.0365,-0.189336 0.0195,0.128698 0.0189,0.319198 -0.001,0.423333 -0.0201,0.104135 -0.036,-0.0012 -0.0354,-0.233997 z m -0.008,-0.931334 c 0.002,-0.1397 0.0207,-0.1866 0.0422,-0.104222 0.0215,0.08238 0.0201,0.196678 -0.003,0.254 -0.0232,0.05732 -0.0408,-0.01008 -0.039,-0.149778 z M 84.814381,77.781496 c 0.0698,-0.285475 0.623874,-1.03903 0.767825,-1.044268 0.15196,-0.0055 0.221832,0.469629 0.116149,0.789854 -0.07526,0.228045 -0.149577,0.295316 -0.366497,0.331756 -0.14965,0.02514 -0.340702,0.07282 -0.424559,0.105956 -0.132426,0.05232 -0.14464,0.02823 -0.09292,-0.183298 z M 65.441102,76.500788 c -0.231578,-0.265485 -0.320336,-0.51144 -0.320336,-0.887668 0,-0.63246 0.371857,-0.76646 0.826039,-0.297666 0.35178,0.363099 0.395092,0.813358 0.10767,1.119305 -0.235815,0.251013 -0.433457,0.272289 -0.613373,0.06603 z m 98.069018,-2.356556 c 0.004,-0.09863 0.0241,-0.118694 0.0512,-0.05115 0.0245,0.06112 0.0215,0.134144 -0.007,0.162278 -0.0281,0.02813 -0.0481,-0.02187 -0.0445,-0.111125 z M 88.468544,73.091836 c -0.373797,-0.202266 -0.527808,-0.416322 -0.69195,-0.961727 -0.106283,-0.353149 -0.105719,-0.408178 0.0046,-0.450518 0.06913,-0.02653 0.221937,-0.0044 0.339575,0.04922 0.370849,0.168969 1.374507,0.977521 1.378022,1.11014 0.0103,0.388623 -0.532973,0.521973 -1.030263,0.252882 z m -5.066356,-0.528049 c -0.161518,-0.151341 -0.358172,-0.376631 -0.43701,-0.500642 -0.08173,-0.128566 -0.256312,-0.250289 -0.406183,-0.283206 -0.195913,-0.04303 -0.249527,-0.09243 -0.210551,-0.194 0.02876,-0.07495 0.07496,-0.430269 0.102674,-0.789601 0.02771,-0.359331 0.08043,-0.70195 0.117157,-0.761375 0.103544,-0.16754 0.855351,0.09192 0.977756,0.337433 0.145826,0.2925 0.385306,0.421441 0.836702,0.450502 l 0.409925,0.02639 0.125408,0.452326 c 0.198266,0.715108 0.08488,1.013362 -0.493299,1.297647 -0.256117,0.125929 -0.524896,0.231376 -0.597288,0.234328 -0.07239,0.003 -0.263773,-0.118459 -0.425291,-0.269802 z m 2.038579,-2.075133 c 0,-0.03536 0.07295,-0.109859 0.162113,-0.165542 0.127517,-0.07964 0.181566,-0.0778 0.253266,0.0086 0.05013,0.06041 0.06608,0.134901 0.03544,0.165542 -0.0773,0.0773 -0.450821,0.07018 -0.450821,-0.0086 z M 136.60964,54.761542 c -0.0578,-0.150474 0.10924,-0.379922 0.27649,-0.379922 0.13888,0 0.14899,0.120016 0.029,0.344232 -0.10499,0.196193 -0.23793,0.211723 -0.30548,0.03569 z M 35.699099,52.887313 c -0.232834,-0.07106 -0.548451,-0.183004 -0.701373,-0.248776 -0.152921,-0.06577 -0.334119,-0.119584 -0.402661,-0.119584 -0.108878,0 -0.121886,-0.873152 -0.102961,-6.911255 l 0.02166,-6.911256 0.928518,0.01595 c 0.510685,0.0088 1.177435,0.06817 1.481667,0.132 0.469857,0.09858 1.80265,0.14049 3.728149,0.117235 0.162983,-0.002 0.941474,0.02422 1.72998,0.0582 1.307967,0.05637 1.47868,0.08209 1.947334,0.293477 0.282527,0.127433 0.685136,0.259659 0.894686,0.293837 0.20955,0.03418 0.4572,0.102597 0.550333,0.152042 0.09313,0.04945 0.58261,0.120032 1.087726,0.15686 0.771911,0.05628 0.981225,0.103537 1.312333,0.29629 0.873998,0.508793 1.320554,0.707285 1.591206,0.707285 0.175908,0 0.335938,0.06151 0.419495,0.16124 0.625791,0.746912 0.770694,0.85476 1.148441,0.85476 0.345493,0 0.700539,0.156541 0.853003,0.376093 0.03421,0.04927 0.06279,0.319221 0.0635,0.599901 0.0021,0.819658 0.338779,1.084952 0.963475,0.759151 0.133381,-0.06956 0.344802,-0.126478 0.469824,-0.126478 0.180599,0 0.248209,0.05779 0.328989,0.281178 0.05592,0.154648 0.101675,0.401419 0.101675,0.548381 0,0.447101 0.267774,0.552252 1.557331,0.611544 0.743709,0.03419 1.214378,0.09674 1.427169,0.189639 0.355743,0.155314 0.347959,0.140789 0.234865,0.438249 -0.109561,0.288166 -0.807895,0.594524 -1.525926,0.669421 -0.515796,0.0538 -0.576331,0.0835 -0.967309,0.474474 -0.370015,0.370015 -0.403755,0.433133 -0.299,0.559354 0.09424,0.113555 0.21064,0.132724 0.576589,0.09495 0.422285,-0.04358 0.477676,-0.02816 0.701063,0.195229 0.36265,0.36265 0.314782,0.548203 -0.307782,1.193067 -0.510415,0.528698 -0.550333,0.597526 -0.550333,0.948911 0,0.514411 -0.110805,0.590027 -0.687382,0.469089 -0.859247,-0.180229 -1.048318,-0.01078 -1.246868,1.117454 -0.125237,0.711645 -0.322832,0.980154 -0.697868,0.948324 -0.153794,-0.01305 -0.406424,-0.120446 -0.561401,-0.238653 -0.351181,-0.267858 -0.955148,-1.435299 -0.955148,-1.846257 0,-0.346634 -0.264071,-0.593613 -0.784538,-0.73376 -0.332573,-0.08955 -0.346342,-0.08426 -0.715405,0.27488 -0.206967,0.201404 -0.428603,0.465598 -0.492522,0.587097 -0.06392,0.121499 -0.233285,0.269399 -0.376369,0.328667 -0.225526,0.09342 -0.28194,0.08804 -0.42383,-0.04037 -0.09002,-0.08147 -0.224291,-0.330622 -0.298377,-0.553674 -0.196753,-0.592366 -0.432132,-0.79934 -1.151246,-1.012315 -0.344326,-0.101977 -0.759396,-0.228658 -0.92238,-0.281515 -0.162983,-0.05286 -0.719292,-0.100988 -1.236241,-0.106958 -0.516951,-0.006 -0.987929,-0.04053 -1.04662,-0.07681 -0.05869,-0.03627 -0.195587,-0.266916 -0.304213,-0.512541 -0.181499,-0.410398 -0.225498,-0.451319 -0.542933,-0.50495 -0.33463,-0.05653 -0.362402,-0.04248 -0.888361,0.449527 -0.514318,0.481119 -0.812781,0.628982 -1.181338,0.585251 -0.239037,-0.02836 -0.466013,0.418947 -0.544843,1.073743 -0.09618,0.798946 -0.164966,0.833545 -0.751728,0.37813 -0.629828,-0.488839 -0.901777,-1.106617 -0.980052,-2.226351 -0.05095,-0.728784 -0.06389,-0.766616 -0.369417,-1.079501 -0.174141,-0.178336 -0.364836,-0.324248 -0.423766,-0.324248 -0.05893,0 -0.260528,0.200025 -0.447995,0.4445 -0.187466,0.244475 -0.494303,0.635 -0.681858,0.867833 -0.718394,0.89182 -0.831576,1.27383 -0.542842,1.83218 0.07322,0.141591 0.112119,0.312179 0.08645,0.379085 -0.02568,0.06691 0.166437,0.503197 0.426915,0.969534 0.260478,0.466336 0.504755,0.970131 0.542839,1.119543 0.03808,0.149412 0.09287,0.34805 0.121743,0.441417 0.07244,0.234235 -0.236856,0.551383 -0.5312,0.544684 -0.126244,-0.0029 -0.420035,-0.06336 -0.652868,-0.134416 z m 83.144971,-1.776387 c -0.14436,-0.725511 -0.34356,-1.477187 -0.49069,-1.85164 -0.0915,-0.232833 -0.23441,-0.697756 -0.31761,-1.033164 -0.0832,-0.335406 -0.21211,-0.731785 -0.28647,-0.88084 -0.0744,-0.149057 -0.1352,-0.288874 -0.1352,-0.310704 0,-0.109461 0.28534,0.218538 0.42051,0.483377 0.0848,0.166099 0.23091,0.371427 0.32475,0.456285 0.0938,0.08486 0.22025,0.275359 0.28093,0.423333 0.0607,0.147976 0.38251,0.688147 0.71519,1.20038 0.33267,0.512233 0.66873,1.055636 0.7468,1.20756 0.14184,0.276039 0.14177,0.276293 -0.0936,0.371108 -0.12956,0.05218 -0.43371,0.11342 -0.6759,0.136079 -0.42966,0.0402 -0.44152,0.0353 -0.48869,-0.201774 z m -1.65995,-4.793807 c -0.0535,-0.104775 -0.23124,-0.388506 -0.39497,-0.630514 -0.26158,-0.386652 -0.30106,-0.515 -0.32551,-1.058333 -0.0198,-0.439021 -0.007,-0.544665 0.0433,-0.364319 0.0391,0.1397 0.0756,0.417609 0.0811,0.617575 0.008,0.282397 0.0951,0.487814 0.39102,0.92001 0.35005,0.511232 0.44433,0.706081 0.34165,0.706081 -0.0217,0 -0.0831,-0.08572 -0.13663,-0.1905 z m 21.78081,-0.144585 c 0.0215,-0.215692 0.096,-0.31602 0.33903,-0.456444 0.46566,-0.269041 0.48012,-0.113744 0.0312,0.335169 l -0.39774,0.397733 z m -22.60119,-2.458915 c 0,-0.162983 0.0174,-0.229658 0.0387,-0.148166 0.0213,0.08149 0.0213,0.214841 0,0.296333 -0.0213,0.08149 -0.0387,0.01482 -0.0387,-0.148167 z m -0.17716,-0.707839 c -0.0511,-0.203046 -0.1509,-0.417261 -0.22172,-0.476035 -0.0708,-0.05877 -0.12876,-0.156186 -0.12876,-0.216474 0,-0.06029 -0.0795,-0.293747 -0.17667,-0.518799 -0.0972,-0.225052 -0.20652,-0.580636 -0.24298,-0.790186 -0.0365,-0.20955 -0.0959,-0.4572 -0.13212,-0.550334 -0.0481,-0.123725 -0.04,-0.145728 0.0301,-0.08169 0.0527,0.0482 0.13372,0.276802 0.17999,0.508 0.12036,0.601459 0.44361,1.434058 0.66227,1.705811 0.10813,0.134374 0.18746,0.350605 0.18746,0.510926 0,0.376402 -0.0466,0.349438 -0.15752,-0.09122 z m -1.32617,-3.277875 c -0.0816,-0.257119 8.5e-4,-0.283502 0.11346,-0.03631 0.0531,0.116614 0.0619,0.212025 0.0194,0.212025 -0.0424,0 -0.10224,-0.07907 -0.13291,-0.175714 z m -0.11161,-0.501619 c 0,-0.116417 0.0192,-0.164042 0.0427,-0.105834 0.0235,0.05821 0.0235,0.153459 0,0.211667 -0.0235,0.05821 -0.0427,0.01058 -0.0427,-0.105833 z m -0.14507,-0.54563 c -0.0319,-0.169913 -0.0389,-0.327983 -0.0156,-0.351266 0.0233,-0.02328 0.0684,0.09669 0.10029,0.2666 0.0319,0.169912 0.0389,0.327982 0.0156,0.351266 -0.0233,0.02328 -0.0684,-0.09669 -0.10029,-0.2666 z m 36.70771,-0.04714 c -0.26748,-0.136387 -0.29715,-0.187041 -0.30464,-0.520002 -0.009,-0.399065 0.29304,-1.118172 0.50357,-1.19896 0.0672,-0.02577 0.18676,-0.241519 0.26579,-0.479436 0.0824,-0.248114 0.22841,-0.488091 0.34238,-0.562765 0.1796,-0.117681 0.22691,-0.116797 0.49243,0.0092 0.16156,0.07666 0.35489,0.206966 0.42965,0.289563 0.12597,0.139205 0.11667,0.174331 -0.12733,0.480839 -0.23003,0.288948 -0.25617,0.37339 -0.20721,0.669331 0.0932,0.563281 0.071,0.624933 -0.38153,1.061118 -0.47322,0.456106 -0.56601,0.479103 -1.01311,0.251113 z m -48.02911,-0.761898 c -0.1184,-0.09313 -0.29693,-0.169333 -0.39674,-0.169333 -0.18737,0 -0.42682,-0.41768 -0.42682,-0.744523 0,-0.343416 0.61978,-0.685447 1.04753,-0.578088 0.22642,0.05683 0.29587,0.278274 0.35505,1.132111 0.0354,0.510264 0.0295,0.529166 -0.16354,0.529166 -0.11011,0 -0.29708,-0.0762 -0.41548,-0.169333 z m 10.91323,-0.97694 c -0.029,-0.07567 -0.0489,-0.220185 -0.0441,-0.321152 0.005,-0.116051 0.0342,-0.07479 0.0782,0.112184 0.074,0.314649 0.0538,0.438046 -0.0341,0.208968 z m -0.24125,-0.71223 c -0.21807,-0.25469 -0.29378,-0.441494 -0.3579,-0.883031 -0.033,-0.227259 -0.10409,-0.509984 -0.15799,-0.628275 -0.0765,-0.167916 -0.0745,-0.222913 0.009,-0.250811 0.0735,-0.02449 0.0902,-0.126539 0.0531,-0.324223 -0.0323,-0.171964 -0.0199,-0.28849 0.0306,-0.28849 0.0466,0 0.11039,0.142875 0.14184,0.3175 0.0314,0.174625 0.12853,0.456946 0.21576,0.62738 0.12267,0.239707 0.14755,0.416696 0.10989,0.781582 -0.0333,0.322365 -0.0144,0.513059 0.0597,0.602333 0.0596,0.07185 0.0914,0.147618 0.0707,0.168383 -0.0208,0.02076 -0.0994,-0.03429 -0.17484,-0.122348 z m -79.481683,-5.93083 c 9.13e-4,-2.682475 0.02986,-4.062297 0.08347,-3.979334 0.04514,0.06985 0.08266,0.08699 0.08337,0.0381 7.13e-4,-0.0489 -0.03771,-0.127907 -0.08538,-0.175581 -0.05445,-0.05446 -0.07806,-0.648045 -0.0635,-1.596602 l 0.02318,-1.509921 1.272477,-0.01602 c 0.768085,-0.0097 1.344801,-0.05472 1.454934,-0.113665 0.100352,-0.05371 0.438427,-0.09765 0.75128,-0.09765 h 0.568823 l 0.431576,0.431009 c 0.629554,0.628725 2.280484,1.606285 2.441243,1.445526 0.114577,-0.114578 0.01976,-0.243155 -0.300535,-0.407541 -0.819227,-0.420454 -2.005075,-1.299878 -2.005369,-1.487182 -5.2e-5,-0.03329 0.08166,-0.104273 0.181575,-0.157748 0.263754,-0.141156 1.443384,0.123563 1.935771,0.434405 0.572677,0.361528 1.135311,0.589442 1.452023,0.58819 0.155578,-5.93e-4 0.475584,0.02137 0.711124,0.04885 0.417948,0.04877 0.435775,0.04165 0.740613,-0.29577 0.301048,-0.333223 0.482132,-0.433094 0.482132,-0.265902 0,0.13062 0.939506,1.105371 1.190508,1.235168 0.241377,0.124821 0.923654,0.795345 0.925246,0.909307 5.08e-4,0.03592 0.101322,0.217043 0.224044,0.402488 0.188136,0.284293 0.214971,0.396707 0.171102,0.716762 -0.05716,0.417046 -0.49179,1.34807 -0.679867,1.456355 -0.06535,0.03763 -0.132596,0.141456 -0.149428,0.23073 -0.01683,0.08927 -0.07094,0.175746 -0.120245,0.192158 -0.0493,0.01641 -0.411252,-0.200326 -0.804333,-0.48164 -0.507928,-0.363505 -0.909584,-0.573388 -1.388342,-0.725466 -0.370507,-0.117692 -0.713407,-0.245466 -0.762,-0.283942 -0.04859,-0.03848 -0.434733,-0.09615 -0.858089,-0.128163 l -0.769737,-0.05821 -0.26743,0.304585 c -0.325365,0.370572 -0.339324,0.648509 -0.04622,0.920292 0.12743,0.118159 0.255268,0.361899 0.301543,0.574927 0.18998,0.874579 0.227278,0.762991 -0.49578,1.483262 -0.366915,0.3655 -0.780261,0.719749 -0.918546,0.787219 -0.138285,0.06747 -0.394303,0.256179 -0.568928,0.41935 -0.384987,0.359736 -0.432161,0.764324 -0.127,1.089212 0.23276,0.247806 0.251868,0.865511 0.03421,1.106016 -0.07703,0.08511 -0.140046,0.192733 -0.140046,0.239157 0,0.19737 -0.42416,0.453468 -1.016,0.613438 -0.513011,0.138662 -0.948126,0.176295 -2.264935,0.195895 l -1.629935,0.02426 z m 121.815813,1.392875 -0.39933,-0.207906 0.0306,-0.401985 c 0.045,-0.590963 0.13147,-0.877928 0.35546,-1.178961 0.11007,-0.147937 0.29642,-0.535896 0.4141,-0.862133 l 0.21396,-0.593156 -0.19354,-0.407656 c -0.19216,-0.404765 -0.19713,-0.408102 -0.69965,-0.470874 -0.62776,-0.07841 -0.76373,-0.234877 -0.8311,-0.956306 -0.0805,-0.862183 0.0778,-1.208536 0.8052,-1.761395 0.19379,-0.147292 0.4335,-0.472748 0.63153,-0.857452 0.2725,-0.529352 0.3027,-0.63992 0.20646,-0.755884 -0.062,-0.07471 -0.20059,-0.135835 -0.30798,-0.135835 -0.25001,0 -0.46135,-0.211345 -0.46135,-0.461347 0,-0.25072 -0.16113,-0.380895 -0.54947,-0.443914 -0.2685,-0.04357 -0.30301,-0.07457 -0.25472,-0.228736 0.20248,-0.646418 0.13337,-0.826405 -0.50698,-1.320442 -0.36019,-0.277873 -0.46012,-0.416367 -0.58397,-0.809255 -0.154,-0.488542 -0.64784,-1.074762 -0.99939,-1.186341 -0.14508,-0.04604 -0.16457,-0.103534 -0.12325,-0.363497 0.027,-0.16984 0.0215,-0.353117 -0.0122,-0.407281 -0.0337,-0.05416 -0.36587,-0.218955 -0.73815,-0.366202 -0.37228,-0.147246 -0.77421,-0.360105 -0.89318,-0.47302 -0.249,-0.236342 -0.40386,-0.256082 -0.63536,-0.08099 -0.24569,0.185837 -0.53191,0.145566 -1.09568,-0.154167 -0.38182,-0.202998 -0.51527,-0.322207 -0.53727,-0.479944 -0.04,-0.286895 -0.14932,-0.400811 -0.44732,-0.466263 -0.15118,-0.03321 -0.28195,-0.131172 -0.32451,-0.243114 -0.0392,-0.103123 -0.2694,-0.290278 -0.51152,-0.4159 -0.35334,-0.183312 -0.62959,-0.245004 -1.39932,-0.312482 -1.50626,-0.132045 -1.68424,-0.265983 -0.98413,-0.740604 l 0.4059,-0.275167 h 3.89299 c 3.94528,0 4.14989,-0.01554 4.03818,-0.30665 -0.0752,-0.195869 0.66799,-0.152618 0.90467,0.05265 0.30785,0.266998 1.59784,0.222924 1.51609,-0.0518 -0.0397,-0.133274 0.25746,-0.134086 0.39047,-0.0011 0.16256,0.162555 0.08,0.805115 -0.1129,0.879153 -0.30971,0.118846 -0.42129,0.331539 -0.37754,0.719667 0.0262,0.232305 0.006,0.401933 -0.0517,0.437676 -0.0519,0.0321 -0.0944,0.126389 -0.0944,0.209531 0,0.202155 -1.03986,1.647314 -1.33364,1.853447 -0.12798,0.0898 -0.37174,0.188604 -0.54168,0.21957 -0.16995,0.03097 -0.35559,0.112445 -0.41254,0.181063 -0.0883,0.106365 -0.0536,0.12476 0.23513,0.12476 0.19774,0 0.38252,-0.05285 0.44407,-0.127 0.058,-0.06985 0.14836,-0.127791 0.20086,-0.128756 0.0973,-0.0018 0.2971,-0.218373 0.89668,-0.971911 0.18526,-0.232834 0.39423,-0.489144 0.46439,-0.56958 0.13651,-0.156517 0.3854,-0.117595 0.3854,0.06027 0,0.05917 0.0579,0.155589 0.12856,0.214272 0.22973,0.190661 0.36256,0.619836 0.41077,1.32723 0.0472,0.692402 0.0469,0.693878 -0.2102,0.910167 -0.14159,0.119152 -0.32849,0.21664 -0.4153,0.21664 -0.18681,0 -0.21331,0.03723 -0.29398,0.412986 l -0.0614,0.285986 0.21555,-0.158986 c 0.11856,-0.08744 0.26535,-0.250127 0.32619,-0.361522 0.0608,-0.111394 0.25431,-0.293241 0.42993,-0.404103 l 0.3193,-0.201568 -0.0548,-0.950563 c -0.0526,-0.912676 -0.22769,-1.571469 -0.45497,-1.711938 -0.0934,-0.05775 -0.0906,-1.221707 0.003,-1.355292 0.0327,-0.04657 0.086,-0.303742 0.11839,-0.5715 0.0409,-0.33791 0.0959,-0.486834 0.17978,-0.486834 0.0665,0 0.1209,-0.0381 0.1209,-0.08467 0,-0.05498 1.143,-0.08467 3.25967,-0.08467 h 3.25967 l 8e-5,5.355167 8e-5,5.355167 -2.00317,-0.02561 c -1.57581,-0.02014 -2.01782,-0.0021 -2.07183,0.08467 -0.0556,0.08926 -0.10151,0.08992 -0.24098,0.0035 -0.18603,-0.115298 -0.3438,-0.06314 -1.06052,0.350609 -0.33473,0.193233 -0.33843,0.200829 -0.31836,0.653183 0.0112,0.251722 0.0588,0.568137 0.10583,0.703144 0.047,0.135007 0.0855,0.430534 0.0855,0.656727 0,0.336411 -0.0397,0.445779 -0.21814,0.600933 -0.18866,0.164037 -0.21124,0.23574 -0.16705,0.530458 0.0356,0.237192 0.0126,0.391694 -0.0755,0.508265 -0.0696,0.09212 -0.12781,0.317589 -0.12929,0.501052 -0.003,0.341025 -0.12596,1.11815 -0.26411,1.665838 -0.0471,0.186867 -0.046,0.470449 0.003,0.728122 0.11402,0.601229 0.0474,0.787067 -0.28046,0.782196 -0.14591,-0.0022 -0.44499,-0.0975 -0.66462,-0.211849 z m 7.18816,-8.436084 c -0.027,-0.06754 -0.0471,-0.04748 -0.0511,0.05115 -0.004,0.08925 0.0163,0.139259 0.0445,0.111125 0.0281,-0.02814 0.0311,-0.10116 0.007,-0.162278 z m -50.1727,7.551209 c -0.004,-0.223057 0.28326,-0.931334 0.37812,-0.931334 0.0305,0 0.0269,0.06668 -0.008,0.148167 -0.035,0.08149 -0.13166,0.338667 -0.21479,0.5715 -0.10868,0.304434 -0.15227,0.363884 -0.1552,0.211667 z m 18.69263,-0.528375 c -0.0558,-0.104339 -0.10481,-0.430213 -0.10881,-0.724166 -0.006,-0.474629 0.0164,-0.552698 0.20438,-0.697409 0.11642,-0.08962 0.27916,-0.163799 0.36165,-0.164834 0.0825,-0.001 0.19338,-0.09713 0.24643,-0.21355 0.1158,-0.254181 0.20291,-0.267207 0.32027,-0.0479 0.12,0.224217 0.10989,0.344232 -0.029,0.344232 -0.0641,0 -0.16734,0.06111 -0.22932,0.135796 -0.0947,0.114093 -0.0896,0.176078 0.032,0.387861 0.0796,0.138637 0.14467,0.421372 0.14467,0.6283 0,0.325959 -0.029,0.387268 -0.21718,0.458806 -0.35935,0.136624 -0.61481,0.09888 -0.72506,-0.107137 z m -18.5311,-3.099658 c 0,-0.08618 0.0404,-0.272513 0.0897,-0.414063 0.069,-0.198026 0.13734,-0.25462 0.29628,-0.245467 0.1136,0.0065 0.20658,0.01574 0.20661,0.02043 3e-5,0.0047 -0.0447,0.138043 -0.0995,0.296334 -0.14549,0.420759 -0.49316,0.662406 -0.49316,0.342768 z m 0.35984,-0.834386 c -0.13375,-0.02576 -0.1905,-0.09657 -0.1905,-0.23767 0,-0.110537 -0.0803,-0.257242 -0.17851,-0.326011 -0.10998,-0.07703 -0.15341,-0.165664 -0.11312,-0.230856 0.0448,-0.07255 0.0244,-0.09009 -0.065,-0.0558 -0.085,0.03263 -0.16281,-0.02123 -0.22374,-0.154945 -0.0552,-0.121239 -0.16534,-0.204966 -0.26953,-0.204966 -0.0969,0 -0.15507,-0.03411 -0.1293,-0.0758 0.0258,-0.04169 -0.0101,-0.09764 -0.0797,-0.124342 -0.0696,-0.0267 -0.12652,-0.0094 -0.12652,0.03846 0,0.04785 -0.0417,0.06121 -0.0928,0.02968 -0.10829,-0.06693 -0.0613,-0.471204 0.0999,-0.860793 0.10575,-0.255432 0.0986,-0.288346 -0.111,-0.508 -0.21145,-0.22164 -0.40418,-0.603349 -0.40418,-0.800497 0,-0.04891 0.15326,-0.229028 0.34058,-0.400252 0.43312,-0.395914 0.52122,-0.898891 0.29179,-1.665815 -0.0824,-0.275536 -0.17329,-0.634324 -0.20191,-0.797307 -0.0417,-0.237834 -0.10482,-0.313479 -0.31943,-0.383186 -0.14708,-0.04777 -0.34068,-0.153157 -0.43023,-0.234197 -0.18195,-0.164669 -0.39432,-0.779568 -0.31407,-0.909407 0.10201,-0.165064 0.32914,0.07259 0.41751,0.436851 0.0828,0.341427 0.11262,0.370575 0.44558,0.435968 0.32804,0.06442 0.36106,0.09533 0.4093,0.383191 0.0289,0.172212 0.0902,0.436617 0.13634,0.587566 0.0461,0.15095 0.0853,0.522425 0.087,0.8255 0.002,0.303076 0.0393,0.551047 0.0835,0.551047 0.0472,0 0.0568,0.156969 0.0232,0.381 -0.0439,0.292919 -0.0305,0.381322 0.0583,0.382393 0.0635,7.62e-4 -0.034,0.08649 -0.21664,0.1905 -0.18265,0.104009 -0.34727,0.235304 -0.36583,0.291765 -0.0186,0.05646 0.1023,0.238707 0.26858,0.404989 0.33232,0.332318 0.3728,0.556799 0.18254,1.012167 -0.12579,0.301061 -0.1031,0.385186 0.10388,0.385186 0.0689,0 0.34826,0.234421 0.62089,0.520935 0.42831,0.450123 0.49569,0.565212 0.49569,0.846667 0,0.179152 -0.01,0.320543 -0.0212,0.314202 -0.0116,-0.0063 -0.10689,-0.02804 -0.21166,-0.04822 z m 11.2395,-0.575248 c 0.058,-0.06985 0.18646,-0.125789 0.28553,-0.124308 0.1766,0.0026 0.17691,0.0051 0.0158,0.127 -0.2282,0.172596 -0.44519,0.170657 -0.30132,-0.0027 z m -90.190469,-2.88502 c -0.02678,-0.02678 -0.118852,-0.05897 -0.204611,-0.07155 -0.14748,-0.02162 -0.157132,-0.180188 -0.178218,-2.927788 -0.01947,-2.53711 -0.0053,-2.93093 0.112267,-3.110292 0.07401,-0.112951 0.113811,-0.259437 0.08845,-0.325525 -0.02536,-0.06609 -0.01277,-0.12016 0.02797,-0.12016 0.04075,0 0.0607,-0.06668 0.04434,-0.148167 -0.01636,-0.08149 -0.05723,-0.300567 -0.09083,-0.486833 -0.06099,-0.338134 -0.06117,-0.338267 -0.114277,-0.08467 -0.02925,0.1397 -0.05563,-0.269875 -0.05862,-0.910167 l -0.0054,-1.164166 0.517206,0.0013 c 0.321614,8.06e-4 0.473764,0.02882 0.402333,0.07408 -0.06957,0.04408 -0.08177,0.09325 -0.03094,0.124663 0.04616,0.02853 0.109471,0.222152 0.140679,0.430268 0.03121,0.208116 0.127516,0.465759 0.214015,0.572541 0.140062,0.172903 0.219769,0.191564 0.728389,0.17053 0.707389,-0.02925 0.925947,-0.204788 0.769861,-0.618309 -0.07705,-0.204117 -0.07267,-0.269191 0.02202,-0.327715 0.06499,-0.04016 0.165797,-0.05474 0.224025,-0.0324 0.158508,0.06083 0.677653,-0.227991 0.550769,-0.30641 -0.22603,-0.139694 2.038412,-0.181406 6.699393,-0.123407 2.692699,0.03351 4.879522,0.07722 4.859609,0.09713 -0.01991,0.01991 0.01487,0.158462 0.07731,0.307886 0.20835,0.49865 0.549407,1.818195 0.549407,2.125643 0,0.167001 -0.05521,0.435765 -0.122679,0.597253 -0.134994,0.323085 -0.324705,0.36786 -0.893321,0.210837 -0.326183,-0.09008 -1.931149,-0.343206 -2.553936,-0.4028 -0.33112,-0.03168 -0.508973,0.0166 -1.100667,0.298812 -0.388151,0.185132 -0.86487,0.40267 -1.059374,0.483418 -0.194504,0.08075 -0.632654,0.371104 -0.973667,0.645234 -0.351633,0.282669 -1.038963,0.703525 -1.587845,0.972248 -1.14353,0.559852 -1.614562,0.893833 -2.496699,1.770264 -0.65071,0.646501 -0.659457,0.651671 -1.221989,0.722305 -0.311623,0.03913 -0.632067,0.09627 -0.712098,0.126981 -0.200352,0.07688 -0.362996,0.639699 -0.247322,0.855837 0.118809,0.221998 -0.114408,0.366815 -0.597087,0.370765 -0.262991,0.0022 -1.329434,0.156531 -1.722705,0.249381 -0.0039,9.14e-4 -0.02896,-0.02024 -0.05574,-0.04702 z m -0.262129,-8.185147 c -0.02349,-0.05821 -0.0427,-0.01058 -0.0427,0.105834 0,0.116416 0.01922,0.164041 0.0427,0.105833 0.02349,-0.05821 0.02349,-0.153458 0,-0.211667 z m 99.511928,3.797293 c -1.13319,-0.09473 -1.14986,-0.09917 -1.94234,-0.51767 l -0.79934,-0.422122 -1.00147,-1.439334 c -0.9869,-1.418394 -1.33685,-1.982668 -1.33685,-2.155627 0,-0.06027 2.33667,-0.08804 7.40833,-0.08804 5.08535,0 7.40834,0.02769 7.40834,0.08829 0,0.234327 -0.84036,0.955979 -1.62098,1.392 -0.69719,0.389422 -0.9521,0.485121 -1.49242,0.560272 -0.35838,0.04985 -0.68165,0.109193 -0.71835,0.131878 -0.0367,0.02268 -0.19808,0.238491 -0.3586,0.479568 -0.26596,0.399442 -0.34653,0.457097 -0.90825,0.649989 -0.53764,0.184618 -0.63556,0.250842 -0.76632,0.518243 -0.13731,0.280776 -0.22325,0.332435 -1.02123,0.613833 -0.95923,0.338257 -1.01637,0.34204 -2.85052,0.188716 z m -22.96283,-0.791626 c -0.071,-0.08149 -0.16738,-0.262466 -0.2142,-0.402166 -0.0468,-0.1397 -0.12618,-0.245083 -0.17633,-0.234184 -0.0568,0.01235 -0.0913,-0.163172 -0.0915,-0.465667 -10e-4,-1.408752 -0.007,-1.45915 -0.18469,-1.45915 -0.0919,0 -0.30415,-0.05723 -0.47158,-0.127188 -0.2905,-0.12138 -0.30205,-0.141894 -0.25292,-0.449166 0.0343,-0.214371 0.0113,-0.379353 -0.0687,-0.493652 -0.11563,-0.165086 -0.10826,-0.16971 0.19213,-0.120504 0.27823,0.04558 0.31299,0.07917 0.31787,0.307218 0.008,0.364904 0.0931,0.459959 0.41248,0.459959 0.15453,0 0.32062,0.04777 0.36907,0.106158 0.0531,0.06401 0.0849,0.60173 0.0799,1.354272 -0.008,1.199574 -4.3e-4,1.256362 0.19102,1.460176 0.10957,0.116633 0.16038,0.212061 0.11292,0.212061 -0.0475,0 -0.14439,-0.06668 -0.21538,-0.148167 z m 44.98635,-1.575222 c -0.0738,-0.0889 -0.069,-0.139974 0.0199,-0.213755 0.0889,-0.07378 0.13997,-0.06904 0.21376,0.01987 0.0738,0.0889 0.069,0.139974 -0.0199,0.213755 -0.0889,0.07378 -0.13997,0.06904 -0.21376,-0.01987 z\"\n               id=\"path3276-2-3\" />\n            <path\n               style=\"fill:${colors[19]};stroke:${colors[19]};stroke-width:0.08466667;stroke-opacity:1\"\n               d=\"m 87.176433,84.607621 c 0.02878,-0.04657 0.09043,-0.08467 0.136994,-0.08467 0.04657,0 0.06112,0.0381 0.03234,0.08467 -0.02878,0.04657 -0.09043,0.08467 -0.136994,0.08467 -0.04657,0 -0.06112,-0.0381 -0.03234,-0.08467 z m 0.408215,-0.03931 c 0.01608,-0.04823 0.08003,-0.08769 0.142119,-0.08769 0.06209,0 0.126042,0.03946 0.142119,0.08769 0.01608,0.04823 -0.04788,0.08769 -0.142119,0.08769 -0.09424,0 -0.158196,-0.03946 -0.142119,-0.08769 z m 0.396119,0.08305 c 0,-0.01265 0.05209,-0.06624 0.115766,-0.119088 0.08704,-0.07223 0.137766,-0.06955 0.204413,0.0108 0.06695,0.08071 0.03861,0.109866 -0.115767,0.119087 -0.112426,0.0067 -0.204412,0.0019 -0.204412,-0.0108 z m 1.778,-0.04374 c 0,-0.04657 0.0381,-0.08467 0.08467,-0.08467 0.04657,0 0.08467,0.0381 0.08467,0.08467 0,0.04657 -0.0381,0.08467 -0.08467,0.08467 -0.04657,0 -0.08467,-0.0381 -0.08467,-0.08467 z m 22.479003,0 c -0.16326,-0.07015 -0.16268,-0.07298 0.0162,-0.07871 0.10202,-0.0033 0.20905,0.03215 0.23783,0.07871 0.0619,0.100142 -0.021,0.100142 -0.254,0 z m 0.42333,0 c 0.0288,-0.04657 0.0882,-0.08467 0.132,-0.08467 0.0438,0 0.0797,0.0381 0.0797,0.08467 0,0.04657 -0.0594,0.08467 -0.132,0.08467 -0.0726,0 -0.10845,-0.0381 -0.0797,-0.08467 z m 0.42889,-0.009 c 0.0568,-0.09196 0.26582,-0.09991 0.31999,-0.01217 0.0216,0.03493 -0.0521,0.06898 -0.16378,0.07568 -0.11164,0.0067 -0.18193,-0.02188 -0.15621,-0.0635 z m 0.62944,0.009 c -0.10944,-0.07073 -0.10721,-0.08225 0.0162,-0.08337 0.0787,-6.77e-4 0.16672,0.0368 0.1955,0.08337 0.0662,0.107154 -0.0459,0.107154 -0.21167,0 z m 44.20871,0.0042 c 0.0364,-0.109148 0.15251,-0.128753 0.16298,-0.02752 0.003,0.03376 -0.0394,0.07662 -0.0952,0.09525 -0.0559,0.01863 -0.0864,-0.01185 -0.0677,-0.06773 z m 1.3843,-0.0042 c 0.0288,-0.04657 0.0691,-0.08467 0.0897,-0.08467 0.0205,0 0.0373,0.0381 0.0373,0.08467 0,0.04657 -0.0404,0.08467 -0.0897,0.08467 -0.0493,0 -0.0661,-0.0381 -0.0373,-0.08467 z m 0.508,0 c -0.0288,-0.04657 -0.012,-0.08467 0.0373,-0.08467 0.0493,0 0.0897,0.0381 0.0897,0.08467 0,0.04657 -0.0168,0.08467 -0.0373,0.08467 -0.0205,0 -0.0609,-0.0381 -0.0897,-0.08467 z m 0.508,0 c -0.0288,-0.04657 -0.012,-0.08467 0.0373,-0.08467 0.0493,0 0.0897,0.0381 0.0897,0.08467 0,0.04657 -0.0168,0.08467 -0.0373,0.08467 -0.0205,0 -0.0609,-0.0381 -0.0897,-0.08467 z m 1.397,0.0053 c 0,-0.04367 0.0762,-0.07367 0.16933,-0.06665 0.0931,0.007 0.16933,0.04275 0.16933,0.0794 0,0.03666 -0.0762,0.06665 -0.16933,0.06665 -0.0931,0 -0.16933,-0.03573 -0.16933,-0.0794 z m 0.508,0 c 0,-0.04367 0.0762,-0.07367 0.16933,-0.06665 0.0931,0.007 0.16933,0.04275 0.16933,0.0794 0,0.03666 -0.0762,0.06665 -0.16933,0.06665 -0.0931,0 -0.16933,-0.03573 -0.16933,-0.0794 z m 0.97366,-0.0053 c -0.0288,-0.04657 -0.012,-0.08467 0.0373,-0.08467 0.0493,0 0.0897,0.0381 0.0897,0.08467 0,0.04657 -0.0168,0.08467 -0.0373,0.08467 -0.0205,0 -0.0609,-0.0381 -0.0897,-0.08467 z m 0.31769,-0.211666 c 9.3e-4,-0.186267 0.0183,-0.252498 0.0385,-0.14718 0.0203,0.105318 0.0195,0.257718 -0.002,0.338667 -0.0212,0.08095 -0.0378,-0.0052 -0.0368,-0.191487 z m 0.003,-2.370667 c 8.4e-4,-0.232833 0.0171,-0.318034 0.0365,-0.189336 0.0195,0.128698 0.0189,0.319198 -0.001,0.423333 -0.0201,0.104135 -0.036,-0.0012 -0.0354,-0.233997 z m -0.008,-0.931334 c 0.002,-0.1397 0.0207,-0.1866 0.0422,-0.104222 0.0215,0.08238 0.0201,0.196678 -0.003,0.254 -0.0232,0.05732 -0.0408,-0.01008 -0.039,-0.149778 z M 35.699099,52.887313 c -0.232834,-0.07106 -0.548451,-0.183004 -0.701373,-0.248776 -0.152921,-0.06577 -0.334119,-0.119584 -0.402661,-0.119584 -0.108878,0 -0.121886,-0.873152 -0.102961,-6.911255 l 0.02166,-6.911256 0.928518,0.01595 c 0.510685,0.0088 1.177435,0.06817 1.481667,0.132 0.469857,0.09858 1.80265,0.14049 3.728149,0.117235 0.162983,-0.002 0.941474,0.02422 1.72998,0.0582 1.307967,0.05637 1.47868,0.08209 1.947334,0.293477 0.282527,0.127433 0.685136,0.259659 0.894686,0.293837 0.20955,0.03418 0.4572,0.102597 0.550333,0.152042 0.09313,0.04945 0.58261,0.120032 1.087726,0.15686 0.771911,0.05628 0.981225,0.103537 1.312333,0.29629 0.873998,0.508793 1.320554,0.707285 1.591206,0.707285 0.175908,0 0.335938,0.06151 0.419495,0.16124 0.625791,0.746912 0.770694,0.85476 1.148441,0.85476 0.345493,0 0.700539,0.156541 0.853003,0.376093 0.03421,0.04927 0.06279,0.319221 0.0635,0.599901 0.0021,0.819658 0.338779,1.084952 0.963475,0.759151 0.133381,-0.06956 0.344802,-0.126478 0.469824,-0.126478 0.180599,0 0.248209,0.05779 0.328989,0.281178 0.05592,0.154648 0.101675,0.401419 0.101675,0.548381 0,0.447101 0.267774,0.552252 1.557331,0.611544 0.743709,0.03419 1.214378,0.09674 1.427169,0.189639 0.355743,0.155314 0.347959,0.140789 0.234865,0.438249 -0.109561,0.288166 -0.807895,0.594524 -1.525926,0.669421 -0.515796,0.0538 -0.576331,0.0835 -0.967309,0.474474 -0.370015,0.370015 -0.403755,0.433133 -0.299,0.559354 0.09424,0.113555 0.21064,0.132724 0.576589,0.09495 0.422285,-0.04358 0.477676,-0.02816 0.701063,0.195229 0.36265,0.36265 0.314782,0.548203 -0.307782,1.193067 -0.510415,0.528698 -0.550333,0.597526 -0.550333,0.948911 0,0.514411 -0.110805,0.590027 -0.687382,0.469089 -0.859247,-0.180229 -1.048318,-0.01078 -1.246868,1.117454 -0.125237,0.711645 -0.322832,0.980154 -0.697868,0.948324 -0.153794,-0.01305 -0.406424,-0.120446 -0.561401,-0.238653 -0.351181,-0.267858 -0.955148,-1.435299 -0.955148,-1.846257 0,-0.346634 -0.264071,-0.593613 -0.784538,-0.73376 -0.332573,-0.08955 -0.346342,-0.08426 -0.715405,0.27488 -0.206967,0.201404 -0.428603,0.465598 -0.492522,0.587097 -0.06392,0.121499 -0.233285,0.269399 -0.376369,0.328667 -0.225526,0.09342 -0.28194,0.08804 -0.42383,-0.04037 -0.09002,-0.08147 -0.224291,-0.330622 -0.298377,-0.553674 -0.196753,-0.592366 -0.432132,-0.79934 -1.151246,-1.012315 -0.344326,-0.101977 -0.759396,-0.228658 -0.92238,-0.281515 -0.162983,-0.05286 -0.719292,-0.100988 -1.236241,-0.106958 -0.516951,-0.006 -0.987929,-0.04053 -1.04662,-0.07681 -0.05869,-0.03627 -0.195587,-0.266916 -0.304213,-0.512541 -0.181499,-0.410398 -0.225498,-0.451319 -0.542933,-0.50495 -0.33463,-0.05653 -0.362402,-0.04248 -0.888361,0.449527 -0.514318,0.481119 -0.812781,0.628982 -1.181338,0.585251 -0.239037,-0.02836 -0.466013,0.418947 -0.544843,1.073743 -0.09618,0.798946 -0.164966,0.833545 -0.751728,0.37813 -0.629828,-0.488839 -0.901777,-1.106617 -0.980052,-2.226351 -0.05095,-0.728784 -0.06389,-0.766616 -0.369417,-1.079501 -0.174141,-0.178336 -0.364836,-0.324248 -0.423766,-0.324248 -0.05893,0 -0.260528,0.200025 -0.447995,0.4445 -0.187466,0.244475 -0.494303,0.635 -0.681858,0.867833 -0.718394,0.89182 -0.831576,1.27383 -0.542842,1.83218 0.07322,0.141591 0.112119,0.312179 0.08645,0.379085 -0.02568,0.06691 0.166437,0.503197 0.426915,0.969534 0.260478,0.466336 0.504755,0.970131 0.542839,1.119543 0.03808,0.149412 0.09287,0.34805 0.121743,0.441417 0.07244,0.234235 -0.236856,0.551383 -0.5312,0.544684 -0.126244,-0.0029 -0.420035,-0.06336 -0.652868,-0.134416 z M 34.471331,30.364507 c 7.9e-5,-3.11924 0.02327,-4.001242 0.105934,-4.029065 0.08422,-0.02835 0.08381,-0.06231 -0.002,-0.1663 -0.08043,-0.09748 -0.101944,-0.513088 -0.08467,-1.635772 l 0.02316,-1.505089 1.272477,-0.01602 c 0.768085,-0.0097 1.344801,-0.05472 1.454934,-0.113665 0.100352,-0.05371 0.438427,-0.09765 0.75128,-0.09765 h 0.568823 l 0.431576,0.431009 c 0.629554,0.628725 2.280484,1.606285 2.441243,1.445526 0.114577,-0.114578 0.01976,-0.243155 -0.300535,-0.407541 -0.819227,-0.420454 -2.005075,-1.299878 -2.005369,-1.487182 -5.2e-5,-0.03329 0.08166,-0.104273 0.181575,-0.157748 0.263754,-0.141156 1.443384,0.123563 1.935771,0.434405 0.572677,0.361528 1.135311,0.589442 1.452023,0.58819 0.155578,-5.93e-4 0.475584,0.02137 0.711124,0.04885 0.417948,0.04877 0.435775,0.04165 0.740613,-0.29577 0.301048,-0.333223 0.482132,-0.433094 0.482132,-0.265902 0,0.13062 0.939506,1.105371 1.190508,1.235168 0.241377,0.124821 0.923654,0.795345 0.925246,0.909307 5.08e-4,0.03592 0.101322,0.217043 0.224044,0.402488 0.188136,0.284293 0.214971,0.396707 0.171102,0.716762 -0.05716,0.417046 -0.49179,1.34807 -0.679867,1.456355 -0.06535,0.03763 -0.132596,0.141456 -0.149428,0.23073 -0.01683,0.08927 -0.07094,0.175746 -0.120245,0.192158 -0.0493,0.01641 -0.411252,-0.200326 -0.804333,-0.48164 -0.507928,-0.363505 -0.909584,-0.573388 -1.388342,-0.725466 -0.370507,-0.117692 -0.713407,-0.245466 -0.762,-0.283942 -0.04859,-0.03848 -0.434733,-0.09615 -0.858089,-0.128163 l -0.769737,-0.05821 -0.26743,0.304585 c -0.325365,0.370572 -0.339324,0.648509 -0.04622,0.920292 0.12743,0.118159 0.255268,0.361899 0.301543,0.574927 0.18998,0.874579 0.227278,0.762991 -0.49578,1.483262 -0.366915,0.3655 -0.780261,0.719749 -0.918546,0.787219 -0.138285,0.06747 -0.394303,0.256179 -0.568928,0.41935 -0.384987,0.359736 -0.432161,0.764324 -0.127,1.089212 0.23276,0.247806 0.251868,0.865511 0.03421,1.106016 -0.07703,0.08511 -0.140046,0.192733 -0.140046,0.239157 0,0.19737 -0.42416,0.453468 -1.016,0.613438 -0.513011,0.138662 -0.948126,0.176295 -2.264935,0.195895 l -1.629935,0.02426 z m 3.593998,-2.504722 c -0.129052,-0.422551 -0.277696,-0.706671 -0.450064,-0.860259 -0.243521,-0.216989 -0.340822,-0.09934 -0.116554,0.140926 0.09763,0.104591 0.20463,0.304466 0.237786,0.444166 0.03316,0.1397 0.0978,0.301625 0.143643,0.359834 0.135629,0.172194 0.247953,0.12084 0.185189,-0.08467 z m 118.223111,3.784709 -0.39933,-0.207906 0.0306,-0.401985 c 0.045,-0.590963 0.13147,-0.877928 0.35546,-1.178961 0.11007,-0.147937 0.29642,-0.535896 0.4141,-0.862133 l 0.21396,-0.593156 -0.19354,-0.407656 c -0.19216,-0.404765 -0.19713,-0.408102 -0.69965,-0.470874 -0.62776,-0.07841 -0.76373,-0.234877 -0.8311,-0.956306 -0.0805,-0.862183 0.0778,-1.208536 0.8052,-1.761395 0.19379,-0.147292 0.4335,-0.472748 0.63153,-0.857452 0.2725,-0.529352 0.3027,-0.63992 0.20646,-0.755884 -0.062,-0.07471 -0.20059,-0.135835 -0.30798,-0.135835 -0.25001,0 -0.46135,-0.211345 -0.46135,-0.461347 0,-0.25072 -0.16113,-0.380895 -0.54947,-0.443914 -0.2685,-0.04357 -0.30301,-0.07457 -0.25472,-0.228736 0.20248,-0.646418 0.13337,-0.826405 -0.50698,-1.320442 -0.36019,-0.277873 -0.46012,-0.416367 -0.58397,-0.809255 -0.154,-0.488542 -0.64784,-1.074762 -0.99939,-1.186341 -0.14508,-0.04604 -0.16457,-0.103534 -0.12325,-0.363497 0.027,-0.16984 0.0215,-0.353117 -0.0122,-0.407281 -0.0337,-0.05416 -0.36587,-0.218955 -0.73815,-0.366202 -0.37228,-0.147246 -0.77421,-0.360105 -0.89318,-0.47302 -0.249,-0.236342 -0.40386,-0.256082 -0.63536,-0.08099 -0.24569,0.185837 -0.53191,0.145566 -1.09568,-0.154167 -0.38182,-0.202998 -0.51527,-0.322207 -0.53727,-0.479944 -0.04,-0.286895 -0.14932,-0.400811 -0.44732,-0.466263 -0.15118,-0.03321 -0.28195,-0.131172 -0.32451,-0.243114 -0.0392,-0.103123 -0.2694,-0.290278 -0.51152,-0.4159 -0.35334,-0.183312 -0.62959,-0.245004 -1.39932,-0.312482 -1.50626,-0.132045 -1.68424,-0.265983 -0.98413,-0.740604 l 0.4059,-0.275167 h 3.89299 c 3.94528,0 4.14989,-0.01554 4.03818,-0.30665 -0.0752,-0.195869 0.66799,-0.152618 0.90467,0.05265 0.30772,0.266882 1.61349,0.222091 1.51007,-0.0518 -0.0156,-0.04136 0.0627,-0.08808 0.17411,-0.10383 0.19402,-0.02743 0.20007,-0.01331 0.14409,0.336765 -0.0443,0.277029 -0.13121,0.425385 -0.35937,0.613457 -0.2693,0.221976 -0.29584,0.280048 -0.25242,0.552235 0.0708,0.443498 -0.13754,0.952625 -0.71965,1.758974 -0.51175,0.70888 -0.73362,0.888546 -1.22888,0.995134 -0.31821,0.06848 -0.57803,0.329165 -0.50854,0.510245 0.0813,0.211863 0.75932,0.169274 1.13644,-0.07138 0.32017,-0.204311 0.61221,-0.492124 0.74875,-0.737912 0.0413,-0.07431 0.21684,-0.298964 0.39013,-0.499224 0.2729,-0.315379 0.33321,-0.349045 0.45069,-0.251549 0.27562,0.228746 0.44905,0.720345 0.47456,1.345154 0.0229,0.560875 0.007,0.63236 -0.17243,0.777692 -0.1087,0.08802 -0.26495,0.160043 -0.34722,0.160043 -0.22585,0 -0.34667,0.199649 -0.36526,0.60354 -0.0269,0.584566 0.24283,0.50622 0.92807,-0.269578 0.10054,-0.113829 0.28362,-0.276999 0.40683,-0.362599 l 0.22403,-0.155637 -0.0535,-1.029697 c -0.0472,-0.907635 -0.0831,-1.090029 -0.3034,-1.538658 l -0.24991,-0.508963 0.13314,-0.972704 c 0.0732,-0.534988 0.15309,-1.03938 0.17746,-1.120871 0.0412,-0.137773 0.27257,-0.148167 3.29826,-0.148167 h 3.25396 l 9e-5,5.355167 7e-5,5.355167 -2.00317,-0.02561 c -1.57581,-0.02014 -2.01782,-0.0021 -2.07183,0.08467 -0.0556,0.08926 -0.1015,0.08992 -0.24097,0.0035 -0.18603,-0.115298 -0.3438,-0.06314 -1.06052,0.350609 -0.33473,0.193233 -0.33843,0.200829 -0.31837,0.653183 0.0112,0.251722 0.0588,0.568137 0.10584,0.703144 0.047,0.135007 0.0855,0.430534 0.0855,0.656727 0,0.336411 -0.0397,0.445779 -0.21815,0.600933 -0.18866,0.164037 -0.21124,0.23574 -0.16704,0.530458 0.0356,0.237192 0.0126,0.391694 -0.0755,0.508265 -0.0696,0.09212 -0.12781,0.317589 -0.1293,0.501052 -0.003,0.341025 -0.12595,1.11815 -0.2641,1.665838 -0.0471,0.186867 -0.046,0.470449 0.003,0.728122 0.11402,0.601229 0.0474,0.787067 -0.28045,0.782196 -0.14592,-0.0022 -0.445,-0.0975 -0.66463,-0.211849 z m 7.18816,-8.436084 c -0.027,-0.06754 -0.0471,-0.04748 -0.0511,0.05115 -0.004,0.08925 0.0163,0.139259 0.0445,0.111125 0.0281,-0.02814 0.0311,-0.10116 0.007,-0.162278 z M 34.874301,22.836931 c -0.02678,-0.02678 -0.118852,-0.05897 -0.204611,-0.07155 -0.147366,-0.02161 -0.15715,-0.17791 -0.178255,-2.847727 l -0.02233,-2.824865 0.206286,-0.19128 c 0.113458,-0.105203 0.230102,-0.266314 0.259209,-0.358023 0.05473,-0.172425 0.348361,-0.296609 0.933832,-0.394934 0.440985,-0.07406 0.83484,-0.315725 0.959129,-0.588509 0.125869,-0.276252 0.124592,-0.294429 -0.02068,-0.294429 -0.06594,0 -0.240589,0.1524 -0.388115,0.338666 -0.202634,0.255847 -0.328382,0.338667 -0.514206,0.338667 -0.135287,0 -0.439155,0.0734 -0.675262,0.163116 -0.308837,0.117348 -0.439315,0.135165 -0.465034,0.0635 -0.01966,-0.05479 -0.07332,-0.499666 -0.119232,-0.988616 -0.04592,-0.48895 -0.108938,-1.069975 -0.14005,-1.291167 l -0.05656,-0.402166 0.540674,0.0013 c 0.334713,8.03e-4 0.496916,0.02902 0.425803,0.07408 -0.06957,0.04408 -0.08177,0.09325 -0.03094,0.124663 0.04616,0.02853 0.109471,0.222152 0.140679,0.430268 0.03121,0.208116 0.127503,0.465759 0.213986,0.572541 0.141215,0.174359 0.218412,0.191705 0.75736,0.170175 0.506101,-0.02022 0.600117,-0.0025 0.600117,0.112889 0,0.07527 0.0449,0.121895 0.09978,0.103601 0.111768,-0.03726 0.166944,-0.127721 0.375618,-0.61585 0.07963,-0.186266 0.233453,-0.459445 0.341833,-0.607063 0.137466,-0.187234 0.165309,-0.279092 0.09208,-0.303767 -0.05774,-0.01946 0.330816,-0.0631 0.863453,-0.09699 0.962156,-0.06122 10.793105,0.02718 10.723854,0.09643 -0.01991,0.01991 0.01487,0.158462 0.07731,0.307886 0.20835,0.49865 0.549407,1.818195 0.549407,2.125643 0,0.167001 -0.05521,0.435765 -0.122679,0.597253 -0.134994,0.323085 -0.324705,0.36786 -0.893321,0.210837 -0.326183,-0.09008 -1.931149,-0.343206 -2.553936,-0.4028 -0.33112,-0.03168 -0.508973,0.0166 -1.100667,0.298812 -0.388151,0.185132 -0.86487,0.40267 -1.059374,0.483418 -0.194504,0.08075 -0.632654,0.371104 -0.973667,0.645234 -0.351633,0.282669 -1.038963,0.703525 -1.587845,0.972248 -1.14353,0.559852 -1.614562,0.893833 -2.496699,1.770264 -0.65071,0.646501 -0.659457,0.651671 -1.221989,0.722305 -0.311623,0.03913 -0.632067,0.09627 -0.712098,0.126981 -0.200352,0.07688 -0.362996,0.639699 -0.247322,0.855837 0.118809,0.221998 -0.114408,0.366815 -0.597087,0.370765 -0.262991,0.0022 -1.329434,0.156531 -1.722705,0.249381 -0.0039,9.14e-4 -0.02896,-0.02024 -0.05574,-0.04702 z M 134.1241,18.449077 c -1.13319,-0.09473 -1.14986,-0.09917 -1.94234,-0.51767 l -0.79934,-0.422122 -1.00147,-1.439334 c -0.9869,-1.418394 -1.33685,-1.982668 -1.33685,-2.155627 0,-0.06027 2.33667,-0.08804 7.40833,-0.08804 5.08535,0 7.40834,0.02769 7.40834,0.08829 0,0.234327 -0.84036,0.955979 -1.62098,1.392 -0.69719,0.389422 -0.9521,0.485121 -1.49242,0.560272 -0.35838,0.04985 -0.68165,0.109193 -0.71835,0.131878 -0.0367,0.02268 -0.19808,0.238491 -0.3586,0.479568 -0.26596,0.399442 -0.34653,0.457097 -0.90825,0.649989 -0.53764,0.184618 -0.63556,0.250842 -0.76632,0.518243 -0.13731,0.280776 -0.22325,0.332435 -1.02123,0.613833 -0.95923,0.338257 -1.01637,0.34204 -2.85052,0.188716 z\"\n               id=\"path3274-7-4\" />\n            <path\n               style=\"fill:${colors[14]};stroke:${colors[19]};stroke-width:0.08466667;stroke-opacity:1\"\n               d=\"m 34.471432,84.601574 c 0,-0.134893 0.222892,-0.332619 0.374952,-0.332619 0.08547,0 0.133048,0.07569 0.133048,0.211666 0,0.178741 -0.03951,0.211667 -0.254,0.211667 -0.1397,0 -0.254,-0.04082 -0.254,-0.09071 z m 7.535334,-0.131536 c 0,-0.202441 0.02294,-0.217662 0.2574,-0.17077 0.141571,0.02831 1.008346,0.05778 1.926167,0.06547 0.917821,0.0077 1.592566,0.02962 1.499433,0.04873 -0.379234,0.07779 -0.429614,0.111623 -0.293961,0.197411 0.07928,0.05014 -0.514624,0.07929 -1.632206,0.08011 l -1.756833,0.0013 z m 4.022266,0.138553 c -0.02966,-0.04799 0.0043,-0.06219 0.07967,-0.03328 0.146679,0.05629 0.173515,0.116972 0.05173,0.116972 -0.04382,0 -0.102948,-0.03766 -0.131397,-0.0837 z m 41.147401,-9.7e-4 c 0.02878,-0.04657 0.06913,-0.08467 0.08966,-0.08467 0.02053,0 0.03734,0.0381 0.03734,0.08467 0,0.04657 -0.04035,0.08467 -0.08966,0.08467 -0.04931,0 -0.06612,-0.0381 -0.03734,-0.08467 z m 0.381,-0.01814 c 0,-0.03659 0.0762,-0.06652 0.169334,-0.06652 0.09313,0 0.169333,0.02994 0.169333,0.06652 0,0.03659 -0.0762,0.06652 -0.169333,0.06652 -0.09313,0 -0.169334,-0.02993 -0.169334,-0.06652 z m 0.478749,-0.003 c 0.02159,-0.03493 0.0919,-0.0635 0.156251,-0.0635 0.06435,0 0.134667,0.02858 0.156252,0.0635 0.02159,0.03493 -0.04873,0.0635 -0.156252,0.0635 -0.107523,0 -0.177836,-0.02858 -0.156251,-0.0635 z m 24.201588,0.02116 c -0.16326,-0.07015 -0.16268,-0.07298 0.0162,-0.07871 0.10202,-0.0033 0.20905,0.03215 0.23783,0.07871 0.0619,0.100142 -0.021,0.100142 -0.254,0 z m 0.43205,-0.01411 c 0.024,-0.0388 0.0795,-0.07055 0.12328,-0.07055 0.0438,0 0.0797,0.03175 0.0797,0.07055 0,0.03881 -0.0555,0.07056 -0.12328,0.07056 -0.0678,0 -0.10365,-0.03175 -0.0797,-0.07056 z m 0.45695,-0.004 c 0,-0.03659 0.0549,-0.06652 0.122,-0.06652 0.0671,0 0.14051,0.02994 0.16312,0.06652 0.0226,0.03659 -0.0323,0.06652 -0.12201,0.06652 -0.0897,0 -0.16311,-0.02993 -0.16311,-0.06652 z m 0.635,0.01814 c -0.13804,-0.05932 -0.14288,-0.07386 -0.0262,-0.07871 0.0787,-0.0033 0.16672,0.03215 0.1955,0.07871 0.0602,0.09736 0.0572,0.09736 -0.16933,0 z m 44.15367,0 c 0,-0.04657 0.0594,-0.08467 0.13199,-0.08467 0.0726,0 0.10845,0.0381 0.0797,0.08467 -0.0288,0.04657 -0.0882,0.08467 -0.13199,0.08467 -0.0438,0 -0.0797,-0.0381 -0.0797,-0.08467 z m 1.397,0 c 0.0288,-0.04657 0.0691,-0.08467 0.0897,-0.08467 0.0205,0 0.0373,0.0381 0.0373,0.08467 0,0.04657 -0.0404,0.08467 -0.0897,0.08467 -0.0493,0 -0.0661,-0.0381 -0.0373,-0.08467 z m 0.508,0 c -0.0288,-0.04657 -0.012,-0.08467 0.0373,-0.08467 0.0493,0 0.0897,0.0381 0.0897,0.08467 0,0.04657 -0.0168,0.08467 -0.0373,0.08467 -0.0205,0 -0.0609,-0.0381 -0.0897,-0.08467 z m 0.508,0 c -0.0288,-0.04657 -0.012,-0.08467 0.0373,-0.08467 0.0493,0 0.0897,0.0381 0.0897,0.08467 0,0.04657 -0.0168,0.08467 -0.0373,0.08467 -0.0205,0 -0.0609,-0.0381 -0.0897,-0.08467 z m 1.905,-0.01276 c 0,-0.03376 0.0762,-0.05565 0.16933,-0.04863 0.0931,0.007 0.16933,0.04038 0.16933,0.07414 0,0.03376 -0.0762,0.05565 -0.16933,0.04863 -0.0931,-0.007 -0.16933,-0.04038 -0.16933,-0.07414 z m 0.97366,0.01276 c -0.0288,-0.04657 -0.012,-0.08467 0.0373,-0.08467 0.0493,0 0.0897,0.0381 0.0897,0.08467 0,0.04657 -0.0168,0.08467 -0.0373,0.08467 -0.0205,0 -0.0609,-0.0381 -0.0897,-0.08467 z m 0.31769,-0.211666 c 9.3e-4,-0.186267 0.0183,-0.252498 0.0385,-0.14718 0.0203,0.105318 0.0195,0.257718 -0.002,0.338667 -0.0212,0.08095 -0.0378,-0.0052 -0.0368,-0.191487 z M 34.471425,30.378619 c 0,-2.211917 0.02309,-4.021667 0.05132,-4.021667 0.02822,0 0.128665,0.09834 0.223205,0.218523 0.106937,0.135949 0.229044,0.203579 0.323136,0.178973 0.08319,-0.02175 0.273579,0.03485 0.423098,0.125772 0.366568,0.222924 0.523146,0.07072 0.179199,-0.174191 -0.138834,-0.09886 -0.300099,-0.179744 -0.358365,-0.179744 -0.05827,0 -0.233359,-0.09719 -0.389096,-0.215975 -0.155737,-0.118787 -0.283742,-0.185462 -0.284455,-0.148167 -7.13e-4,0.0373 -0.03823,0.01066 -0.08337,-0.05919 -0.104338,-0.16145 -0.11104,-3.021707 -0.0072,-3.085864 0.04259,-0.02632 0.09022,-0.01334 0.105834,0.02884 0.041,0.110738 0.622318,0.13897 1.237069,0.06008 0.381143,-0.04891 0.566467,-0.03903 0.655615,0.03495 0.09873,0.08194 0.183587,0.075 0.412791,-0.03377 0.189242,-0.0898 0.517168,-0.137058 0.953052,-0.137343 0.664282,-4.24e-4 0.664667,-3.39e-4 1.003204,0.341631 0.371449,0.375178 0.941885,0.750614 1.88355,1.239673 0.578935,0.300671 0.621721,0.310479 0.758372,0.173828 0.199812,-0.199812 0.216096,-0.186756 -1.555374,-1.247069 -0.481661,-0.288298 -0.772927,-0.64345 -0.638198,-0.778178 0.130534,-0.130534 1.452648,0.167725 1.755515,0.39603 0.437525,0.329812 1.471277,0.73135 1.644364,0.638717 0.08315,-0.0445 0.172215,-0.05986 0.197931,-0.03415 0.02572,0.02572 0.189847,0.07903 0.364733,0.118473 0.384016,0.08661 0.685156,-0.0451 0.988074,-0.432159 l 0.206867,-0.264326 0.182143,0.294715 c 0.201811,0.326536 0.890208,0.992581 1.025892,0.992581 0.138216,0 0.758839,0.678135 1.080234,1.180337 0.256415,0.400668 0.288321,0.508046 0.244958,0.824409 -0.06275,0.457803 -0.522828,1.381921 -0.687999,1.381921 -0.06829,0 -0.148121,0.09543 -0.177394,0.212066 l -0.05323,0.212067 -0.392887,-0.286618 c -0.810031,-0.59093 -1.051196,-0.724038 -1.708302,-0.942874 -0.37084,-0.123501 -0.674253,-0.259518 -0.674253,-0.30226 0,-0.04274 -0.09117,-0.07771 -0.202608,-0.07771 -0.111435,0 -0.224539,-0.05715 -0.251343,-0.127 -0.03874,-0.10097 -0.218479,-0.126882 -0.876892,-0.126422 l -0.828157,5.93e-4 -0.196471,0.288541 c -0.173114,0.254239 -0.185752,0.327145 -0.106306,0.613255 0.04959,0.178592 0.09038,0.429488 0.09064,0.557546 2.63e-4,0.128059 0.03395,0.232834 0.07487,0.232834 0.11289,0 0.24477,0.411676 0.298352,0.931333 l 0.04801,0.465667 -0.541433,0.510784 c -0.297789,0.280932 -0.649635,0.564736 -0.781881,0.630675 -0.132246,0.06594 -0.383323,0.253393 -0.557948,0.416564 -0.275546,0.257474 -0.3175,0.346825 -0.3175,0.676203 0,0.274369 0.05155,0.4344 0.186055,0.577572 0.213302,0.22705 0.239771,0.711605 0.05135,0.940111 -0.06474,0.07852 -0.170425,0.248081 -0.234853,0.376809 -0.08967,0.179163 -0.247657,0.277405 -0.673681,0.418913 -0.478369,0.158895 -0.791416,0.189347 -2.228708,0.216804 -0.944843,0.01803 -1.672167,0.06599 -1.672167,0.11024 0,0.04307 -0.0381,0.07831 -0.08467,0.07831 -0.05526,0 -0.08467,-1.397 -0.08467,-4.021666 z m 4.192354,-2.245858 c 0.02952,-0.04777 -0.05395,-0.124637 -0.185503,-0.170811 -0.209315,-0.07347 -0.450851,-0.399895 -0.450851,-0.609306 0,-0.156752 -0.37727,-0.567806 -0.609381,-0.663949 -0.185219,-0.07672 -0.270854,-0.07804 -0.343596,-0.0053 -0.112313,0.112314 -0.02542,0.227494 0.289683,0.383982 0.112522,0.05588 0.207835,0.188386 0.22133,0.307694 0.04836,0.427506 0.109522,0.590547 0.221543,0.590547 0.06326,0 0.162451,0.05715 0.220421,0.127 0.119602,0.144112 0.555118,0.171586 0.636354,0.04014 z m 0.802979,-0.124809 c 0,-0.06985 -0.03585,-0.127 -0.07967,-0.127 -0.106763,0 -0.183227,0.132214 -0.115584,0.199857 0.09535,0.09535 0.195253,0.05807 0.195253,-0.07286 z m 0.677334,-0.08467 c 0,-0.06985 -0.0381,-0.127 -0.08467,-0.127 -0.04657,0 -0.08467,0.05715 -0.08467,0.127 0,0.06985 0.0381,0.127 0.08467,0.127 0.04657,0 0.08467,-0.05715 0.08467,-0.127 z m -3.599257,-1.004854 c 0.153466,-0.112219 0.152838,-0.118855 -0.02002,-0.211364 -0.204472,-0.10943 -0.444725,-0.04592 -0.444725,0.117555 0,0.09687 0.108213,0.181681 0.258984,0.202979 0.02602,0.0037 0.118616,-0.04545 0.205759,-0.10917 z m 119.811145,4.665295 c -0.38749,-0.220869 -0.43761,-0.445211 -0.25261,-1.130531 0.10947,-0.405472 0.37272,-0.78999 0.37272,-0.544402 0,0.05568 0.0615,0.08892 0.13676,0.07387 0.082,-0.01643 0.19502,-0.213612 0.28243,-0.493042 0.0801,-0.256116 0.23117,-0.599016 0.33565,-0.762 l 0.18997,-0.296333 -0.0476,0.465667 c -0.0787,0.770279 -0.19591,1.501336 -0.25647,1.599324 -0.0314,0.05074 -0.0182,0.302369 0.0293,0.559179 0.0475,0.25681 0.0645,0.523906 0.0377,0.593545 -0.0701,0.182761 -0.44455,0.153241 -0.82792,-0.06527 z m -0.69985,-4.211365 c -0.24292,-0.09787 -0.33124,-0.284706 -0.39274,-0.830789 -0.0884,-0.785169 0.001,-0.965176 0.87834,-1.76241 0.16062,-0.146001 0.4349,-0.54411 0.60953,-0.884685 l 0.3175,-0.61923 v 0.858718 c 0,0.737546 -0.022,0.87433 -0.1559,0.969353 -0.28826,0.204567 -0.3521,0.461568 -0.3521,1.417401 v 0.936899 l -0.35983,-0.0054 c -0.19791,-0.003 -0.44307,-0.0389 -0.5448,-0.07989 z m 7.76263,-3.301409 c 0,-0.05174 -0.39512,-0.08467 -1.016,-0.08467 -0.5588,0 -1.01575,-0.02858 -1.01544,-0.0635 0,-0.03493 0.0763,-0.1778 0.16877,-0.3175 0.0925,-0.1397 0.16847,-0.35411 0.16878,-0.476467 0,-0.122356 0.0642,-0.274756 0.14208,-0.338667 0.0778,-0.06391 0.30565,-0.369297 0.50624,-0.678639 0.33565,-0.517605 0.39143,-0.564987 0.69993,-0.594406 0.18436,-0.01758 0.37565,-0.01848 0.42509,-0.002 0.11937,0.03979 0.12452,2.640517 0.005,2.640517 -0.0466,0 -0.0847,-0.0381 -0.0847,-0.08467 z m 0.0508,-0.897467 c -0.041,-0.1068 -0.0818,-0.121449 -0.14949,-0.05372 -0.0512,0.05122 -0.0678,0.159215 -0.0368,0.239982 0.041,0.106799 0.0818,0.121448 0.14949,0.05372 0.0512,-0.05122 0.0678,-0.159215 0.0368,-0.239982 z m -3.16624,-0.544233 c -0.0793,-0.141002 -0.22839,-0.27809 -0.33126,-0.30464 -0.28068,-0.07245 -0.3523,-0.205296 -0.38023,-0.705338 l -0.0254,-0.454874 0.87714,-0.0072 c 0.85625,-0.0071 0.88097,-0.0019 1.03717,0.217512 0.088,0.123605 0.16002,0.281775 0.16002,0.351488 0,0.200932 -0.8542,1.159442 -1.03326,1.159442 -0.0898,0 -0.22316,-0.112358 -0.30418,-0.256366 z M 34.533168,22.749798 c -0.03396,-0.03395 -0.06174,-1.329575 -0.06174,-2.879157 0,-2.685963 0.0076,-2.822754 0.163169,-2.931709 0.08974,-0.06286 0.209657,-0.216317 0.266474,-0.341019 0.106043,-0.232739 0.348703,-0.345459 0.967357,-0.449357 0.440985,-0.07406 0.83484,-0.315725 0.959129,-0.588509 0.125869,-0.276252 0.124592,-0.294429 -0.02068,-0.294429 -0.06594,0 -0.240589,0.1524 -0.388115,0.338666 -0.202634,0.255847 -0.328382,0.338667 -0.514206,0.338667 -0.135287,0 -0.436886,0.07254 -0.670219,0.161199 l -0.424241,0.161199 v -0.410202 c 0,-0.225611 -0.03995,-0.434893 -0.08878,-0.46507 -0.0607,-0.03752 -0.06137,-0.08789 -0.0021,-0.159286 0.100689,-0.121323 0.05303,-0.645774 -0.06537,-0.719415 -0.0443,-0.02755 -0.107849,-0.269167 -0.141224,-0.536925 l -0.06068,-0.486833 0.496589,0.0133 0.496589,0.0133 -0.423334,0.05806 -0.423333,0.05806 0.35822,0.0133 c 0.317554,0.01179 0.363967,0.03973 0.408837,0.246134 0.152202,0.700125 0.255065,0.901357 0.542129,1.060578 0.372903,0.206831 0.998091,0.269811 1.266054,0.127538 0.112515,-0.05974 0.250032,-0.241966 0.305592,-0.404949 0.06793,-0.19927 0.146518,-0.288185 0.239927,-0.271455 0.122946,0.02202 0.184227,-0.118858 0.148934,-0.342378 -0.0055,-0.03492 0.06421,-0.13774 0.154952,-0.228479 0.115563,-0.115563 0.312101,-0.174167 0.656167,-0.195657 0.486289,-0.03037 0.484854,-0.03096 -0.143812,-0.05886 l -0.635,-0.02818 0.719667,-0.07109 c 0.395816,-0.0391 3.043767,-0.04315 5.884333,-0.009 l 5.164667,0.0621 -2.963333,0.04398 -2.963334,0.04398 2.89471,0.01952 2.89471,0.01952 0.206414,0.6985 c 0.369829,1.251496 0.419375,1.498517 0.371762,1.853498 -0.0728,0.542792 -0.20918,0.631057 -0.77826,0.503702 -0.659117,-0.147504 -2.012636,-0.352424 -2.671125,-0.404403 -0.521344,-0.04115 -0.58215,-0.02616 -1.058334,0.26097 -0.277866,0.167547 -0.56236,0.305101 -0.63221,0.305676 -0.226433,0.0019 -0.962927,0.389338 -1.399916,0.736506 -0.234437,0.18625 -0.920237,0.578964 -1.524,0.872698 -0.603763,0.293733 -1.345401,0.723955 -1.648084,0.956047 -0.557788,0.427703 -1.277073,1.133684 -1.499343,1.471613 -0.127877,0.194417 -0.26327,0.235524 -1.069068,0.324582 -0.468921,0.05183 -0.500597,0.07021 -0.62213,0.36108 -0.07335,0.175542 -0.108715,0.425638 -0.08279,0.585403 0.05284,0.325597 0.114674,0.30271 -1.228334,0.454613 -0.496832,0.0562 -0.98078,0.08192 -1.075441,0.05717 -0.09466,-0.02475 -0.184255,-0.0086 -0.1991,0.03596 -0.01484,0.04453 -0.05477,0.05319 -0.08873,0.01923 z M 155.79877,22.147676 c -0.20955,-0.07255 -0.39303,-0.141895 -0.40773,-0.154103 -0.0147,-0.01221 0.0154,-0.178776 0.067,-0.370152 0.0822,-0.305224 0.11777,-0.341915 0.28973,-0.298756 0.12353,0.031 0.2475,-0.0023 0.3352,-0.08997 0.16814,-0.168141 0.16789,-0.153358 0.0113,-0.669699 -0.0693,-0.228592 -0.12609,-0.449876 -0.12609,-0.491742 0,-0.103684 0.76611,-0.852418 0.81854,-0.799981 0.023,0.02301 0.004,0.112469 -0.0421,0.198789 -0.0462,0.08632 -0.11075,0.463555 -0.14344,0.8383 -0.0504,0.57825 -0.0378,0.702936 0.0832,0.823973 0.0784,0.07844 0.1948,0.142617 0.25857,0.142617 0.37662,0 0.15512,0.615812 -0.30613,0.85113 -0.37508,0.191351 -0.34393,0.190623 -0.83792,0.01959 z m -1.19431,-1.759431 c -0.16312,-0.08866 -0.25689,-0.249094 -0.35966,-0.615352 -0.14671,-0.522873 -0.4789,-0.944474 -0.92658,-1.175982 -0.2142,-0.110765 -0.2403,-0.1622 -0.19565,-0.385473 0.0283,-0.14171 0.0515,-0.307474 0.0515,-0.368365 0,-0.06089 0.0738,-0.134136 0.16402,-0.162767 0.0902,-0.02863 0.27566,-0.220612 0.41211,-0.426623 0.19618,-0.296176 0.27033,-0.542467 0.35429,-1.176837 0.0584,-0.441249 0.0828,-0.895333 0.0543,-1.009077 -0.10181,-0.405641 -0.57398,-0.384649 -0.71922,0.03197 l -0.0873,0.25054 h -0.7918 c -0.50296,0 -0.82887,-0.03706 -0.8934,-0.1016 -0.0559,-0.05588 -0.1016,-0.319858 -0.1016,-0.586619 0,-0.328037 -0.0431,-0.528081 -0.13305,-0.618066 -0.12095,-0.120953 -0.0251,-0.133048 1.05435,-0.133048 0.67829,0 1.27444,-0.03966 1.39041,-0.0925 0.16711,-0.07614 0.27844,-0.05427 0.62961,0.123679 0.53555,0.271384 0.69934,0.434049 0.69934,0.694533 0,0.158344 0.045,0.205619 0.19549,0.205619 0.69349,0 0.63337,0.659486 -0.16141,1.770506 -0.54922,0.767759 -0.7707,0.952086 -1.27413,1.06043 -0.31821,0.06848 -0.57803,0.329165 -0.50854,0.510245 0.0594,0.154748 0.81353,0.184682 0.9601,0.03811 0.13552,-0.135514 0.22376,0.05099 0.1178,0.248971 -0.0927,0.173106 0.0198,0.318133 0.39873,0.514217 0.36644,0.189631 0.77072,-0.130768 0.64899,-0.51433 -0.0413,-0.130261 0.012,-0.237252 0.20698,-0.415362 0.14446,-0.131949 0.26266,-0.315533 0.26266,-0.407965 0,-0.17385 -0.20668,-0.434154 -0.34471,-0.434154 -0.13704,0 -0.0795,-0.203173 0.13024,-0.459721 0.17655,-0.215977 0.22075,-0.233133 0.34181,-0.132664 0.27895,0.231506 0.45235,0.72056 0.47797,1.347984 0.0229,0.560875 0.007,0.63236 -0.17243,0.777692 -0.1087,0.08802 -0.26372,0.160043 -0.34447,0.160043 -0.0808,0 -0.21085,0.07073 -0.28909,0.157185 -0.0901,0.09957 -0.21654,0.142983 -0.34492,0.118442 -0.30375,-0.05807 -0.67021,0.522649 -0.62552,0.991258 0.0363,0.380722 0.0327,0.383515 -0.27719,0.215075 z m -2.48064,-3.060927 c -0.27497,-0.115251 -0.57125,-0.300179 -0.65838,-0.410952 -0.23261,-0.295718 -0.45615,-0.337101 -0.71616,-0.13258 -0.2856,0.224661 -0.40625,0.220084 -0.90793,-0.03444 -0.52661,-0.267172 -0.64658,-0.369404 -0.64658,-0.550965 0,-0.11433 0.0987,-0.158869 0.44255,-0.199586 0.24341,-0.02883 0.54666,-0.129385 0.67391,-0.22346 0.30637,-0.226515 0.38122,-0.21713 0.66154,0.08295 0.23138,0.247704 0.25718,0.254 1.04059,0.254 0.6673,0 0.83716,0.0276 1.00319,0.163023 l 0.19989,0.163022 -0.20346,0.375521 c -0.12147,0.224195 -0.18438,0.44851 -0.1561,0.556645 0.0619,0.236484 -0.0867,0.227735 -0.73306,-0.04318 z m -3.29287,-2.467437 c -0.17243,-0.176588 -0.31352,-0.377661 -0.31352,-0.446827 0,-0.06917 -0.0593,-0.210436 -0.1318,-0.313931 l -0.1318,-0.188172 h 1.22629 1.2263 l -0.28713,0.476814 c -0.4283,0.711263 -0.52374,0.793186 -0.92412,0.793186 -0.29439,0 -0.40104,-0.05156 -0.66422,-0.32107 z m -1.16508,0.06939 c -0.0726,-0.04246 -0.5869,-0.117614 -1.143,-0.167011 -1.05807,-0.09398 -1.3921,-0.154502 -1.3921,-0.252217 0,-0.03217 0.17257,-0.180127 0.38347,-0.328792 0.37255,-0.262594 0.40891,-0.270298 1.27571,-0.270298 0.83166,0 0.88884,0.0107 0.84219,0.157653 -0.0275,0.08671 0.0257,0.334358 0.11829,0.550333 0.17004,0.396693 0.15531,0.450727 -0.0846,0.310332 z\"\n               id=\"path3272-0-8\" />\n          </g>\n        </g>\n      </g>\n    </g>\n  </g>\n  <rect\n     style=\"fill:${colorGlaciar};fill-opacity:1;fill-rule:nonzero;stroke:${colors[19]};stroke-width:2.64583349;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n     id=\"rect1057-5\"\n     width=\"215.14111\"\n     height=\"28.343641\"\n     x=\"11.936151\"\n     y=\"92.84655\"\n     rx=\"16.804998\"\n     ry=\"18.895773\" />\n  <g\n     aria-label=\"Glaciar de la maladeta\"\n     style=\"font-style:normal;font-weight:normal;font-size:10.58333302px;line-height:1.25;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:${colors[19]};fill-opacity:1;stroke:${colors[19]};stroke-width:0.26458332;stroke-opacity:1\"\n     id=\"text1016-8\"\n     transform=\"matrix(1.8895761,0,0,1.8895761,-53.049209,-95.604459)\">\n    <path\n       d=\"m 48.620395,107.40125 q 0.197556,0 0.296334,0.0564 0.105833,0.0564 0.105833,0.21872 0,0.32455 -0.381,0.43039 l -0.197556,0.93133 q -0.529166,0.254 -0.874888,0.34572 -0.345723,0.0917 -0.769056,0.0917 -0.303389,0 -0.578556,-0.0564 -0.268111,-0.0564 -0.550333,-0.1905 -0.282222,-0.14111 -0.451555,-0.43039 -0.169334,-0.29633 -0.169334,-0.71966 0,-0.17639 0.04939,-0.43745 l 0.105833,-0.50094 q 0.169334,-0.80434 0.839612,-1.38995 0.670277,-0.58561 1.580444,-0.58561 0.578556,0 0.980722,0.22578 0.148167,-0.22578 0.331611,-0.22578 0.112889,0 0.183445,0.0776 0.07761,0.0706 0.07761,0.18345 0,0.0705 -0.02822,0.20461 l -0.119945,0.55033 q -0.112889,0.46567 -0.451555,0.46567 -0.119945,0 -0.183445,-0.0564 -0.05644,-0.0635 -0.07055,-0.11994 -0.0071,-0.0564 -0.01411,-0.19756 -0.01411,-0.18344 -0.239889,-0.28927 -0.225778,-0.11289 -0.613834,-0.11289 -0.585611,0 -1.023055,0.35277 -0.430389,0.34573 -0.543278,0.91723 -0.141111,0.64911 -0.141111,0.83255 0,0.381 0.296333,0.59267 0.296334,0.20461 0.839611,0.20461 0.486834,0 0.931334,-0.17639 l 0.09878,-0.48683 h -0.6985 q -0.218722,0 -0.310444,-0.0635 -0.09172,-0.0635 -0.09172,-0.21872 0,-0.16228 0.119944,-0.28928 0.119945,-0.13406 0.430389,-0.13406 z\"\n       style=\"font-style:italic;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:7.05555534px;font-family:FreeMono;-inkscape-font-specification:'FreeMono Bold Italic';fill:${colors[19]};fill-opacity:1;stroke:${colors[19]};stroke-width:0.26458332;stroke-opacity:1\"\n       id=\"path1018-2\" />\n    <path\n       d=\"m 50.564972,105.62325 q -0.105833,-0.0564 -0.105833,-0.22578 0,-0.16933 0.127,-0.29633 0.127,-0.127 0.430389,-0.127 h 1.255889 l -0.783167,3.69711 h 0.853722 q 0.197556,0 0.296334,0.0564 0.105833,0.0494 0.105833,0.22577 0,0.15523 -0.127,0.28928 -0.119945,0.13406 -0.423333,0.13406 H 49.77475 q -0.218722,0 -0.310444,-0.0635 -0.09172,-0.0635 -0.09172,-0.21872 0,-0.16934 0.127,-0.29634 0.127,-0.127 0.423334,-0.127 h 0.860778 l 0.635,-2.99155 h -0.557389 q -0.1905,0 -0.296334,-0.0564 z\"\n       style=\"font-style:italic;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:7.05555534px;font-family:FreeMono;-inkscape-font-specification:'FreeMono Bold Italic';fill:${colors[19]};fill-opacity:1;stroke:${colors[19]};stroke-width:0.26458332;stroke-opacity:1\"\n       id=\"path1020-2\" />\n    <path\n       d=\"m 57.109771,108.7277 q 0.09878,0.0494 0.09878,0.21872 0,0.16933 -0.127,0.30339 -0.127,0.127 -0.423333,0.127 h -0.8255 l 0.03528,-0.16228 q -0.585611,0.27517 -1.227667,0.27517 -0.472722,0 -0.783167,-0.22578 -0.303388,-0.23283 -0.303388,-0.57856 0,-0.0988 0.04939,-0.23989 0.04939,-0.14816 0.1905,-0.34572 0.148167,-0.19755 0.352778,-0.35983 0.211667,-0.16228 0.5715,-0.27517 0.366889,-0.11994 0.818445,-0.11994 0.3175,0 0.712611,0.0706 0.04233,-0.16933 0.04233,-0.23283 0,-0.27517 -0.592667,-0.27517 -0.275166,0 -0.663222,0.0847 -0.388055,0.0776 -0.479778,0.0776 -0.119944,0 -0.197555,-0.0776 -0.07056,-0.0776 -0.07056,-0.19756 0,-0.3175 0.479778,-0.45155 0.486833,-0.14111 1.072445,-0.14111 0.550333,0 0.867833,0.21872 0.3175,0.21167 0.3175,0.57856 0,0.13405 -0.02822,0.24694 l -0.303389,1.42522 h 0.119944 q 0.197556,0 0.296333,0.0564 z m -1.756833,-0.73378 q -0.416278,0 -0.726722,0.18344 -0.303389,0.18345 -0.303389,0.36689 0,0.0988 0.134056,0.16934 0.141111,0.0705 0.338666,0.0705 0.585611,0 1.248834,-0.35983 l 0.07055,-0.35278 q -0.423333,-0.0776 -0.762,-0.0776 z\"\n       style=\"font-style:italic;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:7.05555534px;font-family:FreeMono;-inkscape-font-specification:'FreeMono Bold Italic';fill:${colors[19]};fill-opacity:1;stroke:${colors[19]};stroke-width:0.26458332;stroke-opacity:1\"\n       id=\"path1022-0\" />\n    <path\n       d=\"m 57.840793,108.27614 q 0,-0.16933 0.05644,-0.40217 0.05644,-0.23988 0.211667,-0.53622 0.162277,-0.30339 0.395111,-0.55033 0.239889,-0.24695 0.642055,-0.41628 0.409222,-0.16933 0.910167,-0.16933 0.592667,0 0.966611,0.21166 0.09878,-0.21166 0.310444,-0.21166 0.268112,0 0.268112,0.26811 0,0.0494 -0.02822,0.19755 l -0.112889,0.54328 q -0.127,0.46567 -0.458611,0.46567 -0.169333,0 -0.225777,-0.0847 -0.05644,-0.0847 -0.05644,-0.254 0,-0.23283 -0.246944,-0.33161 -0.239889,-0.0988 -0.5715,-0.0988 -0.3175,0 -0.5715,0.10584 -0.246945,0.0988 -0.388056,0.24694 -0.141111,0.14817 -0.232833,0.33161 -0.09172,0.17639 -0.119945,0.31045 -0.02822,0.127 -0.02822,0.21872 0,0.66322 1.0795,0.66322 0.359833,0 0.620889,-0.0635 0.261056,-0.0635 0.366889,-0.13405 0.105833,-0.0706 0.204611,-0.13406 0.105833,-0.0635 0.197556,-0.0635 0.119944,0 0.197555,0.0847 0.08467,0.0776 0.08467,0.20461 0,0.0635 -0.04233,0.14816 -0.03528,0.0847 -0.162277,0.20462 -0.127,0.11994 -0.324556,0.21872 -0.1905,0.0988 -0.550333,0.16933 -0.359834,0.0706 -0.811389,0.0706 -0.472722,0 -0.811389,-0.11289 -0.331611,-0.11995 -0.486833,-0.3175 -0.155222,-0.19756 -0.218722,-0.381 -0.0635,-0.1905 -0.0635,-0.40217 z\"\n       style=\"font-style:italic;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:7.05555534px;font-family:FreeMono;-inkscape-font-specification:'FreeMono Bold Italic';fill:${colors[19]};fill-opacity:1;stroke:${colors[19]};stroke-width:0.26458332;stroke-opacity:1\"\n       id=\"path1024-6\" />\n    <path\n       d=\"m 62.868648,106.71686 q 0,-0.16227 0.119944,-0.28927 0.119945,-0.13406 0.437445,-0.13406 h 1.255888 l -0.500944,2.37772 h 0.853722 q 0.197556,0 0.296334,0.0564 0.105833,0.0494 0.105833,0.22577 0,0.15523 -0.127,0.28928 -0.119945,0.13406 -0.423333,0.13406 h -2.420056 q -0.218722,0 -0.310444,-0.0635 -0.09172,-0.0635 -0.09172,-0.21872 0,-0.16934 0.127,-0.29634 0.127,-0.127 0.423334,-0.127 h 0.860778 l 0.352777,-1.67216 H 63.27787 q -0.225778,0 -0.3175,-0.0635 -0.09172,-0.0635 -0.09172,-0.21873 z m 1.996722,-1.73566 -0.162278,0.74083 h -0.832555 l 0.162277,-0.74083 z\"\n       style=\"font-style:italic;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:7.05555534px;font-family:FreeMono;-inkscape-font-specification:'FreeMono Bold Italic';fill:${colors[19]};fill-opacity:1;stroke:${colors[19]};stroke-width:0.26458332;stroke-opacity:1\"\n       id=\"path1026-3\" />\n    <path\n       d=\"m 69.801503,108.7277 q 0.09878,0.0494 0.09878,0.21872 0,0.16933 -0.127,0.30339 -0.127,0.127 -0.423334,0.127 h -0.8255 l 0.03528,-0.16228 q -0.585611,0.27517 -1.227666,0.27517 -0.472723,0 -0.783167,-0.22578 -0.303389,-0.23283 -0.303389,-0.57856 0,-0.0988 0.04939,-0.23989 0.04939,-0.14816 0.1905,-0.34572 0.148167,-0.19755 0.352778,-0.35983 0.211666,-0.16228 0.5715,-0.27517 0.366889,-0.11994 0.818444,-0.11994 0.3175,0 0.712611,0.0706 0.04233,-0.16933 0.04233,-0.23283 0,-0.27517 -0.592667,-0.27517 -0.275167,0 -0.663222,0.0847 -0.388056,0.0776 -0.479778,0.0776 -0.119945,0 -0.197556,-0.0776 -0.07055,-0.0776 -0.07055,-0.19756 0,-0.3175 0.479778,-0.45155 0.486833,-0.14111 1.072444,-0.14111 0.550333,0 0.867833,0.21872 0.3175,0.21167 0.3175,0.57856 0,0.13405 -0.02822,0.24694 l -0.303389,1.42522 h 0.119945 q 0.197555,0 0.296333,0.0564 z m -1.756833,-0.73378 q -0.416278,0 -0.726723,0.18344 -0.303388,0.18345 -0.303388,0.36689 0,0.0988 0.134055,0.16934 0.141111,0.0705 0.338667,0.0705 0.585611,0 1.248833,-0.35983 l 0.07056,-0.35278 q -0.423334,-0.0776 -0.762,-0.0776 z\"\n       style=\"font-style:italic;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:7.05555534px;font-family:FreeMono;-inkscape-font-specification:'FreeMono Bold Italic';fill:${colors[19]};fill-opacity:1;stroke:${colors[19]};stroke-width:0.26458332;stroke-opacity:1\"\n       id=\"path1028-6\" />\n    <path\n       d=\"m 70.99819,106.71686 q 0,-0.16227 0.127,-0.28927 0.127,-0.13406 0.416277,-0.13406 h 0.9525 l -0.09172,0.45156 q 0.508,-0.32456 0.769056,-0.43039 0.261055,-0.10584 0.522111,-0.10584 0.282222,0 0.522111,0.16934 0.246944,0.16933 0.246944,0.35277 0,0.16228 -0.141111,0.29634 -0.134055,0.13405 -0.296333,0.13405 -0.105833,0 -0.246945,-0.127 -0.134055,-0.127 -0.253999,-0.127 -0.162278,0 -0.451556,0.16228 -0.289278,0.15522 -0.860778,0.55739 l -0.218722,1.04422 h 0.980722 q 0.197556,0 0.296334,0.0564 0.105833,0.0494 0.105833,0.22577 0,0.15523 -0.127,0.28928 -0.119945,0.13406 -0.423333,0.13406 h -2.102556 q -0.211667,0 -0.303389,-0.0635 -0.09172,-0.0635 -0.09172,-0.21872 0,-0.16934 0.119944,-0.29634 0.127,-0.127 0.423334,-0.127 h 0.416277 l 0.352778,-1.67922 h -0.246944 q -0.211667,0 -0.303389,-0.0635 -0.09172,-0.0635 -0.09172,-0.21167 z\"\n       style=\"font-style:italic;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:7.05555534px;font-family:FreeMono;-inkscape-font-specification:'FreeMono Bold Italic';fill:${colors[19]};fill-opacity:1;stroke:${colors[19]};stroke-width:0.26458332;stroke-opacity:1\"\n       id=\"path1030-1\" />\n    <path\n       d=\"m 81.886456,105.60914 q -0.09172,-0.0635 -0.09172,-0.21872 0,-0.15522 0.119945,-0.28222 0.119944,-0.13406 0.430389,-0.13406 h 0.818444 l -0.783166,3.69711 h 0.112888 q 0.197556,0 0.296334,0.0564 0.09878,0.0494 0.09878,0.22577 0,0.16228 -0.127,0.29634 -0.127,0.127 -0.423334,0.127 h -0.818444 l 0.05644,-0.24695 q -0.578555,0.34573 -1.135944,0.34573 -0.409222,0 -0.705556,-0.11995 -0.296333,-0.127 -0.451555,-0.33161 -0.148167,-0.20461 -0.218722,-0.40922 -0.0635,-0.20461 -0.0635,-0.42334 0,-0.762 0.578555,-1.35466 0.635,-0.64206 1.566333,-0.64206 0.606778,0 0.980723,0.35278 l 0.183444,-0.87489 H 82.1969 q -0.218722,0 -0.310444,-0.0635 z m -0.01411,2.04611 q 0,-0.127 -0.03528,-0.23989 -0.03528,-0.11289 -0.127,-0.23989 -0.08467,-0.127 -0.275167,-0.19755 -0.1905,-0.0776 -0.458611,-0.0776 -0.338667,0 -0.606778,0.14111 -0.261055,0.13405 -0.395111,0.33161 -0.127,0.19756 -0.1905,0.36689 -0.05644,0.16228 -0.05644,0.27517 0,0.35277 0.232833,0.55738 0.232833,0.19756 0.649111,0.19756 0.345722,0 0.606778,-0.13406 0.268111,-0.13405 0.395111,-0.33161 0.134056,-0.19755 0.197556,-0.35983 0.0635,-0.16933 0.0635,-0.28928 z\"\n       style=\"font-style:italic;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:7.05555534px;font-family:FreeMono;-inkscape-font-specification:'FreeMono Bold Italic';fill:${colors[19]};fill-opacity:1;stroke:${colors[19]};stroke-width:0.26458332;stroke-opacity:1\"\n       id=\"path1032-0\" />\n    <path\n       d=\"m 85.002253,108.78414 q 0.345723,0 0.839612,-0.11289 0.493888,-0.11994 0.592666,-0.11994 0.119945,0 0.1905,0.0776 0.07761,0.0706 0.07761,0.1905 0,0.23989 -0.232833,0.35983 -0.225778,0.11995 -0.747889,0.21167 -0.515055,0.0988 -0.938389,0.0988 -0.719666,0 -1.135944,-0.34573 -0.416278,-0.35277 -0.416278,-0.95955 0,-0.79022 0.663222,-1.38289 0.670278,-0.59972 1.545167,-0.59972 0.684389,0 1.093611,0.36689 0.409222,0.36689 0.409222,0.98072 0,0.11994 -0.09172,0.61383 h -2.885722 q 0.112889,0.62089 1.037166,0.62089 z m -0.881944,-1.24178 h 2.081389 q -0.02822,-0.28927 -0.275167,-0.45861 -0.246944,-0.17639 -0.627944,-0.17639 -0.395111,0 -0.712611,0.17639 -0.3175,0.16934 -0.465667,0.45861 z\"\n       style=\"font-style:italic;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:7.05555534px;font-family:FreeMono;-inkscape-font-specification:'FreeMono Bold Italic';fill:${colors[19]};fill-opacity:1;stroke:${colors[19]};stroke-width:0.26458332;stroke-opacity:1\"\n       id=\"path1034-5\" />\n    <path\n       d=\"m 92.870742,105.62325 q -0.105834,-0.0564 -0.105834,-0.22578 0,-0.16933 0.127,-0.29633 0.127,-0.127 0.430389,-0.127 h 1.255889 l -0.783166,3.69711 h 0.853722 q 0.197555,0 0.296333,0.0564 0.105833,0.0494 0.105833,0.22577 0,0.15523 -0.127,0.28928 -0.119944,0.13406 -0.423333,0.13406 H 92.08052 q -0.218723,0 -0.310445,-0.0635 -0.09172,-0.0635 -0.09172,-0.21872 0,-0.16934 0.127,-0.29634 0.127,-0.127 0.423333,-0.127 h 0.860778 l 0.635,-2.99155 h -0.557389 q -0.1905,0 -0.296333,-0.0564 z\"\n       style=\"font-style:italic;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:7.05555534px;font-family:FreeMono;-inkscape-font-specification:'FreeMono Bold Italic';fill:${colors[19]};fill-opacity:1;stroke:${colors[19]};stroke-width:0.26458332;stroke-opacity:1\"\n       id=\"path1036-7\" />\n    <path\n       d=\"m 99.415539,108.7277 q 0.09878,0.0494 0.09878,0.21872 0,0.16933 -0.127,0.30339 -0.127,0.127 -0.423333,0.127 h -0.8255 l 0.03528,-0.16228 q -0.585611,0.27517 -1.227667,0.27517 -0.472722,0 -0.783167,-0.22578 -0.303388,-0.23283 -0.303388,-0.57856 0,-0.0988 0.04939,-0.23989 0.04939,-0.14816 0.1905,-0.34572 0.148167,-0.19755 0.352778,-0.35983 0.211667,-0.16228 0.5715,-0.27517 0.366889,-0.11994 0.818445,-0.11994 0.3175,0 0.712611,0.0706 0.04233,-0.16933 0.04233,-0.23283 0,-0.27517 -0.592667,-0.27517 -0.275166,0 -0.663222,0.0847 -0.388055,0.0776 -0.479778,0.0776 -0.119944,0 -0.197555,-0.0776 -0.07056,-0.0776 -0.07056,-0.19756 0,-0.3175 0.479778,-0.45155 0.486833,-0.14111 1.072445,-0.14111 0.550333,0 0.867833,0.21872 0.3175,0.21167 0.3175,0.57856 0,0.13405 -0.02822,0.24694 l -0.303389,1.42522 h 0.119944 q 0.197556,0 0.296333,0.0564 z m -1.756833,-0.73378 q -0.416278,0 -0.726722,0.18344 -0.303389,0.18345 -0.303389,0.36689 0,0.0988 0.134056,0.16934 0.141111,0.0705 0.338666,0.0705 0.585611,0 1.248834,-0.35983 l 0.07055,-0.35278 q -0.423333,-0.0776 -0.762,-0.0776 z\"\n       style=\"font-style:italic;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:7.05555534px;font-family:FreeMono;-inkscape-font-specification:'FreeMono Bold Italic';fill:${colors[19]};fill-opacity:1;stroke:${colors[19]};stroke-width:0.26458332;stroke-opacity:1\"\n       id=\"path1038-4\" />\n    <path\n       d=\"m 104.29953,106.71686 q 0,-0.16227 0.127,-0.28927 0.13405,-0.13406 0.43039,-0.13406 h 0.65616 l -0.0353,0.16933 q 0.381,-0.26105 0.65616,-0.26105 0.40922,0 0.64206,0.34572 0.39511,-0.34572 0.80433,-0.34572 0.33161,0 0.54328,0.19755 0.21167,0.19756 0.21167,0.508 0,0.0988 -0.0212,0.21873 l -0.33161,1.54516 q 0.35983,0 0.35983,0.28222 0,0.16228 -0.127,0.29634 -0.127,0.127 -0.42333,0.127 h -0.66322 l 0.46566,-2.19428 q 0.0141,-0.0494 0.0141,-0.13406 -0.0141,-0.14111 -0.19755,-0.14111 -0.14111,0 -0.26106,0.0635 -0.11994,0.0635 -0.34572,0.254 l -0.30339,1.44639 q 0.35278,0 0.35278,0.28222 0,0.16228 -0.127,0.29634 -0.127,0.127 -0.42333,0.127 h -0.66323 l 0.46567,-2.19428 q 0.0212,-0.0706 0.0212,-0.127 0,-0.14817 -0.19756,-0.14817 -0.26811,0 -0.61383,0.3175 l -0.30339,1.44639 q 0.35983,0 0.35983,0.28222 0,0.16228 -0.127,0.29634 -0.127,0.127 -0.42333,0.127 h -0.62089 q -0.21872,0 -0.31044,-0.0635 -0.0917,-0.0635 -0.0917,-0.21872 0,-0.18345 0.14111,-0.30339 0.14817,-0.11995 0.36689,-0.11995 l 0.35278,-1.67216 q -0.35983,0 -0.35983,-0.28223 z\"\n       style=\"font-style:italic;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:7.05555534px;font-family:FreeMono;-inkscape-font-specification:'FreeMono Bold Italic';fill:${colors[19]};fill-opacity:1;stroke:${colors[19]};stroke-width:0.26458332;stroke-opacity:1\"\n       id=\"path1040-2\" />\n    <path\n       d=\"m 112.10727,108.7277 q 0.0988,0.0494 0.0988,0.21872 0,0.16933 -0.127,0.30339 -0.127,0.127 -0.42333,0.127 h -0.8255 l 0.0353,-0.16228 q -0.58562,0.27517 -1.22767,0.27517 -0.47272,0 -0.78317,-0.22578 -0.30339,-0.23283 -0.30339,-0.57856 0,-0.0988 0.0494,-0.23989 0.0494,-0.14816 0.1905,-0.34572 0.14817,-0.19755 0.35278,-0.35983 0.21167,-0.16228 0.5715,-0.27517 0.36689,-0.11994 0.81844,-0.11994 0.3175,0 0.71262,0.0706 0.0423,-0.16933 0.0423,-0.23283 0,-0.27517 -0.59267,-0.27517 -0.27516,0 -0.66322,0.0847 -0.38806,0.0776 -0.47978,0.0776 -0.11994,0 -0.19755,-0.0776 -0.0706,-0.0776 -0.0706,-0.19756 0,-0.3175 0.47978,-0.45155 0.48683,-0.14111 1.07244,-0.14111 0.55034,0 0.86784,0.21872 0.3175,0.21167 0.3175,0.57856 0,0.13405 -0.0282,0.24694 l -0.30338,1.42522 h 0.11994 q 0.19756,0 0.29633,0.0564 z m -1.75683,-0.73378 q -0.41628,0 -0.72672,0.18344 -0.30339,0.18345 -0.30339,0.36689 0,0.0988 0.13405,0.16934 0.14112,0.0705 0.33867,0.0705 0.58561,0 1.24883,-0.35983 l 0.0706,-0.35278 q -0.42333,-0.0776 -0.762,-0.0776 z\"\n       style=\"font-style:italic;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:7.05555534px;font-family:FreeMono;-inkscape-font-specification:'FreeMono Bold Italic';fill:${colors[19]};fill-opacity:1;stroke:${colors[19]};stroke-width:0.26458332;stroke-opacity:1\"\n       id=\"path1042-0\" />\n    <path\n       d=\"m 114.02363,105.62325 q -0.10584,-0.0564 -0.10584,-0.22578 0,-0.16933 0.127,-0.29633 0.127,-0.127 0.43039,-0.127 h 1.25589 l -0.78317,3.69711 h 0.85373 q 0.19755,0 0.29633,0.0564 0.10583,0.0494 0.10583,0.22577 0,0.15523 -0.127,0.28928 -0.11994,0.13406 -0.42333,0.13406 h -2.42005 q -0.21873,0 -0.31045,-0.0635 -0.0917,-0.0635 -0.0917,-0.21872 0,-0.16934 0.127,-0.29634 0.127,-0.127 0.42333,-0.127 h 0.86078 l 0.635,-2.99155 h -0.55739 q -0.1905,0 -0.29633,-0.0564 z\"\n       style=\"font-style:italic;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:7.05555534px;font-family:FreeMono;-inkscape-font-specification:'FreeMono Bold Italic';fill:${colors[19]};fill-opacity:1;stroke:${colors[19]};stroke-width:0.26458332;stroke-opacity:1\"\n       id=\"path1044-0\" />\n    <path\n       d=\"m 120.56842,108.7277 q 0.0988,0.0494 0.0988,0.21872 0,0.16933 -0.127,0.30339 -0.127,0.127 -0.42333,0.127 h -0.8255 l 0.0353,-0.16228 q -0.58561,0.27517 -1.22767,0.27517 -0.47272,0 -0.78317,-0.22578 -0.30338,-0.23283 -0.30338,-0.57856 0,-0.0988 0.0494,-0.23989 0.0494,-0.14816 0.1905,-0.34572 0.14817,-0.19755 0.35278,-0.35983 0.21167,-0.16228 0.5715,-0.27517 0.36689,-0.11994 0.81845,-0.11994 0.3175,0 0.71261,0.0706 0.0423,-0.16933 0.0423,-0.23283 0,-0.27517 -0.59267,-0.27517 -0.27516,0 -0.66322,0.0847 -0.38805,0.0776 -0.47978,0.0776 -0.11994,0 -0.19755,-0.0776 -0.0706,-0.0776 -0.0706,-0.19756 0,-0.3175 0.47978,-0.45155 0.48683,-0.14111 1.07244,-0.14111 0.55034,0 0.86784,0.21872 0.3175,0.21167 0.3175,0.57856 0,0.13405 -0.0282,0.24694 l -0.30339,1.42522 h 0.11994 q 0.19756,0 0.29633,0.0564 z m -1.75683,-0.73378 q -0.41628,0 -0.72672,0.18344 -0.30339,0.18345 -0.30339,0.36689 0,0.0988 0.13406,0.16934 0.14111,0.0705 0.33866,0.0705 0.58561,0 1.24884,-0.35983 l 0.0705,-0.35278 q -0.42333,-0.0776 -0.762,-0.0776 z\"\n       style=\"font-style:italic;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:7.05555534px;font-family:FreeMono;-inkscape-font-specification:'FreeMono Bold Italic';fill:${colors[19]};fill-opacity:1;stroke:${colors[19]};stroke-width:0.26458332;stroke-opacity:1\"\n       id=\"path1046-3\" />\n    <path\n       d=\"m 124.19222,105.60914 q -0.0917,-0.0635 -0.0917,-0.21872 0,-0.15522 0.11994,-0.28222 0.11995,-0.13406 0.43039,-0.13406 h 0.81845 l -0.78317,3.69711 h 0.11289 q 0.19756,0 0.29633,0.0564 0.0988,0.0494 0.0988,0.22577 0,0.16228 -0.127,0.29634 -0.127,0.127 -0.42333,0.127 h -0.81845 l 0.0565,-0.24695 q -0.57856,0.34573 -1.13595,0.34573 -0.40922,0 -0.70555,-0.11995 -0.29633,-0.127 -0.45156,-0.33161 -0.14816,-0.20461 -0.21872,-0.40922 -0.0635,-0.20461 -0.0635,-0.42334 0,-0.762 0.57856,-1.35466 0.635,-0.64206 1.56633,-0.64206 0.60678,0 0.98072,0.35278 l 0.18345,-0.87489 h -0.11289 q -0.21873,0 -0.31045,-0.0635 z m -0.0141,2.04611 q 0,-0.127 -0.0353,-0.23989 -0.0353,-0.11289 -0.127,-0.23989 -0.0847,-0.127 -0.27516,-0.19755 -0.1905,-0.0776 -0.45861,-0.0776 -0.33867,0 -0.60678,0.14111 -0.26106,0.13405 -0.39511,0.33161 -0.127,0.19756 -0.1905,0.36689 -0.0564,0.16228 -0.0564,0.27517 0,0.35277 0.23284,0.55738 0.23283,0.19756 0.64911,0.19756 0.34572,0 0.60677,-0.13406 0.26812,-0.13405 0.39512,-0.33161 0.13405,-0.19755 0.19755,-0.35983 0.0635,-0.16933 0.0635,-0.28928 z\"\n       style=\"font-style:italic;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:7.05555534px;font-family:FreeMono;-inkscape-font-specification:'FreeMono Bold Italic';fill:${colors[19]};fill-opacity:1;stroke:${colors[19]};stroke-width:0.26458332;stroke-opacity:1\"\n       id=\"path1048-3\" />\n    <path\n       d=\"m 127.30803,108.78414 q 0.34572,0 0.83961,-0.11289 0.49389,-0.11994 0.59267,-0.11994 0.11994,0 0.1905,0.0776 0.0776,0.0706 0.0776,0.1905 0,0.23989 -0.23284,0.35983 -0.22577,0.11995 -0.74789,0.21167 -0.51505,0.0988 -0.93838,0.0988 -0.71967,0 -1.13595,-0.34573 -0.41628,-0.35277 -0.41628,-0.95955 0,-0.79022 0.66323,-1.38289 0.67027,-0.59972 1.54516,-0.59972 0.68439,0 1.09361,0.36689 0.40923,0.36689 0.40923,0.98072 0,0.11994 -0.0917,0.61383 h -2.88572 q 0.11289,0.62089 1.03717,0.62089 z m -0.88195,-1.24178 h 2.08139 q -0.0282,-0.28927 -0.27516,-0.45861 -0.24695,-0.17639 -0.62795,-0.17639 -0.39511,0 -0.71261,0.17639 -0.3175,0.16934 -0.46567,0.45861 z\"\n       style=\"font-style:italic;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:7.05555534px;font-family:FreeMono;-inkscape-font-specification:'FreeMono Bold Italic';fill:${colors[19]};fill-opacity:1;stroke:${colors[19]};stroke-width:0.26458332;stroke-opacity:1\"\n       id=\"path1050-9\" />\n    <path\n       d=\"m 133.09083,106.57575 q 0,0.16228 -0.127,0.29634 -0.127,0.127 -0.42334,0.127 h -1.27705 l -0.29634,1.38288 q -0.0212,0.0917 -0.0212,0.16934 0,0.23283 0.54327,0.23283 0.35278,0 0.62795,-0.0776 0.28222,-0.0776 0.45155,-0.15522 0.17639,-0.0847 0.26106,-0.0847 0.11994,0 0.19756,0.0776 0.0776,0.0776 0.0776,0.20461 0,0.19756 -0.22578,0.35278 -0.21872,0.14817 -0.54328,0.23283 -0.3175,0.0776 -0.59267,0.11289 -0.26811,0.0423 -0.4445,0.0423 -0.24694,0 -0.47272,-0.0635 -0.22578,-0.0564 -0.42333,-0.23284 -0.1905,-0.18344 -0.1905,-0.46566 0,-0.10584 0.0212,-0.21167 l 0.32455,-1.51694 h -0.24694 q -0.21873,0 -0.31045,-0.0635 -0.0917,-0.0635 -0.0917,-0.21873 0,-0.16227 0.11994,-0.28927 0.11995,-0.13406 0.43039,-0.13406 h 0.24695 l 0.13405,-0.62089 q 0.0847,-0.46567 0.45156,-0.46567 0.11994,0 0.19755,0.0776 0.0847,0.0776 0.0847,0.1905 0,0.0635 -0.0282,0.19755 l -0.13406,0.62089 h 1.27706 q 0.13405,0 0.20461,0.0141 0.0776,0.0141 0.13406,0.0847 0.0635,0.0635 0.0635,0.18344 z\"\n       style=\"font-style:italic;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:7.05555534px;font-family:FreeMono;-inkscape-font-specification:'FreeMono Bold Italic';fill:${colors[19]};fill-opacity:1;stroke:${colors[19]};stroke-width:0.26458332;stroke-opacity:1\"\n       id=\"path1052-0\" />\n    <path\n       d=\"m 137.49073,108.7277 q 0.0988,0.0494 0.0988,0.21872 0,0.16933 -0.127,0.30339 -0.127,0.127 -0.42333,0.127 h -0.8255 l 0.0353,-0.16228 q -0.58561,0.27517 -1.22767,0.27517 -0.47272,0 -0.78317,-0.22578 -0.30339,-0.23283 -0.30339,-0.57856 0,-0.0988 0.0494,-0.23989 0.0494,-0.14816 0.1905,-0.34572 0.14817,-0.19755 0.35278,-0.35983 0.21167,-0.16228 0.5715,-0.27517 0.36689,-0.11994 0.81845,-0.11994 0.3175,0 0.71261,0.0706 0.0423,-0.16933 0.0423,-0.23283 0,-0.27517 -0.59267,-0.27517 -0.27516,0 -0.66322,0.0847 -0.38805,0.0776 -0.47978,0.0776 -0.11994,0 -0.19755,-0.0776 -0.0706,-0.0776 -0.0706,-0.19756 0,-0.3175 0.47978,-0.45155 0.48683,-0.14111 1.07244,-0.14111 0.55034,0 0.86784,0.21872 0.3175,0.21167 0.3175,0.57856 0,0.13405 -0.0282,0.24694 l -0.30339,1.42522 h 0.11994 q 0.19756,0 0.29633,0.0564 z m -1.75683,-0.73378 q -0.41628,0 -0.72672,0.18344 -0.30339,0.18345 -0.30339,0.36689 0,0.0988 0.13406,0.16934 0.14111,0.0705 0.33866,0.0705 0.58561,0 1.24884,-0.35983 l 0.0705,-0.35278 q -0.42333,-0.0776 -0.762,-0.0776 z\"\n       style=\"font-style:italic;font-variant:normal;font-weight:bold;font-stretch:normal;\n       font-size:7.05555534px;font-family:FreeMono;-inkscape-font-specification:'FreeMono Bold Italic';\n       fill:${colors[19]};fill-opacity:1;\n       stroke:${colors[19]};stroke-width:0.26458332;stroke-opacity:1\"\n       id=\"path1054-4\" />\n  </g>\n  <rect\n     style=\"fill:none;fill-opacity:1;fill-rule:nonzero;stroke:${colors[0]};stroke-width:3;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n     id=\"rect3450\"\n     width=\"235.7692\"\n     height=\"131.12297\"\n     x=\"1.3229166\"\n     y=\"1.3229166\"\n     ry=\"19.755453\" />\n  <circle\n     r=\"1.7542652\"\n     cy=\"56.581135\"\n     cx=\"93.677757\"\n     id=\"maladeta_position\"\n     style=\"fill:#000080;fill-opacity:0;fill-rule:nonzero;stroke:none;stroke-width:2.64583349;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\">\n    <desc\n       id=\"desc4914\">maladeta_position</desc>\n    <title\n       id=\"title4912\">maladeta_position</title>\n  </circle>`;\n\n    if (!svg) {\n        svg = d3.select(\"body\").append(\"svg\")\n            .attr(\"width\", width)\n            .attr(\"height\", height);\n    }\n    const glaciar = svg.append('g')\n        .attr('id', 'glaciar_map_drawing');\n    glaciar.html(glaciarDrawing);\n    return glaciar;\n}\n\n\nfunction changeArrowPath(x_y_ini, x_y_end) {\n    const arrow_div = document.getElementById('arrow_path');\n    const arrow_path = arrow_div.getElementsByTagName('path')[0];\n    const original_path = arrow_path.getAttribute('d');\n    const maladeta_dot = document.getElementById('maladeta_position');\n    let splited = original_path.split(' ');\n    let position1 = splited[1].split(',');\n    let position2 = splited[2].split(',');\n    if (Array.isArray(x_y_ini)) {\n        position1[0] = x_y_ini[0];\n        position1[1] = x_y_ini[1];\n        splited[1] = position1.join(',');\n    }\n    if (Array.isArray(x_y_end)) {\n        position2[0] = x_y_end[0];\n        position2[1] = x_y_end[1];\n        splited[2] = position2.join(',');\n    }\n    arrow_path.setAttribute('d', splited.join(' '))\n}\n\nfunction resetArrowPath() {\n    const original_path = \"M 44.632797,168.37699 130.273188,42.133955\";\n    const arrow_div = document.getElementById('arrow_path');\n    const arrow_path = arrow_div.getElementsByTagName('path')[0];\n    arrow_path.setAttribute('d', original_path)\n}\n\nfunction positionArrowInMaladeta(arrow, maladeta) {\n    try {\n        const ofsset = 7;\n        const maladetaRect = maladeta.node().getBoundingClientRect();\n        const arrowRect = arrow.node().getBoundingClientRect();\n        const left = maladetaRect.left - arrowRect.left;\n        //const top = maladetaRect.top - (arrowRect.top + arrowRect.height / 2);\n        const top = maladetaRect.top - (arrowRect.top + arrowRect.height - ofsset);\n        window.arrow = arrow.node();\n        window.maladeta = maladeta.node();\n        window.arrowRect = arrowRect;\n        window.maladetaRect = maladetaRect;\n        arrow.attr('transform', 'translate(' + left + ',' + top + ')');\n        maladeta.style('visibility', 'hidden');\n    } catch (e) {\n        console.warn(e)\n    }\n}\n\nfunction paintGlacierInMap(maladetaMap) {\n    const glacier = getGlacierDrawing(maladetaMap);\n    glacier.style('visibility', 'hidden');\n    const spainWithArrow = maladetaMap.append('g').attr('id', 'spain_with_arrow');\n\n    return generateSpain(spainWithArrow)\n        .then(() => {\n            const arrow = getArrow(spainWithArrow, '#ffffff');\n            const maladeta = d3.select('#maladeta_in_spain');\n            arrow.attr(\"id\", \"map_arrow\");\n            positionArrowInMaladeta(arrow, maladeta);\n            return maladetaMap;\n        })\n\n}\n\n\nexport {paintGlacierInMap, getGlacierDrawing, changeArrowPath};\n\n/*\n\nchangeArrowPath([35, 180],[214, 444])\n\n* */\n","import * as d3 from \"d3\";\n\nfunction getArrow(svg, arrowColor = '#000000', width = 300, height = 300) {\n   const arrowData = `<defs\n     id=\"defs13268\">\n    <marker\n       style=\"overflow:visible\"\n       id=\"DotL\"\n       refX=\"0.0\"\n       refY=\"0.0\"\n       orient=\"auto\">\n      <path\n         transform=\"scale(0.8) translate(7.4, 1)\"\n         style=\"fill-rule:evenodd;stroke:${arrowColor};stroke-width:1pt;stroke-opacity:1;fill:${arrowColor};fill-opacity:1\"\n         d=\"M -2.5,-1.0 C -2.5,1.7600000 -4.7400000,4.0 -7.5,4.0 C -10.260000,4.0 -12.5,1.7600000 -12.5,-1.0 C -12.5,-3.7600000 -10.260000,-6.0 -7.5,-6.0 C -4.7400000,-6.0 -2.5,-3.7600000 -2.5,-1.0 z \"\n         id=\"path13882\" />\n    </marker>\n    <marker\n       style=\"overflow:visible\"\n       id=\"Tail\"\n       refX=\"0.0\"\n       refY=\"0.0\"\n       orient=\"auto\">\n      <g\n         style=\"stroke:${arrowColor};stroke-opacity:1;fill:${arrowColor};fill-opacity:1\"\n         transform=\"scale(-1.2)\"\n         id=\"g13869\">\n        <path\n           style=\"fill:${arrowColor};fill-rule:evenodd;stroke:${arrowColor};stroke-width:0.8;stroke-linecap:round;stroke-opacity:1;fill-opacity:1\"\n           d=\"M -3.8048674,-3.9585227 L 0.54352094,0\"\n           id=\"path13857\" />\n        <path\n           style=\"fill:${arrowColor};fill-rule:evenodd;stroke:${arrowColor};stroke-width:0.8;stroke-linecap:round;stroke-opacity:1;fill-opacity:1\"\n           d=\"M -1.2866832,-3.9585227 L 3.0617053,0\"\n           id=\"path13859\" />\n        <path\n           style=\"fill:${arrowColor};fill-rule:evenodd;stroke:${arrowColor};stroke-width:0.8;stroke-linecap:round;stroke-opacity:1;fill-opacity:1\"\n           d=\"M 1.3053582,-3.9585227 L 5.6537466,0\"\n           id=\"path13861\" />\n        <path\n           style=\"fill:${arrowColor};fill-rule:evenodd;stroke:${arrowColor};stroke-width:0.8;stroke-linecap:round;stroke-opacity:1;fill-opacity:1\"\n           d=\"M -3.8048674,4.1775838 L 0.54352094,0.21974226\"\n           id=\"path13863\" />\n        <path\n           style=\"fill:${arrowColor};fill-rule:evenodd;stroke:${arrowColor};stroke-width:0.8;stroke-linecap:round;stroke-opacity:1;fill-opacity:1\"\n           d=\"M -1.2866832,4.1775838 L 3.0617053,0.21974226\"\n           id=\"path13865\" />\n        <path\n           style=\"fill:${arrowColor};fill-rule:evenodd;stroke:${arrowColor};stroke-width:0.8;stroke-linecap:round;stroke-opacity:1;fill-opacity:1\"\n           d=\"M 1.3053582,4.1775838 L 5.6537466,0.21974226\"\n           id=\"path13867\" />\n      </g>\n    </marker>\n    <marker\n       style=\"overflow:visible;\"\n       id=\"Arrow2Lend\"\n       refX=\"0.0\"\n       refY=\"0.0\"\n       orient=\"auto\">\n      <path\n         transform=\"scale(1.1) rotate(180) translate(1,0)\"\n         d=\"M 8.7185878,4.0337352 L -2.2072895,0.016013256 L 8.7185884,-4.0017078 C 6.9730900,-1.6296469 6.9831476,1.6157441 8.7185878,4.0337352 z \"\n         style=\"fill-rule:evenodd;stroke-width:0.625;stroke-linejoin:round;stroke:${arrowColor};stroke-opacity:1;fill:${arrowColor};fill-opacity:1\"\n         id=\"path13842\" />\n    </marker>\n    <marker\n       style=\"overflow:visible\"\n       id=\"Arrow2Lstart\"\n       refX=\"0.0\"\n       refY=\"0.0\"\n       orient=\"auto\">\n      <path\n         transform=\"scale(1.1) translate(1,0)\"\n         d=\"M 8.7185878,4.0337352 L -2.2072895,0.016013256 L 8.7185884,-4.0017078 C 6.9730900,-1.6296469 6.9831476,1.6157441 8.7185878,4.0337352 z \"\n         style=\"fill-rule:evenodd;stroke-width:0.625;stroke-linejoin:round;stroke:${arrowColor};stroke-opacity:1;fill:${arrowColor};fill-opacity:1\"\n         id=\"path13839\" />\n    </marker>\n  </defs>\n  <g\n     id=\"arrow_path\">\n    <path\n       id=\"path14541\"\n       d=\"M 44.632797,168.37699 130.273188,42.133955\"\n       style=\"fill:none;stroke:${arrowColor};stroke-width:2;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;marker-start:url(#DotL);marker-end:url(#Arrow2Lend)\" />\n  </g>`;\n    try {\n        if (!svg) {\n            svg = d3.select(\"body\").append(\"svg\")\n                .attr(\"width\", width)\n                .attr(\"height\", height);\n        }\n        const arrow = svg.append('g').html(arrowData);\n        return arrow;\n    } catch (e) {\n        throw Error('Unknown error generating arrow: ');\n    }\n}\n\nexport {getArrow};\n","import {poissonDiscSampler} from \"./mesh\";\nimport * as d3 from \"d3\";\nimport {generateAllColors} from \"./colors\";\n\n\n\nfunction getBlueColor(d, i){\n    let l;\n    try {\n\n        if(!colors){\n            l = svg.selectAll('path').size();\n            if (l%2 !== 0){\n                l +=1;\n            }\n            colors = generateAllColors(l);\n\n        } else {\n            l = colors.length;\n        }\n    }catch(e){\n        console.warn(\"Error in position \", i, e.message)\n        return d3.rgb(255, 0 ,0)\n    }\n    return i < l ? d3.rgb(colors[i]) : d3.rgb(colors[colors.length -1]);\n    //return d3.rgb(255, 0 ,0)\n}\n\nfunction addNodesListeners(nodes){\n    setTimeout(() => {\n\n        const printNode = (n) => {\n            if(n && n.target){\n                let path = n.target;\n                console.log(path.getBoundingClientRect())\n            }\n        };\n        nodes.forEach(n => n.addEventListener('click', printNode))\n    }, 100)\n}\n\nfunction generateVoronoiGraph(polygonSize, svg, width=900, height=800){\n    let sampleSize = polygonSize || 25;\n    let sampler = poissonDiscSampler(width, height, sampleSize),\n        samples = [],\n        sample;\n\n    while (sample = sampler()) samples.push(sample);\n    let voronoi = d3.voronoi()\n        .extent([[-1, -1], [width + 1, height + 1]]);\n    if(!svg){\n        svg = d3.select(\"body\").append(\"svg\")\n            .attr(\"width\", width)\n            .attr(\"height\", height);\n    }\n\n    let backgroundTile = svg.append('g')\n        .attr('id', 'backgroundTile');\n    let allPaths = backgroundTile.selectAll(\"path\");\n    let data = voronoi(samples);\n    allPaths.data(data.polygons())\n        .enter().append(\"path\")\n        .attr(\"d\", (d) => \"M\" + d.join(\"L\") + \"Z\")\n        .attr(\"id\", (d, i) => 'i_'+i);\n    //.style(\"fill\", (d, i) => getBlueColor(d.point, i))\n    //.style(\"stroke\", (d) => d3.rgb(colors[0]));\n    return backgroundTile;\n}\n\nfunction sortByV(nodeA, nodeB){\n    const ra = nodeA.getBoundingClientRect(),\n        rb = nodeB.getBoundingClientRect(),\n        v1 = rb.x - ra.x,\n        v2 = rb.y - ra.y;\n    if ( (v1 >= 0 && v2 < 0) || (v1 < 0 && v2 <= 0) ) {\n        return 1\n    } else {\n        return -1;\n    }\n}\n\nfunction paintNodes(nodes, colorRange = ['#a0f7eb', '#036cb2']){\n    const l = nodes.length;\n    const totalNodes = l  % 2 === 0 ? l : l + 1;\n    const colors = generateAllColors(totalNodes, colorRange);\n    //const strokeColor = d3.rgb(colors[colors.length / 2]);\n    const strokeColor = d3.rgb(255, 255, 255, 0.3);\n    //strokeColor.opacity = 0.5;\n\n    window.nodes = nodes;\n    nodes.forEach((node, i) => {\n        const d3Node = d3.select(node);\n        const id = d3Node.attr('id');\n        d3Node\n            .style(\"fill\", () => colors[i])\n            //.style(\"stroke\", () => colors[0])\n            .style(\"stroke\", () => strokeColor)\n            .attr(\"id\", () => id + '_' + i);\n    });\n    return colors;\n}\n\nfunction paintColorBars(colors){\n    const barHeight = 20;\n    const width = 400;\n    let colorBarContainer = document.createElement('div');\n    colorBarContainer.className = 'bar-container';\n    document.body.appendChild(colorBarContainer);\n    let chart = d3.select(\".bar-container\").append('svg');\n\n    chart.attr(\"height\", barHeight * colors.length);\n    let bar = chart.selectAll(\"g\")\n        .data(colors)\n        .enter().append(\"g\")\n        .attr(\"transform\", (d, i) => \"translate(0,\" + i * barHeight + \")\")\n        .attr(\"id\", (a, i) => \"id_\"+i);\n\n    bar.append(\"rect\")\n        .attr(\"width\", () => width)\n        .attr(\"height\", barHeight - 1)\n        .style('fill', (a, b) =>{\n            return a;\n        });\n\n    bar.append(\"text\")\n        .attr(\"x\", (d, i) => {\n            return 10\n        })\n        .style('fill', 'white')\n        .attr(\"y\", barHeight / 2)\n        .attr(\"dy\", \".20em\")\n        .style('fill', (a, b) =>{\n            return 'rgb(255, 255, 255)';\n        })\n        .style(\"font-size\", \"12px\")\n        .text((d) => d);\n}\n\nfunction generateVoronoiTileBackground(svg, width=900, height=500, color1='#d5d5d5', color2='#3252CB'){\n    const polygonSize = 10;\n    const tile = generateVoronoiGraph(polygonSize, svg, width, height);\n    let nodes = d3.selectAll('path').nodes();\n    nodes.sort(sortByV);\n    const colors = paintNodes(nodes, [color1, color2]);\n    addNodesListeners(nodes);\n    return tile;\n}\n\nexport { generateVoronoiTileBackground }\n","function poissonDiscSampler(width, height, radius) {\n    var k = 30, // maximum number of samples before rejection\n        radius2 = radius * radius,\n        R = 3 * radius2,\n        cellSize = radius * Math.SQRT1_2,\n        gridWidth = Math.ceil(width / cellSize),\n        gridHeight = Math.ceil(height / cellSize),\n        grid = new Array(gridWidth * gridHeight),\n        queue = [],\n        queueSize = 0,\n        sampleSize = 0;\n\n    return function() {\n        if (!sampleSize) return sample(Math.random() * width, Math.random() * height);\n\n        // Pick a random existing sample and remove it from the queue.\n        while (queueSize) {\n            var i = Math.random() * queueSize | 0,\n                s = queue[i];\n\n            // Make a new candidate between [radius, 2 * radius] from the existing sample.\n            for (var j = 0; j < k; ++j) {\n                var a = 2 * Math.PI * Math.random(),\n                    r = Math.sqrt(Math.random() * R + radius2),\n                    x = s[0] + r * Math.cos(a),\n                    y = s[1] + r * Math.sin(a);\n\n                // Reject candidates that are outside the allowed extent,\n                // or closer than 2 * radius to any existing sample.\n                if (0 <= x && x < width && 0 <= y && y < height && far(x, y)) return sample(x, y);\n            }\n\n            queue[i] = queue[--queueSize];\n            queue.length = queueSize;\n        }\n    };\n\n    function far(x, y) {\n        var i = x / cellSize | 0,\n            j = y / cellSize | 0,\n            i0 = Math.max(i - 2, 0),\n            j0 = Math.max(j - 2, 0),\n            i1 = Math.min(i + 3, gridWidth),\n            j1 = Math.min(j + 3, gridHeight);\n\n        for (j = j0; j < j1; ++j) {\n            var o = j * gridWidth;\n            for (i = i0; i < i1; ++i) {\n                if (s = grid[o + i]) {\n                    var s,\n                        dx = s[0] - x,\n                        dy = s[1] - y;\n                    if (dx * dx + dy * dy < radius2) return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    function sample(x, y) {\n        var s = [x, y];\n        queue.push(s);\n        grid[gridWidth * (y / cellSize | 0) + (x / cellSize | 0)] = s;\n        ++sampleSize;\n        ++queueSize;\n        return s;\n    }\n}\n\nexport { poissonDiscSampler}","import * as d3 from \"d3\";\n\nconst snowFlake1 = `<polygon style=\"fill:#ffffff;\" points=\"71.538,62.283 71.574,62.217 74.732,64.914 79.784,66.506 75.758,63.064 71.796,61.818\n\t71.833,61.752 74.822,62.484 79.008,61.805 74.89,60.795 72.104,61.246 67.778,58.85 73.158,57.305 72.77,55.955 66.04,57.887\n\t63.581,56.523 67.809,55.311 67.422,53.961 61.845,55.561 59.385,54.197 68.305,51.641 67.919,50.292 57.649,53.236 51.769,49.978\n\t53.579,48.912 53.579,48.912 57.562,46.566 67.904,49.246 68.256,47.886 59.274,45.558 61.695,44.134 67.354,45.599 67.706,44.24\n\t63.408,43.126 65.831,41.702 72.769,43.498 73.12,42.138 67.54,40.694 71.807,38.184 74.601,38.565 78.69,37.447 74.488,36.874\n\t71.52,37.686 71.481,37.622 75.41,36.272 79.346,32.728 74.336,34.447 71.25,37.228 71.211,37.162 73.362,34.959 74.902,31.011\n\t71.939,34.042 70.916,36.671 66.65,39.182 68.054,33.762 66.695,33.41 64.939,40.188 62.517,41.615 63.621,37.358 62.263,37.004\n\t60.807,42.622 58.383,44.047 60.711,35.065 59.35,34.713 56.673,45.054 50.879,48.465 50.879,46.365 50.879,46.365 50.879,41.74\n\t58.431,34.186 57.438,33.195 50.879,39.756 50.879,36.944 55.01,32.813 54.017,31.821 50.879,34.959 50.879,32.148 55.945,27.081\n\t54.951,26.087 50.879,30.163 50.879,25.214 52.624,22.999 53.734,18.909 51.11,22.238 50.303,25.208 50.228,25.208 51.058,21.139\n\t50.001,15.949 48.941,21.139 49.771,25.208 49.695,25.208 48.888,22.238 46.266,18.909 47.377,22.999 49.121,25.214 49.121,30.163\n\t45.164,26.205 44.171,27.198 49.121,32.148 49.121,34.959 46.013,31.849 45.019,32.842 49.121,36.944 49.121,39.756 42.562,33.195\n\t41.568,34.186 49.121,41.74 49.121,48.511 47.245,47.471 47.244,47.471 43.201,45.23 40.255,34.96 38.906,35.347 41.465,44.268\n\t39.007,42.906 37.395,37.288 36.045,37.675 37.27,41.942 34.81,40.581 32.833,33.691 31.484,34.077 33.073,39.618 28.745,37.219\n\t27.653,34.618 24.613,31.665 26.254,35.573 28.463,37.718 28.426,37.786 25.268,35.086 20.216,33.494 24.241,36.936 28.203,38.183\n\t28.167,38.25 25.177,37.515 20.993,38.195 25.111,39.208 27.896,38.755 32.223,41.153 26.842,42.696 27.229,44.045 33.959,42.114\n\t36.418,43.478 32.191,44.69 32.577,46.039 38.155,44.44 40.614,45.801 31.693,48.361 32.082,49.711 42.351,46.764 48.23,50.023\n\t46.421,51.088 46.421,51.088 42.438,53.434 32.096,50.756 31.743,52.115 40.727,54.439 38.303,55.867 32.646,54.402 32.295,55.762\n\t36.593,56.875 34.169,58.301 27.23,56.504 26.88,57.861 32.459,59.307 28.194,61.818 25.399,61.438 21.311,62.555 25.51,63.127\n\t28.48,62.314 28.518,62.379 24.59,63.73 20.653,67.275 25.663,65.553 28.751,62.773 28.789,62.838 26.638,65.039 25.098,68.99\n\t28.061,65.957 29.085,63.328 33.349,60.82 31.945,66.238 33.305,66.59 35.06,59.811 37.482,58.387 36.379,62.645 37.738,62.996\n\t39.193,57.379 41.616,55.951 39.29,64.936 40.648,65.287 43.327,54.947 49.121,51.537 49.121,53.637 49.121,53.637 49.121,58.26\n\t41.568,65.812 42.562,66.807 49.121,60.246 49.121,63.057 44.991,67.189 45.982,68.182 49.121,65.041 49.121,67.854 44.055,72.92\n\t45.047,73.912 49.121,69.838 49.121,74.785 47.377,77.002 46.266,81.094 48.889,77.762 49.696,74.791 49.771,74.791 48.941,78.863\n\t49.999,84.051 51.059,78.863 50.228,74.791 50.305,74.791 51.112,77.762 53.734,81.094 52.624,77.002 50.879,74.783 50.879,69.838\n\t54.835,73.797 55.829,72.803 50.879,67.854 50.879,65.041 53.988,68.15 54.979,67.158 50.879,63.057 50.879,60.246 57.438,66.807\n\t58.431,65.812 50.879,58.26 50.879,51.49 52.755,52.531 52.755,52.531 56.8,54.77 59.745,65.039 61.094,64.652 58.535,55.734\n\t60.995,57.096 62.606,62.713 63.955,62.326 62.729,58.059 65.189,59.422 67.166,66.311 68.516,65.922 66.928,60.383 71.254,62.783\n\t72.347,65.383 75.387,68.338 73.744,64.428 \"/>`;\n\nconst snowFlake2 = `<g>\n\t<polygon style=\"fill:#ffffff;\" points=\"38.779,47.963 32.298,50 38.779,52.037 45.26,50 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"60.674,52.037 67.158,50 60.674,47.963 54.195,50 \t\"/>\n\t<path style=\"fill:#ffffff;\" d=\"M78.006,65.943l1.779,0.564l-4.027-3.443l-0.504-0.158l-0.387-0.428l4.141-0.672l-4.117-1.016\n\t\tl-1.033,0.17l5.553-2.035l-5.488-0.74l-4.42,1.617l-1.725-0.955l5.381-1.541l-0.387-1.352l-6.732,1.932l-1.641-0.91l3.619-1.328\n\t\tl-0.943-0.127l0.734-0.211l-0.387-1.35l-5.578,1.6l-2.457-1.361l8.918-2.561l-0.387-1.348l-9.857,2.829l-1.445-1.596l-3.52-0.81\n\t\tl-1.326-0.736l1.029-0.605l3.824-0.863l1.613-1.768l9.668,2.507l0.352-1.36l-8.949-2.319l0.055-0.06l2.334-1.374l5.658,1.465\n\t\tl0.289-1.119l0.398-0.053l-0.35-0.13l0.014-0.058l-0.564-0.146l-2.723-1.011l-0.785,0.101l-0.225-0.058l0.342-0.201l1.34-0.302\n\t\tl0.822-0.901l6.855,1.775l0.352-1.358l-5.578-1.445l1.203-0.708l5.211,1.934l5.492-0.721l-6.133-2.275l-3.557,0.467l0.506-0.298\n\t\tl3.088-0.699l1.248,0.172l4.09-1.118l-3.203-0.437l3.543-3.884l-0.172,0.04l0.488-0.438l-2.797,0.96L73.6,34.354l1.303-3.342\n\t\tl-2.963,3.032l-0.74,1.896l-1.109,1.217l-0.699,0.412l1.773-2.345l1.059-6.456l-3.344,4.417l-0.848,5.185l-1.381,0.812l1.402-5.421\n\t\tl-1.357-0.352l-1.756,6.779l-0.309,0.182l-0.752,0.169l-0.539,0.59l-0.668,0.393l0.477-0.627l0.623-3.816l-0.199,0.265l-1.312-0.34\n\t\tl-1.453,5.617l-2.424,1.426l2.326-8.982l-1.359-0.352l-2.527,9.765L55.5,44.776l1.689-4.038l-5.051,4.158l-1.261,3.015v-0.693\n\t\tl1.16-3.694l-0.703-2.237l7.098-7.099l-0.994-0.993l-6.56,6.562v-2.812l4.13-4.131l-0.891-0.892l0.131-0.318l-2.984,2.457\n\t\tl-0.369,0.883l-0.018,0.018v-0.672l0.328-1.04l-0.328-1.041v-0.059l5.068-5.067l-0.994-0.993l-4.074,4.076v-1.497l4.175-3.438\n\t\tl2.137-5.11l-5.051,4.159l-1.261,3.015v-0.694l0.722-2.302l1.023-1.298l1.111-4.09l-2.111,2.678l-1.35-4.296l-0.274-1.342\n\t\tl-0.277,1.361l-1.345,4.279l-2.11-2.682l1.108,4.091l1.027,1.303l0.719,2.291v0.697l-1.26-3.012l-5.051-4.159l2.138,5.109\n\t\tl4.173,3.436v1.5l-3.958-3.961l-0.993,0.995l4.951,4.95v0.062l-0.325,1.037l0.325,1.037v0.675l-0.016-0.017l-0.37-0.884L45.75,31.6\n\t\tl0.151,0.36l-0.883,0.883l4.103,4.1v2.812l-6.561-6.562l-0.992,0.993l7.098,7.1l-0.703,2.236l1.158,3.687v0.699l-1.26-3.013\n\t\tl-5.051-4.158l1.677,4.006l-1.527-0.353l-2.706-9.43l-1.35,0.386l2.491,8.685l-0.609-0.141l-1.782-0.986l-0.534-1.864l-0.223-1.399\n\t\tl-0.289-0.385l-0.565-1.968l-0.751,0.216l-0.36-0.481l0.09,0.558l-0.328,0.095l0.771,2.69l0.075,0.475l0.1,0.132l0.179,0.624\n\t\tl-1.008-1.114l-1.478-0.34l-1.85-6.451l-1.349,0.388l1.589,5.539l-0.925-0.512l-0.954-6.002l-3.325-4.43l1.029,6.46l2.785,3.714\n\t\tl-0.223-0.124l-3.797-4.196l-0.138-0.032l-2.914-2.832l1.005,2.393l-4.575-1.053l0.952,1.053l-1.779-0.562l4.025,3.44l0.505,0.159\n\t\tl0.388,0.429l-4.141,0.672l4.119,1.013l1.032-0.168l-5.554,2.035l5.489,0.741l4.422-1.618l1.724,0.955l-5.383,1.543l0.389,1.349\n\t\tl6.729-1.931l1.64,0.91l-3.619,1.327l0.945,0.127L32.19,44.69l0.387,1.35l5.578-1.601l2.459,1.362l-8.919,2.56l0.388,1.35\n\t\tl9.857-2.828l1.444,1.595l3.52,0.812l1.327,0.733l-1.029,0.607l-3.827,0.862l-1.611,1.768l-9.667-2.503l-0.353,1.359l8.951,2.316\n\t\tl-0.054,0.061l-2.338,1.375l-5.657-1.465l-0.29,1.117l-0.398,0.053l0.351,0.131l-0.014,0.059l0.562,0.145l2.726,1.014l0.784-0.104\n\t\tl0.226,0.057l-0.344,0.203l-1.338,0.303l-0.822,0.9l-6.859-1.775l-0.351,1.359l5.579,1.443l-1.203,0.709l-5.211-1.936l-5.491,0.721\n\t\tl6.133,2.277l3.556-0.467l-0.504,0.297l-3.092,0.697l-1.246-0.168l-4.089,1.117l3.201,0.438l-3.541,3.881l0.171-0.039l-0.489,0.438\n\t\tl2.798-0.961l2.95-0.664l-1.304,3.342l2.963-3.031l0.739-1.898l1.112-1.217l0.697-0.41l-1.772,2.342l-1.058,6.457l3.342-4.416\n\t\tl0.85-5.184l1.38-0.811l-1.404,5.418l1.358,0.352l1.754-6.777l0.312-0.182l0.75-0.172l0.535-0.586l0.67-0.395l-0.474,0.625\n\t\tl-0.624,3.816l0.198-0.264l1.312,0.34l1.455-5.617l2.423-1.424l-2.327,8.98l1.359,0.352l2.529-9.764l1.323-0.301l-1.69,4.041\n\t\tl5.05-4.158l1.261-3.014v0.691l-1.16,3.695l0.704,2.238l-7.097,7.096l0.992,0.992l6.561-6.559v2.811l-4.131,4.131l0.894,0.893\n\t\tl-0.134,0.318l2.985-2.455l0.368-0.885l0.018-0.018v0.67l-0.327,1.041l0.327,1.043v0.057l-5.067,5.068l0.993,0.992l4.074-4.074\n\t\tv1.498l-4.174,3.436l-2.137,5.109l5.05-4.158l1.261-3.014v0.693l-0.723,2.301L47.375,77l-1.108,4.092l2.109-2.678l1.349,4.291\n\t\tl0.273,1.346l0.278-1.361l1.345-4.279l2.113,2.684L52.623,77l-1.025-1.301l-0.72-2.289v-0.697l1.259,3.01l5.053,4.158l-2.141-5.109\n\t\tl-4.171-3.436v-1.498l3.957,3.957l0.994-0.992l-4.951-4.951v-0.064l0.326-1.035l-0.326-1.037v-0.674l0.015,0.014l0.372,0.889\n\t\tl2.984,2.455L54.1,68.039l0.879-0.881l-4.101-4.102v-2.811l6.56,6.559l0.994-0.992l-7.1-7.098l0.703-2.236l-1.158-3.688v-0.695\n\t\tl1.259,3.01l5.053,4.158l-1.678-4.008l1.527,0.354l2.707,9.43l1.348-0.387l-2.492-8.684l0.609,0.139l1.785,0.988l0.533,1.867\n\t\tl0.225,1.396l0.287,0.385l0.564,1.969l0.75-0.215l0.361,0.479l-0.09-0.557l0.328-0.094l-0.771-2.686l-0.076-0.482l-0.1-0.131\n\t\tl-0.178-0.621l1.008,1.115l1.479,0.338l1.85,6.449l1.35-0.385l-1.59-5.541l0.924,0.512l0.955,6l3.326,4.432L71.1,64.865\n\t\tl-2.785-3.713l0.223,0.123l3.799,4.197l0.137,0.031l2.914,2.832l-1.004-2.393l4.574,1.053L78.006,65.943z M72.861,61.123\n\t\tl-0.756,0.123l-0.539-0.299L72.861,61.123z M27.136,38.878l0.759-0.123l0.539,0.299L27.136,38.878z\"/>\n</g>`;\n\nconst snowFlake3 = `<g>\n\t<polygon style=\"fill:#ffffff;\" points=\"21.291,36.769 23.91,37.409 26.571,36.977 23.951,36.332 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"23.59,32.609 24.636,35.096 26.571,36.977 25.526,34.487 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"20.791,33.778 23.357,35.965 26.571,36.977 24.007,34.787 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"30.924,30.882 32.321,33.189 34.513,34.766 33.113,32.458 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"35.488,29.569 34.471,32.068 34.513,34.766 35.531,32.267 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"32.685,28.415 32.953,31.775 34.513,34.766 34.245,31.404 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"26.558,46.373 24.981,48.564 27.291,47.165 28.864,44.973 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"23.667,43.995 26.167,45.015 28.864,44.973 26.367,43.956 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"22.514,46.801 25.876,46.535 28.864,44.973 25.503,45.241 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"78.709,63.23 76.09,62.589 73.426,63.024 76.047,63.667 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"76.41,67.39 75.361,64.902 73.426,63.024 74.473,65.512 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"79.207,66.223 76.641,64.034 73.426,63.024 75.99,65.212 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"69.074,69.116 67.678,66.81 65.486,65.234 66.887,67.539 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"64.51,70.429 65.527,67.933 65.486,65.234 64.467,67.731 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"67.312,71.584 67.047,68.225 65.486,65.234 65.754,68.596 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"75.018,51.436 72.709,52.836 71.135,55.024 73.441,53.626 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"76.332,56.004 73.834,54.984 71.135,55.024 73.635,56.043 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"77.484,53.199 74.121,53.466 71.135,55.024 74.496,54.759 \t\"/>\n\t<path style=\"fill:#ffffff;\" d=\"M50.015,50.021l21.194-4.548l2.453-7.92l-7.92-2.454L50.022,50l5.858-20.875l-5.864-5.862\n\t\tl-5.861,5.862l5.854,20.855l-15.43-15.233l-7.967,2.294l2.292,7.966l21.082,4.974l-21.196,4.546l-2.453,7.921l7.921,2.454\n\t\tl15.72-14.902l-5.86,20.876l5.861,5.862l5.863-5.862l-5.854-20.854l15.432,15.23l7.967-2.292l-2.293-7.968L50.015,50.021z\n\t\t M66.512,38.399l3.49,1.082l-1.082,3.491l-9.348,2.004L66.512,38.399z M31.241,42.555l-1.01-3.513l3.512-1.011l6.805,6.718\n\t\tL31.241,42.555z M33.487,61.6l-3.491-1.082l1.08-3.49l9.35-2.005L33.487,61.6z M47.435,29.981l2.583-2.584l2.584,2.584\n\t\tl-2.582,9.205L47.435,29.981z M52.562,70.019L49.979,72.6l-2.582-2.581l2.584-9.205L52.562,70.019z M49.987,50.014l-0.005-0.019\n\t\tl0.012-0.013l0.019,0.003l0.004,0.02l-0.013,0.012L49.987,50.014z M66.256,61.967l-6.805-6.716l9.305,2.193l1.01,3.513\n\t\tL66.256,61.967z\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"23.188,66.749 25.162,64.909 26.259,62.444 24.286,64.283 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"20.973,62.543 23.625,63.034 26.259,62.444 23.606,61.955 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"20.415,65.523 23.65,64.58 26.259,62.444 23.023,63.39 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"23.552,55.467 26.247,55.562 28.766,54.595 26.069,54.499 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"24.957,50.928 26.488,53.148 28.766,54.595 27.235,52.372 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"22.455,52.638 25.413,54.26 28.766,54.595 25.812,52.974 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"34.109,67.611 35.079,70.131 35.174,67.435 34.204,64.915 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"30.539,68.725 32.76,67.192 34.204,64.915 31.983,66.446 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"32.25,71.227 33.87,68.269 34.204,64.915 32.584,67.872 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"76.811,33.251 74.836,35.09 73.74,37.554 75.713,35.714 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"79.027,37.454 76.373,36.966 73.74,37.554 76.393,38.044 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"79.586,34.474 76.348,35.419 73.74,37.554 76.975,36.61 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"76.447,44.533 73.75,44.438 71.232,45.405 73.93,45.5 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"75.041,49.072 73.512,46.852 71.232,45.405 72.764,47.627 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"77.545,47.361 74.588,45.739 71.232,45.405 74.188,47.025 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"65.889,32.386 64.922,29.869 64.826,32.565 65.795,35.083 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"69.461,31.277 67.238,32.805 65.795,35.083 68.016,33.552 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"67.748,28.773 66.129,31.729 65.795,35.083 67.414,32.127 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"50.057,23.194 49.348,20.592 47.679,18.473 48.386,21.076 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"52.434,18.473 50.762,20.592 50.057,23.194 51.727,21.076 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"50.057,16.59 49.382,19.892 50.057,23.194 50.73,19.892 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"57.492,24.053 56.15,26.395 55.832,29.073 57.174,26.731 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"60.854,27.415 58.174,27.732 55.832,29.073 58.512,28.755 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"60.504,24.4 57.693,26.262 55.832,29.073 58.646,27.214 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"39.146,27.415 41.487,28.755 44.167,29.073 41.825,27.732 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"42.508,24.053 42.825,26.731 44.167,29.073 43.85,26.395 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"39.495,24.4 41.354,27.214 44.167,29.073 42.306,26.262 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"49.943,76.803 50.65,79.408 52.318,81.527 51.612,78.924 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"47.565,81.526 49.236,79.408 49.943,76.803 48.272,78.924 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"49.943,83.41 50.616,80.107 49.943,76.803 49.269,80.107 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"42.507,75.947 43.848,73.604 44.167,70.928 42.825,73.267 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"39.146,72.586 41.825,72.267 44.167,70.928 41.487,71.244 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"39.494,75.598 42.306,73.738 44.167,70.928 41.354,72.786 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"60.854,72.586 58.512,71.244 55.832,70.928 58.174,72.267 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"57.492,75.948 57.174,73.267 55.832,70.928 56.148,73.604 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"60.504,75.598 58.645,72.786 55.832,70.928 57.693,73.738 \t\"/>\n</g>`;\n\nconst snowFlake4 = `<g>\n\t<path style=\"fill:#ffffff;\" d=\"M59.56,25.932l-0.102-0.401c-0.19-0.74-0.874-1.203-1.528-1.036l-2.819,0.724l3.031-3.032\n\t\tc0.538-0.54,0.538-1.416,0-1.957l-0.295-0.293c-0.541-0.541-1.417-0.541-1.957,0l-4.194,4.192v-5.881\n\t\tc0-0.765-0.619-1.384-1.382-1.384h-0.415c-0.767,0-1.387,0.619-1.387,1.384v5.881l-4.191-4.192c-0.542-0.541-1.416-0.541-1.958,0\n\t\tl-0.293,0.293c-0.542,0.541-0.542,1.417,0,1.957l3.104,3.103l-3.101-0.794c-0.654-0.167-1.338,0.296-1.528,1.036l-0.104,0.401\n\t\tc-0.188,0.741,0.186,1.478,0.839,1.646l8.347,2.142c0.126,0.032,0.252,0.04,0.375,0.027c0.125,0.013,0.251,0.005,0.377-0.027\n\t\tl8.343-2.142C59.375,27.409,59.752,26.673,59.56,25.932z\"/>\n\t<path style=\"fill:#ffffff;\" d=\"M50,38.361l-10.084,5.823v11.646L50,61.653l10.084-5.822V44.185L50,38.361z M53.526,57.497\n\t\tL50,54.237l-3.526,3.26l0.35-4.79l-4.748-0.726l3.962-2.712l-2.392-4.165l4.591,1.407L50,42.046l1.762,4.466l4.593-1.407\n\t\tl-2.395,4.165l3.963,2.712l-4.748,0.726L53.526,57.497z\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"50,37.588 45.324,32.91 50,30.592 54.678,32.91 \t\"/>\n\t<path style=\"fill:#ffffff;\" d=\"M40.44,74.066l0.104,0.403c0.19,0.74,0.874,1.204,1.528,1.035l2.82-0.723l-3.032,3.031\n\t\tc-0.54,0.541-0.54,1.417,0,1.958l0.295,0.294c0.54,0.539,1.416,0.539,1.959,0l4.188-4.195v5.882c0,0.765,0.623,1.385,1.389,1.385\n\t\th0.413c0.766,0,1.384-0.62,1.384-1.385V75.87l4.194,4.195c0.539,0.539,1.414,0.539,1.958,0l0.291-0.294\n\t\tc0.54-0.541,0.54-1.417,0-1.958l-3.101-3.103l3.098,0.794c0.655,0.169,1.339-0.295,1.529-1.035l0.102-0.403\n\t\tc0.192-0.74-0.185-1.478-0.839-1.645l-8.343-2.142c-0.126-0.032-0.252-0.04-0.377-0.029c-0.123-0.011-0.252-0.003-0.375,0.029\n\t\tl-8.347,2.142C40.625,72.589,40.251,73.326,40.44,74.066z\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"50,62.41 54.678,67.088 50,69.405 45.324,67.088 \t\"/>\n\t<path style=\"fill:#ffffff;\" d=\"M34.004,29.634l-0.401-0.112c-0.733-0.208-1.479,0.149-1.661,0.798l-0.793,2.804l-1.097-4.146\n\t\tc-0.195-0.738-0.954-1.178-1.692-0.984L27.958,28.1c-0.74,0.196-1.18,0.954-0.983,1.693l1.516,5.732l-5.084-2.957\n\t\tc-0.66-0.383-1.508-0.161-1.893,0.5l-0.209,0.359c-0.385,0.662-0.16,1.51,0.5,1.892l5.086,2.959l-5.735,1.516\n\t\tc-0.738,0.195-1.18,0.953-0.983,1.693l0.106,0.401c0.194,0.737,0.953,1.18,1.69,0.982l4.244-1.122l-2.247,2.28\n\t\tc-0.475,0.48-0.415,1.306,0.128,1.842l0.296,0.292c0.545,0.538,1.369,0.582,1.845,0.101l6.047-6.137\n\t\tc0.091-0.092,0.161-0.196,0.213-0.31c0.072-0.102,0.13-0.215,0.164-0.34l2.345-8.29C35.187,30.537,34.74,29.843,34.004,29.634z\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"39.273,43.759 32.877,45.45 33.226,40.243 37.581,37.365 \t\"/>\n\t<path style=\"fill:#ffffff;\" d=\"M65.996,70.365l0.399,0.112c0.736,0.208,1.48-0.149,1.665-0.799l0.791-2.802l1.097,4.145\n\t\tc0.195,0.739,0.952,1.179,1.692,0.983l0.401-0.106c0.739-0.195,1.18-0.952,0.985-1.691l-1.519-5.734l5.087,2.959\n\t\tc0.659,0.383,1.505,0.157,1.892-0.501l0.208-0.36c0.383-0.659,0.16-1.508-0.501-1.892l-5.084-2.957l5.733-1.517\n\t\tc0.737-0.195,1.179-0.953,0.985-1.692l-0.107-0.401c-0.194-0.74-0.954-1.18-1.693-0.984l-4.24,1.123l2.246-2.28\n\t\tc0.474-0.48,0.416-1.306-0.129-1.843l-0.298-0.29c-0.539-0.536-1.367-0.582-1.841-0.103l-6.049,6.138\n\t\tc-0.091,0.091-0.161,0.197-0.214,0.311c-0.071,0.101-0.129,0.214-0.164,0.34l-2.344,8.29C64.812,69.462,65.26,70.156,65.996,70.365\n\t\tz\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"60.729,56.24 67.123,54.549 66.774,59.757 62.419,62.635 \t\"/>\n\t<path style=\"fill:#ffffff;\" d=\"M24.35,53.565l-0.298,0.289c-0.549,0.53-0.617,1.354-0.147,1.84l2.021,2.096l-4.133-1.141\n\t\tc-0.736-0.203-1.499,0.229-1.703,0.968l-0.109,0.398c-0.203,0.737,0.229,1.501,0.966,1.705l5.718,1.575l-5.116,2.903\n\t\tc-0.663,0.377-0.896,1.222-0.519,1.887l0.205,0.36c0.376,0.664,1.22,0.899,1.886,0.521l5.116-2.903l-1.578,5.718\n\t\tc-0.204,0.737,0.229,1.498,0.966,1.703l0.401,0.11c0.736,0.203,1.5-0.23,1.702-0.967l1.167-4.231l0.838,3.088\n\t\tc0.176,0.652,0.918,1.018,1.655,0.817l0.401-0.108c0.737-0.201,1.193-0.891,1.015-1.541l-2.255-8.315\n\t\tc-0.034-0.125-0.089-0.239-0.16-0.342c-0.051-0.114-0.121-0.22-0.21-0.313l-5.984-6.199C25.728,52.997,24.9,53.034,24.35,53.565z\"\n\t\t/>\n\t<polygon style=\"fill:#ffffff;\" points=\"39.208,56.127 37.448,62.502 33.123,59.58 32.831,54.367 \t\"/>\n\t<path style=\"fill:#ffffff;\" d=\"M75.648,46.435l0.299-0.29c0.551-0.529,0.617-1.354,0.148-1.84l-2.021-2.095l4.133,1.14\n\t\tc0.738,0.203,1.499-0.23,1.702-0.966l0.109-0.4c0.204-0.737-0.229-1.499-0.966-1.702l-5.716-1.576l5.114-2.905\n\t\tc0.664-0.376,0.896-1.223,0.52-1.888l-0.204-0.36c-0.377-0.665-1.221-0.898-1.889-0.521l-5.113,2.904l1.576-5.717\n\t\tc0.202-0.737-0.229-1.5-0.967-1.702l-0.399-0.109c-0.737-0.204-1.501,0.229-1.703,0.966l-1.167,4.229l-0.837-3.089\n\t\tc-0.178-0.65-0.919-1.017-1.657-0.815l-0.401,0.107c-0.735,0.201-1.19,0.891-1.015,1.542l2.257,8.314\n\t\tc0.034,0.126,0.088,0.24,0.16,0.343c0.052,0.112,0.121,0.22,0.212,0.312l5.981,6.2C74.272,47.001,75.099,46.965,75.648,46.435z\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"60.793,43.874 62.553,37.496 66.877,40.421 67.169,45.632 \t\"/>\n</g>`;\n\nconst snowFlake5 = `<polygon style=\"fill:#ffffff;\" points=\"55.219,55.161 54.643,52.272 51.768,51.698 51.558,50.646 52.451,50.05 54.891,51.676\n\t57.341,50.042 61.351,52 86.383,50 61.351,48.001 57.341,49.958 54.891,48.324 52.451,49.951 51.558,49.355 51.768,48.301\n\t54.643,47.728 55.219,44.838 59.438,43.388 75.727,24.272 56.612,40.562 55.161,44.78 52.272,45.357 51.698,48.233 50.631,48.446\n\t50.05,47.572 51.675,45.133 50.035,42.674 52,38.651 50,13.616 48.001,38.651 49.965,42.674 48.322,45.133 49.951,47.572\n\t49.362,48.457 48.318,48.249 47.744,45.374 44.844,44.794 43.39,40.562 24.271,24.272 40.561,43.388 44.795,44.844 45.374,47.745\n\t48.248,48.317 48.458,49.361 47.573,49.953 45.133,48.324 42.673,49.965 38.651,48.001 13.617,50 38.651,52 42.673,50.035\n\t45.133,51.676 47.573,50.05 48.458,50.64 48.249,51.683 45.374,52.256 44.797,55.156 40.561,56.611 24.271,75.727 43.39,59.44\n\t44.844,55.205 47.744,54.627 48.318,51.751 49.348,51.546 49.951,52.451 48.322,54.89 49.959,57.34 48.001,61.349 50,86.384\n\t52,61.349 50.04,57.34 51.675,54.89 50.05,52.451 50.646,51.558 51.698,51.767 52.272,54.642 55.161,55.219 56.612,59.44\n\t75.727,75.727 59.438,56.611 \"/>`;\n\nconst snowFlake6 = `<g>\n\t<polygon style=\"fill:#ffffff;\" points=\"45.751,31.6 47.015,34.621 50.001,37.079 48.737,34.059 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"54.249,31.603 51.264,34.059 50.001,37.079 52.986,34.623 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"50.001,29.417 48.797,33.249 50.001,37.079 51.205,33.249 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"42.811,20.12 44.949,25.229 50.001,29.388 47.862,24.279 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"57.189,20.12 52.14,24.279 50.001,29.388 55.052,25.23 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"50.001,16.423 47.964,22.906 50.001,29.388 52.038,22.906 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"42.811,40.737 44.949,45.845 50.001,50.006 47.862,44.898 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"57.189,40.738 52.14,44.898 50.001,50.006 55.052,45.848 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"50.001,37.041 47.964,43.525 50.001,50.006 52.038,43.525 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"32.298,50.001 38.78,52.039 45.262,50.001 38.78,47.964 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"54.193,50.001 60.675,52.039 67.157,50.001 60.675,47.964 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"54.249,68.398 52.985,65.381 49.999,62.922 51.263,65.941 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"45.751,68.398 48.736,65.941 49.999,62.922 47.015,65.379 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"49.999,70.584 51.203,66.754 49.999,62.922 48.795,66.754 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"57.189,79.881 55.051,74.773 49.999,70.613 52.14,75.725 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"42.811,79.881 47.86,75.725 49.999,70.613 44.948,74.771 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"49.999,83.576 52.036,77.094 49.999,70.613 47.962,77.094 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"57.189,59.266 55.051,54.154 49.999,49.997 52.14,55.105 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"42.811,59.264 47.86,55.105 49.999,49.997 44.948,54.154 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"49.999,62.959 52.036,56.479 49.999,49.997 47.962,56.479 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"31.981,44.352 35.225,44.791 38.856,43.458 35.611,43.02 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"36.283,37.024 36.893,40.841 38.856,43.458 38.248,39.642 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"32.249,39.581 34.942,42.558 38.856,43.458 36.161,40.483 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"20.59,41.075 26.08,41.817 32.224,39.567 26.734,38.825 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"27.869,28.673 28.898,35.136 32.224,39.567 31.194,33.106 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"21.045,33.004 25.602,38.041 32.224,39.567 27.664,34.529 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"38.824,43.441 43.383,48.478 50.004,50.003 45.446,44.963 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"68.019,55.65 64.775,55.211 61.146,56.543 64.389,56.98 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"63.717,62.979 63.108,59.16 61.146,56.543 61.753,60.359 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"67.753,60.42 65.057,57.445 61.146,56.543 63.839,59.521 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"79.41,58.926 73.921,58.186 67.777,60.438 73.267,61.178 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"72.132,71.328 71.102,64.865 67.777,60.438 68.806,66.895 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"78.957,66.998 74.398,61.961 67.777,60.438 72.336,65.475 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"61.177,56.561 56.617,51.525 49.996,49.999 54.555,55.037 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"36.228,62.92 38.202,60.311 38.827,56.494 36.853,59.105 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"31.958,55.574 35.582,56.918 38.827,56.494 35.204,55.148 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"32.204,60.344 36.12,59.461 38.827,56.494 34.91,57.379 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"27.779,71.232 31.121,66.816 32.179,60.359 28.835,64.775 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"20.553,58.803 26.687,61.078 32.179,60.359 26.045,58.082 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"20.972,66.873 27.599,65.377 32.179,60.359 25.551,61.854 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"38.796,56.512 45.424,55.018 50.003,49.998 43.376,51.494 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"63.772,37.081 61.798,39.693 61.173,43.506 63.147,40.897 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"68.042,44.428 64.419,43.083 61.173,43.506 64.796,44.854 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"67.796,39.658 63.88,40.542 61.173,43.506 65.09,42.625 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"72.222,28.768 68.879,33.185 67.821,39.642 71.163,35.225 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"79.447,41.201 73.313,38.922 67.821,39.642 73.955,41.92 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"79.03,33.128 72.402,34.625 67.821,39.642 74.45,38.147 \t\"/>\n\t<polygon style=\"fill:#ffffff;\" points=\"61.204,43.49 54.578,44.986 49.996,50.004 56.626,48.508 \t\"/>\n</g>`;\n\nconst snowFlakes = [\n    snowFlake1, snowFlake2, snowFlake3, snowFlake4, snowFlake5, snowFlake6\n];\n\nfunction paintSnowFlake(svg, i=0){\n    i = i > 5 ? 0 : i;\n    if(!svg){\n        svg = d3.select(\"body\").append(\"svg\")\n            .attr(\"width\", width)\n            .attr(\"height\", height);\n    }\n    return svg.html(snowFlakes[i]).attr('class', 'mountain-snow');\n}\n\nexport {snowFlakes, paintSnowFlake};\n","import {paintSnowFlake} from \"./snow_flakes\";\nimport * as colors from \"./colors\";\n\nconst getRandomInt = colors.getRandomInt;\n//0171bb\nconst mountainColor = colors.colors[19];//'#009de3';//colors.colors[ colorPos ] //'#0171bb';\n\nconst glacier = `\n<g class=\"glacier-container\">\n  <g\n     id=\"layer2\"\n     style=\"display:inline\"\n     transform=\"translate(6.963532e-8,-204.39583)\">\n    <path\n       style=\"display:inline;opacity:1;fill:${mountainColor};fill-opacity:1;fill-rule:nonzero;stroke:#ffffff;stroke-width:3.35840201;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 1.6920159,294.73714 57.477655,206.07489 114.30692,295.3006\"\n       class=\"mountain-side\">\n      <title\n         id=\"title916\">ladera</title>\n    </path>\n  </g>\n  <g\n     id=\"layer3\"\n     style=\"display:inline\"\n     transform=\"translate(6.963532e-8,-204.39583)\">\n    <path\n       style=\"display:inline;opacity:1;fill:#ffffff;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:3.35840201;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 6.1966122,294.73715 57.477651,212.83178 109.80233,295.3006 86.299705,269.37912 57.999473,295.01887 31.760924,269.37912 Z\"\n       class=\"ice\">\n      <title\n         id=\"title914\">ice</title>\n    </path>\n  </g>\n</g>`;\n\n\nfunction paintGlacier_2(svg, glacier) {\n    const mountains = svg.append('g').html(glacier);\n    const mountainsNode = mountains.attr('class', 'mountains').node();\n    const mountainsChild = mountains.select('g').attr('class', 'mountain');\n    const mountainNode = mountainsChild.node();\n    const newMountainNode = mountainNode.cloneNode(true);\n    mountainsNode.insertBefore(newMountainNode, mountainNode);\n    d3.select(newMountainNode).attr('transform', 'translate(50, 4) scale(0.9)');\n    window.mountains = mountains\n    return mountains;\n}\n\nfunction paintGlacier(svg, glacier) {\n    const mountains = svg.append('g')\n    .attr('class', 'two-mountains-group').html(glacier);\n    return mountains;\n}\n\nfunction scaleIce(elem, scaleFactor){\n    const bbox = elem.getBBox();\n    const erect = elem.getBoundingClientRect();\n    elem.setAttribute('transform', 'scale(' + scaleFactor + ')');\n    const erect1 = elem.getBoundingClientRect();\n    const peakX = erect.width / 2;\n    const peak1X = erect1.width / 2;\n    const widthOffset = peakX - peak1X;\n    const heightOffset = erect.height * scaleFactor;\n    const tx1 = -bbox.x;\n    const ty1 = -bbox.y;\n    const tx2 = bbox.x;\n    const ty2 = bbox.y;\n    const transform = `translate(${widthOffset}, 0) translate(${tx2}, ${ty2}) scale(${scaleFactor}) translate(${tx1}, ${ty1})`;\n    elem.setAttribute('transform', transform);\n    return elem\n}\n\nfunction duplicateMountain(frontMountain){\n    const backMountain = frontMountain.cloneNode(true);\n    const parent = frontMountain.parentNode;\n    parent.insertBefore(backMountain, frontMountain);\n    frontMountain.setAttribute('class', 'front-glacier-mountain');\n    backMountain.setAttribute('class', 'back-glacier-mountain');\n    backMountain.setAttribute('transform', 'translate(40, 10) scale(0.8)');\n    const d3Parent = d3.select(parent);\n    const snowFlake = paintSnowFlake(d3Parent.append('g'), getRandomInt(0, 5));\n\n    return d3Parent;\n}\n\n\n//Array.from(document.getElementsByClassName('two-mountains')).forEach(el => el.removeAttribute('transform'))\n//d3.selectAll('.two-mountains').attr( 'transform', (a, i) => 'translate(100, ' + (200 * (i+1)) + ') scale(1.5)' )\nfunction paintGlaciers(svg, sizeScales) {\n    let glaciers = [];\n    const historyGroup = svg.append('g').attr('id', 'history_group');\n\n    sizeScales.forEach(scale => {\n        //onsole.log(scale, i)\n        const mountainsGroup = historyGroup.append('g').attr('class', 'two-mountains');\n        const glacierEl = paintGlacier(mountainsGroup, glacier);\n        const ice = glacierEl.select('.ice');\n        scaleIce(ice.node(), scale);\n        const frontMountain = glacierEl.select('.glacier-container').node();\n        const mountainGroup = duplicateMountain(frontMountain);\n        const flake = mountainsGroup.select('.mountain-snow');\n        flake.attr('transform', 'translate(50, -30) scale(0.4)');\n        glaciers.push(mountainsGroup);\n\n    });\n    window.glaciers = glaciers\n    //ñaaaaapaaaaaa\n    /*const mountainsY = [-66 , 130, 425]\n    d3.selectAll('.two-mountains')\n        .attr( 'transform', (a, i) => 'translate(0, ' + mountainsY[i] + ') scale(1.5)' );\n    historyGroup.attr('transform', 'translate(0, 100)');*/\n    return historyGroup;\n}\n\n\nfunction localCoordsToSvgCoords(x, y, el) {\n    var offset = svgDoc.getBoundingClientRect();\n    el = el || elem;\n    var matrix = el.getScreenCTM();\n\n    return {\n        x: (matrix.a * x) + (matrix.c * y) + matrix.e - offset.left,\n        y: (matrix.b * x) + (matrix.d * y) + matrix.f - offset.top\n    };\n}\n\nfunction globalCoordsToElementCoords(screenPointX, screenPointY, someSvgObject)\n{\n  var screenPoint = document.getElementsByTagName('svg')[0].createSVGPoint();\n  screenPoint.x = screenPointX;\n  screenPoint.y = screenPointY;\n  var CTM = someSvgObject.getScreenCTM();\n  return screenPoint.matrixTransform( CTM.inverse() );\n}\n\nfunction createSquare(x, y) {\n    var square = d3.select('svg').append(\"line\")\n        .attr(\"x1\", 100)\n        .attr(\"y1\", 0)\n        .attr(\"x2\", 100)\n        .attr(\"y2\", 1500).attr(\"stroke-width\", 2)\n        .attr(\"stroke\", \"red\");\n\n}\n\nfunction createCircle(x, y, r, id) {\n    const el = d3.select('svg').append(\"circle\")\n        .attr(\"cx\", x)\n        .attr(\"cy\", y)\n        .attr(\"r\", r || 5)\n        .attr(\"fill\", \"#ff0000\")\n        .on('click', function(){\n            this.parentNode.removeChild(this)\n        });\n    if(id){\n        el.attr('id', id)\n     }\n}\n\nfunction createRect(x, y, w, h, id) {\n    const el = d3.select('svg')\n        .append(\"rect\")\n        .attr(\"x\", x)\n        .attr(\"y\", y)\n        .attr(\"width\", w || 10)\n        .attr(\"height\", h || 10)\n        .attr(\"fill\", \"#cd46ff\").on('click', function(){\n            this.parentNode.removeChild(this)\n        });\n     if(id){\n        el.attr('id', id)\n     }\n}\n\nexport {paintGlaciers, paintGlacier}\n\n/*\n\n\nconst glacier1 = `<g\n     id=\"layer1\">\n    <path class=\"hielo\" transform=\"translate(100, 100)\"\n     id=\"dummy_rect\"\n     d=\"M 0,0 H 400 L 0,400 Z\"\n     style=\"fill:#000080;fill-opacity:1;fill-rule:nonzero;stroke:#7171ff;stroke-width:1.20189536;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n  </g>`;\n\nwindow.createRect = createRect;\nwindow.createCircle = createCircle;\nwindow.localCoordsToSvgCoords = localCoordsToSvgCoords;\nwindow.globalCoordsToElementCoords = globalCoordsToElementCoords;\nwindow.scaleInPosition = scaleInPosition;\n    var line1 = d3.select('svg').append(\"line\")\n        .attr(\"x1\", 100)\n        .attr(\"y1\", 0)\n        .attr(\"x2\", 100)\n        .attr(\"y2\", 1500).attr(\"stroke-width\", 2)\n        .attr(\"stroke\", \"red\");\n    var line2 = d3.select('svg').append(\"line\")\n        .attr(\"x1\", 0)\n        .attr(\"y1\", 100)\n        .attr(\"x2\", 1000)\n        .attr(\"y2\", 100).attr(\"stroke-width\", 2)\n        .attr(\"stroke\", \"red\");\n*/\n\n\n","import * as d3 from \"d3\";\nimport '../scss/main.scss';\nimport {createKochFlake} from \"./util/kochsnowflake\";\nimport {paintGlacierInMap, changeArrowPath} from \"./util/glacier_drawing\";\nimport { generateVoronoiTileBackground } from \"./util/voronoi_tile\";\nimport {paintGlaciers} from \"./util/glacier_history\";\nimport {colors, blueGradient, contrastColors} from \"./util/colors\";\n\nwindow.d3 = d3;\n\nconst width = 560,\n    height = 1200;\n\n//ñapa\nconst mapOffsetHeight = 30;\n\nlet mainBlue = '#3a51bc';\n\n//let colorScale = ;\nlet tileColor1 =  blueGradient[0];\nlet tileColor2 =  blueGradient[19]\nconst blockBackGround = colors[3];\nconst mapBackGround = colors[16];\nconst defaultStrokeWidth = 2;\nconst defaultCorners = 5;\nconst defaultOpacity = 0.8;\nconst textColor = '#ffffff';\n\n\nconst margin = 10;\n\nconst maxSizeYear = 1857;\nconst middleSizeYear = 1994;\nconst lowestSizeYear = 2013;\n\nconst maladateSizeEvolution = {\n    mountainYears: [ [maxSizeYear, 148.5], [middleSizeYear, 42], [lowestSizeYear, 25 ] ],\n    flakeYears: [1994, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2013],\n    hectares: [42, 38, 37, 35, 35, 33, 31, 28, 29, 28, 28, 25, 25]\n};\nconst fontFamily = 'helvetica, verdana, sans-serif';\nconst maxSizeLast20years = Math.max(...maladateSizeEvolution.hectares);\nmaladateSizeEvolution.scales = maladateSizeEvolution.hectares.map(val => val / maxSizeLast20years);\n\nconst clearSvg = () => (document.getElementsByTagName('svg')[0] || {remove: () => {}}).remove();\nconst isD3object = (d3ob) => d3ob ? Object.keys(d3ob).toString() === \"_groups,_parents\" : false;\nconst rndId = (prefix = '_') => prefix + Math.random().toString(36).substr(2, 9);\nconst d3Rect = (element) => isD3object(element) ? element.node().getBoundingClientRect() : {};\nconst d3BBbox = (element) => isD3object(element) ? element.node().getBBox() : {};\nconst computeTranslate = (props) => props ? 'translate(' + (props.x || 0) + ',' + (props.y || 0) + ')' : '';\nconst wait = (args, t) => {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            resolve(args)\n        }, t);\n    })\n};\nconst computeScale = (props, rect = {}) => {\n    if (!props) return '';\n    let widthScale, heightScale;\n    let scale = '';\n    if (props.width && props.height) {\n        widthScale = props.width / rect.width;\n        heightScale = props.height / rect.height;\n        scale = 'scale(' + widthScale + ',' + heightScale + ')';\n    } else if (props.height && !props.width) {\n        scale = 'scale(' + (props.height / rect.height) + ')';\n    } else if (!props.height && props.width) {\n        scale = 'scale(' + (props.width / rect.width) + ')';\n    }\n    return scale;\n};\n\nfunction roundedSquareCanvas(parentNode, props) {\n    const corners = props.corners || defaultCorners;\n    const fill = props.fill || colors[0];\n    const stroke = props.stroke || colors[0];\n    const strokeWidth = 'strokeWidth' in props ? props.strokeWidth : defaultStrokeWidth;\n    const x = props.x || 0;\n    const y = props.y || 0;\n    const id = props.id || rndId();\n    const width = props.width || 250;\n    const height = props.height || 250;\n    const squareGroup = parentNode.append('g').attr('id', id);\n    const opacity = 'opacity' in props ? props.opacity : 1;\n    squareGroup.append(\"rect\")\n        .attr(\"rx\", corners)\n        .attr(\"ry\", corners)\n        .attr(\"x\", x)\n        .attr(\"y\", y)\n        .attr(\"width\", width)\n        .attr(\"height\", height)\n        .attr(\"opacity\", opacity)\n        .style('fill', fill)\n        .style('stroke', stroke)\n        .style(\"stroke-width\", strokeWidth);\n    return squareGroup;\n}\n\nfunction centerToElement(element, referent) {\n    const elementRect = d3Rect(element);\n    const refRect = d3Rect(referent);\n    const left = refRect.left - elementRect.left + (refRect.width - elementRect.width) / 2;\n    const top = refRect.top - elementRect.top + (refRect.height - elementRect.height) / 2;\n    element.attr('transform', 'translate(' + left + ',' + top + ')');\n}\n\nfunction renderTitle(svg) {\n    const marginDoble = margin * 2;\n    const titleProps = {\n        id: 'title',\n        x: marginDoble,\n        y: margin,\n        strokeFill: 'none',\n        opacity: defaultOpacity,\n        width: width - marginDoble * 2,//width - margin * 2,\n        height: 40,\n        fill: blockBackGround,\n        //corners: 10,\n        //strokeWidth: 0,\n        fontSize: 30\n    };\n    const titleText = 'El deshielo de la Maladeta';\n    const square = roundedSquareCanvas(svg, titleProps);\n    const textContainer = square.append('g').attr('id', 'title_text_group');\n    textContainer\n        .append('text')\n        .attr('font-family', fontFamily)\n        .text(titleText)\n        .attr('fill', textColor)\n        .attr('x', 0)\n        .attr('y', titleProps.fontSize)\n        .attr('font-size', titleProps.fontSize);\n    centerToElement(textContainer, square.select('rect'));\n    return square;\n}\n\nfunction positionMap(maladeta, map) {\n    const maladetaRect = d3Rect(maladeta);\n    const mapWithArrow = map.select('#spain_with_arrow');\n    const mapRect = d3Rect(mapWithArrow);\n    const rectangle = d3.select(map.node()).select('rect');\n    const rect = d3Rect(rectangle);\n    const scaleFactor = 0.7; //Reduction factor\n    const scaleProps = {width: (rect.width - mapRect.left) * scaleFactor};\n    const scale = computeScale(scaleProps, mapRect);\n    const translateProps = {\n        x: margin * 2,\n        y:  -margin\n    };\n    let translate = computeTranslate(translateProps);\n    mapWithArrow.attr('transform', scale + ' ' + translate);\n\n}\n\nfunction positionMaladetaMap(maladetaMap, props = {}) {\n    const rectMaladeta = d3Rect(maladetaMap);\n    const rect = d3Rect(d3.select(maladetaMap.node().parentNode).select('rect'));\n    const maladetaRect = d3Rect(maladetaMap);\n    let scale = '', translate = '';\n    let dummyOffset = 4;\n    let xMap = rect.left + rect.width - maladetaRect.x - maladetaRect.width - margin*2;\n    let yMap = rect.y + (rect.height -maladetaRect.height - margin) + window.scrollY;\n    props = {\n        x: xMap,\n        y: yMap - margin * 2\n    };\n\n    translate = computeTranslate(props);\n    maladetaMap.attr('transform', translate + ' ' + scale);\n}\n\nfunction renderMap(svg, rect={}) {\n    const marginDoble = margin * 2;\n    const mapSquareProps = {\n        id: rndId('map_'),\n        //corners: margin,\n        x: marginDoble,\n        y: margin,\n        //stroke: colors[33],\n        opacity: defaultOpacity,\n        //fill: '#ff0000',\n        fill: mapBackGround,\n        width: width - marginDoble * 2,\n        //strokeWidth: 3,\n        height: 330\n    };\n    const mapGroup = roundedSquareCanvas(svg, mapSquareProps);\n    const rectInMap = mapGroup.select('rect');\n\n    //ñapa\n    setTimeout(() => {\n        rectInMap.attr('height', +rectInMap.attr('height') - 30);\n    }, 200);\n\n    //rectInMap.attr('height',  +rectInMap.attr('height') - mapOffsetHeight)\n    //const h = +rectInMap.attr('height') - mapOffsetHeight;\n    let maladetaMap;\n    return paintGlacierInMap(mapGroup)\n        .then(mapGroup => {\n            maladetaMap = mapGroup.select('#glaciar_map_drawing');\n            positionMaladetaMap(maladetaMap);\n            return {maladeta: maladetaMap, map: mapGroup};\n        })\n        .then(mapOb => {\n            positionMap(mapOb.maladeta, mapOb.map);\n            if(rect && rect.height){\n                window.rect = rect;\n                window.mapGroup = mapGroup;\n                mapGroup.attr('transform', computeTranslate({x: 0, y: rect.height + margin}))\n            }\n            return mapOb;\n        })\n        .then(mapOb => wait(mapOb, 100))\n        .then(mapOb => {\n            const glacier = d3.select('#glaciar_map_drawing');\n            glacier.style('visibility', 'visible');\n            glacier.node().removeAttribute('style');\n            changeArrowPath([35, 170],[185, 415]);\n            return mapOb;\n        })\n        .catch(er => console.warn(er));\n}\n\nfunction renderTile(svg){\n    return generateVoronoiTileBackground(svg, width, height, tileColor1, tileColor2)\n}\n\nfunction paintSnowFlakes(svg) {\n    const marginDoble = margin * 2;\n    const rect = d3Rect(svg);\n    const availableHeight = rect.height;\n    const padding = 9;\n    const leftLegendRect = d3Rect(d3.select('#left_legend'));\n    let blockHeight =  Math.floor(availableHeight / (maladateSizeEvolution.scales.length)) - padding;\n    let flakeSize = blockHeight - padding;//;\n    let flakesContainer = svg.append('g').attr('id', 'flakes_container');\n    let node = null;\n    window.sq = null;\n    const getNode = () => {\n        if (!node) {\n            const flakeSquareProps = {\n                x: 0,\n                y: 0,\n                opacity: defaultOpacity,\n                fill: mapBackGround,\n                width: leftLegendRect.width,\n                //strokeWidth: 0,\n                height: blockHeight,\n                //corners: margin\n            };\n            const flakeSquareContainer = flakesContainer.append('g').attr('class', 'flake-block');\n            const flakeSquare = roundedSquareCanvas(flakeSquareContainer, flakeSquareProps);\n            let kochFlake = createKochFlake(flakeSquare, {\n                size: flakeSize,\n                x: Math.floor(flakeSize / 2),\n                y: 0\n            });\n            kochFlake.attr('class', 'snow-flake');\n            node = flakeSquare.node();\n\n            return node;\n        }\n        const clonedNode = node.cloneNode(true);\n        return clonedNode;\n    };\n    //let anode = getNode()\n    //iterateKochFlake(6);\n\n    let snowFlakes = maladateSizeEvolution.scales.map((scale, i) => {\n        const newFlake = getNode();\n        node.parentNode.appendChild(newFlake);\n        let id = 'year_' + maladateSizeEvolution.flakeYears[i] + '_'\n            + maladateSizeEvolution.hectares[i];\n        let flake = d3.select(newFlake)\n            .attr('id', id);\n        return flake;\n    });\n    //snowFlakes = [snowFlakes[0]]\n\n    const yFlake = (blockHeight - flakeSize) / 2;\n    const fontSize = 25;\n    snowFlakes.forEach((flake, i) => {\n        let y = i * (blockHeight + margin);\n        let rect = d3Rect(flake);\n        let text = flake.append('text')\n        .text(maladateSizeEvolution.flakeYears[i]+': '+maladateSizeEvolution.hectares[i] + ' ha');\n        text.attr('font-size', fontSize)\n            .attr('font-family', fontFamily)\n            .attr('fill', textColor);\n        let transformFlakeGroup = '';\n        let transformScaleFlake = 'scale(' + maladateSizeEvolution.scales[i] + ')';\n        let snowFlake = flake.select('g');\n        if (y > 0) {\n            transformFlakeGroup += ' translate(0, ' + y + ')';\n        }\n        flake.attr('transform', transformFlakeGroup);\n        let txtRect = d3Rect(text);\n        let translateXTxt = 80;\n        let fixedY = txtRect.height + (blockHeight - txtRect.height)/2 -4;\n        text.attr('transform', 'translate('+translateXTxt+', ' + fixedY + ')');\n        let bgRect = flake.select('rect');\n        let rectFlakeRect = d3Rect(bgRect);\n        //bgRect.attr('width', txtRect.left+ txtRect.width +translateXTxt)\n        let snowLeft = rectFlakeRect.left ;\n        snowFlake.attr('transform', computeTranslate({x: snowLeft + margin, y: 0}) + ' '+transformScaleFlake);\n\n    });\n     snowFlakes.forEach((flake, i) => {\n        let snowFlakeOutter = flake.select('g');\n        let snowFlake = snowFlakeOutter.select('g');\n        let snowFlakeRect = d3Rect(snowFlake);\n        let fixedY = (blockHeight - snowFlakeRect.height)/2;\n        let transformStr = snowFlakeOutter.attr('transform');\n        //FUCK we need to apply transform on this element, it is not possible on a child one!!!!!\n        let newTransform = transformStr.replace(/translate\\((\\d+),(\\d+)\\)/, 'translate($1,'+fixedY+')');\n        snowFlakeOutter.attr('transform', newTransform);\n    });\n    return flakesContainer;\n}\n\nfunction renderSnowFlakes(flakesSquareGroup, rect){\n    const marginDoble = margin * 2;\n    const lastY = rect.top + rect.height;\n    const flakesRect = d3Rect(flakesSquareGroup);\n    const startY = lastY - flakesRect.y + marginDoble;\n    const snowFlakes = paintSnowFlakes(flakesSquareGroup);\n    return flakesSquareGroup;\n}\n\nfunction renderGlaciers(svg){\n    const svgRect = d3Rect(svg);\n    const marginDoble = margin * 2;\n    console.log(svg)\n    const glacierSquareProps = {\n        id: 'glacier_history',\n        x: 0,\n        y: 0,\n        opacity: 0,\n        width: svgRect.width/2 -margin,\n        height: svgRect.height\n    };\n\n    const glaciersHistoryGroup = roundedSquareCanvas(svg, glacierSquareProps);\n    const maxSize = maladateSizeEvolution.mountainYears[0][1];\n    const sizeScales = maladateSizeEvolution.mountainYears\n                        .map(yearSizeAr => yearSizeAr[1] / maxSize);\n    const glaciers = paintGlaciers(glaciersHistoryGroup, sizeScales);\n    const twoMountains = glaciers.selectAll('.two-mountains');\n    const tmg = twoMountains.select('.two-mountains-group');\n    const tmgr = d3Rect(tmg);\n    const sqrRect = d3Rect(glaciersHistoryGroup.select('rect'));\n    const scaleFactor = 1.4;\n\n    const athird = sqrRect.height/3;\n    const athirdOffset = 50;\n    const mountainsY = [0, athird, athird*2];\n\n    const xMountains = (sqrRect.width - tmgr.width*1.5)/2 ;\n\n    const glacierTexts = twoMountains\n        .append('g')\n        .attr('transform', 'translate('+xMountains+', 110)')\n        .append('text')\n        .text(function(a, i){\n            const year = maladateSizeEvolution.mountainYears[i];\n            return year[0] + ': ' +year[1] + ' hectáreas';\n        })\n        .attr('fill', textColor)\n        .attr('font-size', 15)\n        .attr('font-family', fontFamily);\n\n    twoMountains.attr( 'transform', (a, i) => 'translate(0, ' + (mountainsY[i] + athirdOffset) + ') scale('+scaleFactor+')' );\n    const rightLegendRect = d3Rect(d3.select('#right_legend'));\n    glaciersHistoryGroup.attr('transform', computeTranslate({x:rightLegendRect.x - marginDoble , y: 0}));\n    tmg.attr('transform', () => 'translate(' + (xMountains + 10) + ', 0)');\n    let mountainsRect = d3Rect(tmg);\n    //let maxWidth = 150;\n    const textNodes = Array.from(glacierTexts.nodes());\n    const boxes = textNodes.map(node => node.getBBox().width)\n    let maxWidth = Math.max( ...textNodes.map(node => node.getBBox().width) );\n     textNodes.forEach(node => {\n        const bbox = node.getBBox();\n        const parent = node.parentNode;\n        const box = document.createElementNS(\"http://www.w3.org/2000/svg\", 'rect');\n        parent.insertBefore(box, node);\n        console.log(boxes);\n        const padding = 4;\n        const rectWidth = maxWidth + padding;\n        const rect = d3.select(box)//parent.append(\"rect\")\n            .attr(\"x\", bbox.x)\n            .attr(\"y\", bbox.y - padding/2)\n            .attr(\"width\", rectWidth)\n            .attr(\"height\", bbox.height + padding)\n            .style(\"fill\", colors[19])\n            .style(\"stroke\", colors[0])\n            .style(\"stroke-width\", '#ffffff');\n        let centerX = (rectWidth - bbox.width)/2\n        node.setAttribute('transform', 'translate(' + centerX + ', 0)' )\n\n     });\n\n}\n\nfunction renderLegends(svg, rect={}){\n    const marginDoble = margin * 2;\n    const lastY = rect.top + rect.height;\n    const availableSpace = height - lastY - window.scrollY;\n    const rectWidth = rect.width/2 - margin;\n    const rectHeight = 80;\n    let squareLeftProps = {\n        id: 'left_legend',\n        x: marginDoble,\n        y: 0,\n        fill: blockBackGround,\n        opacity: defaultOpacity,\n        //corners: margin,\n        width: rectWidth,\n        height: rectHeight,\n        //strokeWidth: defaultStrokeWidth\n    };\n    const leftLegendGroup = roundedSquareCanvas(svg, squareLeftProps);\n    const leftLegendRect = d3Rect(leftLegendGroup);\n    const startY = lastY - leftLegendRect.y + margin;\n    const leftSquarePosition = {\n        x: 0,\n        y: startY\n    };\n    leftLegendGroup.attr('transform', computeTranslate(leftSquarePosition));\n\n    let squareRightProps = Object.assign({}, squareLeftProps);\n    squareRightProps.id  = 'right_legend';\n\n    const rightLegendGroup = roundedSquareCanvas(svg, squareRightProps);\n    //const startY = lastY - leftLegendRect.y + marginDoble;\n    const rightSquarePosition = {\n        x: width - squareLeftProps.width - marginDoble * 2,\n        y: startY\n    };\n    rightLegendGroup.attr('transform', computeTranslate(rightSquarePosition));\n\n    const leftText = renderLeftText(leftLegendGroup);\n    const rightText = renderRightText(rightLegendGroup);\n    const leftTextBox = d3Rect(leftText);\n    const rightTextBox = d3Rect(rightText);\n    console.log('lay ', (rectHeight - leftTextBox.height)/2)\n    leftText.attr('transform', computeTranslate({x: (rectWidth - leftTextBox.width)/2,\n                                    y: -(rectHeight - leftTextBox.height)/2 }));\n    rightText.attr('transform', computeTranslate({x: (rectWidth - rightTextBox.width)/2,\n                                    y: -(rectHeight - rightTextBox.height)/2 }));\n    return leftLegendGroup;\n}\n\nfunction createLegendText(svg, text, fSize = 17){\n    const  fontFamily = \"fantasy\";//  font-family = \"fantasy\"\n    return svg.append('text')\n        .attr('class', 'legend')\n        .attr('font-family', 'helvetica, verdana, sans-serif')\n        //.text(legend)\n        .attr('fill', '#ffffff')\n        .attr('font-size', fSize).html(text)\n}\n\nfunction renderLeftText(svg){\n    const marginDoble = margin * 2;\n    const interlineado = marginDoble + 5;\n    const max = Math.max(...maladateSizeEvolution.hectares);\n    const min = Math.min(...maladateSizeEvolution.hectares);\n    const loss = (100 - (min * 100 / max)).toFixed(1);\n    const legendGroup = svg.append('g').attr('class', 'legend');\n    let firstSentence = `<tspan x=\"${marginDoble}\" dy=\"${interlineado}\">En 20 años el Glaciar de la </tspan>\n    <tspan x=\"${marginDoble}\" dy=\"${interlineado}\">Maladeta ha perdido</tspan>\n    <tspan x=\"${marginDoble}\" dy=\"${interlineado}\">el ${loss}% de su superficie.</tspan>`;\n\n    return createLegendText(legendGroup, firstSentence);\n\n}\n\nfunction renderRightText(svg){\n    const marginDoble = margin * 2;\n    const interlineado = marginDoble + 5;\n    const legendGroup = svg.append('g').attr('class', 'legend');\n    let firstSentence = `<tspan x=\"${marginDoble}\" dy=\"${interlineado}\">Desde 1857 han desaparecido </tspan>\n    <tspan x=\"${marginDoble}\" dy=\"${interlineado}\">123 hectáreas de hielo</tspan>\n    <tspan x=\"${marginDoble}\" dy=\"${interlineado}\">más del 80%.</tspan>`;\n    return createLegendText(svg, firstSentence);\n}\n\nfunction renderBottomLegends(svg, rect={}){\n    const marginDoble = margin * 2;\n    let bottomHeight = 20;\n    let props = {\n        id: 'bottom_messages',\n        x: marginDoble,\n        y: 0,\n        width: width - marginDoble * 2,\n        fill: blockBackGround,\n        opacity: defaultOpacity,\n        height: bottomHeight    };\n\n    const bottomGroup = roundedSquareCanvas(svg, props);\n    const fSize = 14;\n    bottomGroup.attr('transform', 'translate(0, '+ (height - bottomHeight - margin) +')');\n    const url = 'https://www.miteco.gob.es/es/agua/temas/evaluacion-de-los-recursos-hidricos/ERHIN/glaciares-evolucion/';\n    const firstSentence = `<tspan x=\"${marginDoble}\" dy=\"${marginDoble}\">Glaciares - Evolución y situación actual. Ministerio para la transición ecológica</tspan>`;\n    const text = createLegendText(bottomGroup, firstSentence, fSize);\n    text.attr('transform', 'translate(15, -5)')\n    bottomGroup.on('click', ()=>{\n        const redirectWindow = window.open(url, '_blank');\n        redirectWindow.location;\n    });\n\n    return bottomGroup\n}\n\nfunction renderAvailableSpace(svg, top, bottom){\n    let topRect = d3Rect(top);\n    let bottomRect = d3Rect(bottom);\n    let topY = topRect.y + topRect.height;\n    let bottomY = bottomRect.y;\n    const marginDoble = margin * 2;\n    let props = {\n        id: 'available_space',\n        x: 0,\n        fill: '#dd3a64',\n        y: 0,\n        opacity: 0,\n        width: width - marginDoble * 2,\n        height: bottomY - topY - marginDoble\n    };\n\n    const availableGroup = roundedSquareCanvas(svg, props);\n    availableGroup.select('rect').attr('class', 'bg-content-rect');\n    availableGroup.attr('transform', 'translate(' + marginDoble +', '+ ( topY + margin + window.scrollY ) +')');\n    return availableGroup;\n}\n\nfunction main() {\n    clearSvg();\n    //window.scrollTo(0, 0);\n    let map;\n    let svg = d3.select(\"#svg_container\")\n        .append(\"svg\")\n        .attr(\"width\", width)\n        .attr(\"height\", height)\n        .style(\"background-color\", d3.schemeCategory10[Math.floor(Math.random() * 10)]);\n\n    const tile = renderTile(svg);\n    const title = renderTitle(svg);\n    let legends, bottomLegends;\n    renderMap(svg, d3Rect(title))\n        .then(map => {\n            const mapRect = d3Rect(map.map);\n            legends = renderLegends(svg, mapRect);\n            return legends;\n        })\n        .then(() => {\n            bottomLegends = renderBottomLegends(svg);\n            return bottomLegends;\n        })\n        .then( () => {\n            return renderAvailableSpace(svg, legends, bottomLegends);\n        })\n      .then(availableContainer => {\n            const mapRect = d3Rect(availableContainer);\n            const snowFlakesGroup = renderSnowFlakes(availableContainer, mapRect);\n            return snowFlakesGroup;\n        })\n       .then(snowFlakesGroup => {\n            //snowFlakesGroup.select('#flakes_container').attr('visibility', 'hidden');\n            let glaciers = renderGlaciers(snowFlakesGroup)\n            return snowFlakesGroup;\n        })\n        .then(txt => console.log('end '));\n}\n\nmain();\nwindow.d3Rect = d3Rect;\n//window.main = main;\n/*document.addEventListener('DOMContentLoaded', () => {\n    let defaultColor1 = '#d5d5d5';\n    let defaultColor2 = '#3252CB';\n    const inputColor1 = document.getElementById('color1');\n    const inputColor2 = document.getElementById('color2');\n\n    setTimeout(() => {\n        inputColor1.value = defaultColor1;\n        inputColor2.value = defaultColor2;\n        inputColor1.style.backgroundColor = defaultColor1;\n        inputColor2.style.backgroundColor = defaultColor2;\n        main();\n        window.d3Rect = d3Rect;\n        window.main = main;\n\n    }, 100)\n});*/\n\n"],"sourceRoot":""}